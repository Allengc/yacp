--- origsrc/hieroglyph/configure.ac	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/configure.ac	2010-12-24 23:22:05.037604600 +0900
@@ -1,7 +1,7 @@
 dnl Process this file with autoconf to produce a configure script.
 AC_INIT([hieroglyph], 0.0.1, [https://bugs.freedesktop.org/enter_bug.cgi?product=Hieroglyph])
 
-. ./requires
+. ${srcdir}/requires
 
 # Support silent build rules, requires at least automake-1.11. Enable
 # by either passing --enable-silent-rules to configure or passing V=0
@@ -9,10 +9,9 @@ AC_INIT([hieroglyph], 0.0.1, [https://bu
 m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])
 
 AM_INIT_AUTOMAKE($PACKAGE_NAME, $PACKAGE_VERSION)
-AM_MAINTAINER_MODE
 AM_CONFIG_HEADER([config.h])
 
-AC_PROG_LIBTOOL
+LT_INIT(win32-dll)
 AC_PROG_INTLTOOL
 AC_PROG_LEX
 AC_PROG_YACC
@@ -23,7 +22,6 @@ GNOME_COMPILE_WARNINGS
 
 GNOME_COMMON_INIT
 GNOME_DEBUG_CHECK
-GNOME_MAINTAINER_MODE_DEFINES
 
 AC_SYS_LARGEFILE
 
--- origsrc/hieroglyph/hieroglyph/Makefile.am	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/hieroglyph/Makefile.am	2010-12-25 10:34:36.025664000 +0900
@@ -101,7 +101,7 @@ hg_sources =							\
 stamp_files =							\
 	$(NULL)
 #
-LEX_OUTPUT_ROOT=lex.$(basename $<)
+LEX_OUTPUT_ROOT=lex.$(basename $(<F))
 
 ##
 # Local Rules
@@ -131,5 +131,6 @@ libhieroglyph_la_CFLAGS =					\
 	$(NULL)
 libhieroglyph_la_LDFLAGS =					\
 	$(LDFLAGS)						\
+	-no-undefined						\
 	-version-info $(LT_CURRENT):$(LT_REVISION):$(LT_AGE)	\
 	$(NULL)
--- origsrc/hieroglyph/hieroglyph/hgerror.c	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/hieroglyph/hgerror.c	2010-12-24 22:55:51.545033400 +0900
@@ -25,7 +25,9 @@
 #include "config.h"
 #endif
 
+#if !defined(__CYGWIN__)
 #include <execinfo.h>
+#endif
 #include <stdlib.h>
 #include "hgerror.h"
 
@@ -48,6 +50,9 @@ hg_get_stacktrace(void)
 	int size, i;
 	char **strings;
 
+#if defined(__CYGWIN__)
+	return g_strdup("");
+#else
 	if (__hg_stacktrace_feature == FALSE)
 		return g_strdup("");
 
@@ -69,6 +74,7 @@ hg_get_stacktrace(void)
 	g_ptr_array_free(array, TRUE);
 
 	return g_string_free(retval, FALSE);
+#endif
 }
 
 /**
@@ -80,7 +86,7 @@ hg_get_stacktrace(void)
 void
 hg_use_stacktrace(gboolean flag)
 {
-#ifdef HG_DEBUG
+#if defined(HG_DEBUG) && !defined(__CYGWIN__)
 	__hg_stacktrace_feature = flag;
 #else
 	g_warning("The stacktrace feature are entirely disabled at the build time.");
@@ -97,7 +103,7 @@ hg_use_stacktrace(gboolean flag)
 gboolean
 hg_is_stacktrace_enabled(void)
 {
-#ifdef HG_DEBUG
+#if defined(HG_DEBUG) && !defined(__CYGWIN__)
 	return __hg_stacktrace_feature;
 #else
 	return FALSE;
--- origsrc/hieroglyph/hieroglyph/hgoperator.c	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/hieroglyph/hgoperator.c	2010-12-25 10:42:50.026001600 +0900
@@ -5720,7 +5720,7 @@ DEFUNC_OPER_END
 DEFUNC_OPER (print)
 G_STMT_START {
 	hg_quark_t arg0, qstdout;
-	hg_file_t *stdout;
+	hg_file_t *stdout_;
 	gchar *cstr;
 
 	CHECK_STACK (ostack, 1);
@@ -5732,13 +5732,13 @@ G_STMT_START {
 		return FALSE;
 	}
 	qstdout = hg_vm_get_io(vm, HG_FILE_IO_STDOUT, error);
-	stdout = HG_VM_LOCK (vm, qstdout, error);
-	if (stdout == NULL) {
+	stdout_ = HG_VM_LOCK (vm, qstdout, error);
+	if (stdout_ == NULL) {
 		hg_vm_set_error(vm, qself, HG_VM_e_VMerror);
 		goto error;
 	}
 
-	hg_file_write(stdout, cstr,
+	hg_file_write(stdout_, cstr,
 		      sizeof (gchar),
 		      hg_vm_string_length(vm, arg0, error),
 		      error);
--- origsrc/hieroglyph/hieroglyph/hgplugin.c	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/hieroglyph/hgplugin.c	2010-12-24 21:40:27.049127800 +0900
@@ -118,10 +118,18 @@ hg_plugin_open(hg_mem_t          *mem,
 	realname = g_path_get_basename(name);
 	switch (type) {
 	    case HG_PLUGIN_EXTENSION:
+#if defined(__CYGWIN__)
+		    modulename = g_strdup_printf("cygext-%s.dll", realname);
+#else
 		    modulename = g_strdup_printf("libext-%s.so", realname);
+#endif
 		    break;
 	    case HG_PLUGIN_DEVICE:
+#if defined(__CYGWIN__)
+		    modulename = g_strdup_printf("cygdevice-%s.dll", realname);
+#else
 		    modulename = g_strdup_printf("libdevice-%s.so", realname);
+#endif
 		    break;
 	    default:
 		    g_set_error(&err, HG_ERROR, HG_VM_e_VMerror,
--- origsrc/hieroglyph/hieroglyph/hgvm.c	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/hieroglyph/hgvm.c	2010-12-25 10:46:49.660579200 +0900
@@ -1412,9 +1412,9 @@ hg_vm_set_io(hg_vm_t      *vm,
 gboolean
 hg_vm_setup(hg_vm_t           *vm,
 	    hg_vm_langlevel_t  lang_level,
-	    hg_quark_t         stdin,
-	    hg_quark_t         stdout,
-	    hg_quark_t         stderr)
+	    hg_quark_t         stdin_,
+	    hg_quark_t         stdout_,
+	    hg_quark_t         stderr_)
 {
 	hg_quark_t qf;
 	hg_dict_t *dict = NULL, *dict_error;
@@ -1433,36 +1433,36 @@ hg_vm_setup(hg_vm_t           *vm,
 		vm->n_nest_scan = 0;
 
 		/* initialize I/O */
-		if (stdin == Qnil) {
+		if (stdin_ == Qnil) {
 			qf = hg_file_new(hg_vm_get_mem(vm),
 					 "%stdin",
 					 HG_FILE_IO_MODE_READ,
 					 NULL,
 					 (gpointer *)&fstdin);
 		} else {
-			qf = stdin;
+			qf = stdin_;
 		}
 		hg_vm_quark_set_attributes(vm, &qf, TRUE, FALSE, FALSE, TRUE);
 		vm->qio[HG_FILE_IO_STDIN] = qf;
-		if (stdout == Qnil) {
+		if (stdout_ == Qnil) {
 			qf  = hg_file_new(hg_vm_get_mem(vm),
 					  "%stdout",
 					  HG_FILE_IO_MODE_WRITE,
 					  NULL,
 					  (gpointer *)&fstdout);
 		} else {
-			qf = stdout;
+			qf = stdout_;
 		}
 		hg_vm_quark_set_attributes(vm, &qf, FALSE, TRUE, FALSE, TRUE);
 		vm->qio[HG_FILE_IO_STDOUT] = qf;
-		if (stderr == Qnil) {
+		if (stderr_ == Qnil) {
 			qf = hg_file_new(hg_vm_get_mem(vm),
 					 "%stderr",
 					 HG_FILE_IO_MODE_WRITE,
 					 NULL,
 					 NULL);
 		} else {
-			qf = stderr;
+			qf = stderr_;
 		}
 		hg_vm_quark_set_attributes(vm, &qf, FALSE, TRUE, FALSE, TRUE);
 		vm->qio[HG_FILE_IO_STDERR] = qf;
--- origsrc/hieroglyph/hieroglyph/hgvm.h	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/hieroglyph/hgvm.h	2010-12-25 10:41:10.322635200 +0900
@@ -155,9 +155,9 @@ void               hg_vm_set_io
                                                 hg_quark_t          file);
 gboolean           hg_vm_setup                 (hg_vm_t            *vm,
                                                 hg_vm_langlevel_t   lang_level,
-                                                hg_quark_t          stdin,
-                                                hg_quark_t          stdout,
-                                                hg_quark_t          stderr);
+                                                hg_quark_t          stdin_,
+                                                hg_quark_t          stdout_,
+                                                hg_quark_t          stderr_);
 void               hg_vm_finish                (hg_vm_t            *vm);
 hg_vm_langlevel_t  hg_vm_get_language_level    (hg_vm_t            *vm);
 gboolean           hg_vm_set_language_level    (hg_vm_t            *vm,
--- origsrc/hieroglyph/plugins/libedit/Makefile.am	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/plugins/libedit/Makefile.am	2010-12-24 21:38:03.162228600 +0900
@@ -46,6 +46,7 @@ libext_libedit_la_CFLAGS =					\
 libext_libedit_la_LDFLAGS =					\
 	-avoid-version						\
 	-module							\
+	-no-undefined						\
 	$(LDFLAGS)						\
 	$(NULL)
 libext_libedit_la_LIBADD =					\
--- origsrc/hieroglyph/plugins/unittest/Makefile.am	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/plugins/unittest/Makefile.am	2010-12-24 21:38:16.841899000 +0900
@@ -49,6 +49,7 @@ libext_unittest_la_CFLAGS =					\
 libext_unittest_la_LDFLAGS =					\
 	-avoid-version						\
 	-module							\
+	-no-undefined						\
 	$(LDFLAGS)						\
 	$(NULL)
 libext_unittest_la_LIBADD =					\
--- origsrc/hieroglyph/tests/ps/Makefile.am	2010-12-24 21:35:57.000000000 +0900
+++ src/hieroglyph/tests/ps/Makefile.am	2010-12-25 11:18:08.514130200 +0900
@@ -15,7 +15,7 @@ EXTRA_DIST =						\
 ##
 # Local Rules
 check:
-	$(srcdir)/test-ps.sh
+	$(builddir)/test-ps.sh
 
 ##
 # Target platform
