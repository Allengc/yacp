--- origsrc/armadillo-7.950.0/CMakeLists.txt	2016-06-17 01:16:30.000000000 +0900
+++ src/armadillo-7.950.0/CMakeLists.txt	2017-06-09 19:47:23.504016900 +0900
@@ -1,12 +1,12 @@
 
 # Copyright 2008-2016 Conrad Sanderson (http://conradsanderson.id.au)
 # Copyright 2008-2016 National ICT Australia (NICTA)
-# 
+#
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 # http://www.apache.org/licenses/LICENSE-2.0
-# 
+#
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -142,24 +142,24 @@ message(STATUS "DETECT_HDF5
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake_aux/Modules/")
 
 if(APPLE)
-  
+
   set(ARMA_OS macos)
-  
+
   set(ARMA_USE_LAPACK true)
   set(ARMA_USE_BLAS   true)
-  
+
   set(ARMA_LIBS ${ARMA_LIBS} "-framework Accelerate")  # or "-framework accelerate" ?
   message(STATUS "MacOS X detected. Added '-framework Accelerate' to compiler flags")
-  
+
   if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
     message(STATUS "Clang compiler on MacOS X detected. Added '-stdlib=libc++' to compiler flags")
   endif()
-  
+
 else()
-  
+
   set(ARMA_OS unix)
-  
+
   include(ARMA_FindMKL)
   include(ARMA_FindACMLMP)
   include(ARMA_FindACML)
@@ -167,7 +167,7 @@ else()
   include(ARMA_FindATLAS)
   include(ARMA_FindBLAS)
   include(ARMA_FindLAPACK)
-  
+
   message(STATUS "     MKL_FOUND = ${MKL_FOUND}"     )
   message(STATUS "  ACMLMP_FOUND = ${ACMLMP_FOUND}"  )
   message(STATUS "    ACML_FOUND = ${ACML_FOUND}"    )
@@ -175,12 +175,12 @@ else()
   message(STATUS "   ATLAS_FOUND = ${ATLAS_FOUND}"   )
   message(STATUS "    BLAS_FOUND = ${BLAS_FOUND}"    )
   message(STATUS "  LAPACK_FOUND = ${LAPACK_FOUND}"  )
-  
+
   if(MKL_FOUND OR ACMLMP_FOUND OR ACML_FOUND)
-    
+
     set(ARMA_USE_LAPACK true)
     set(ARMA_USE_BLAS   true)
-    
+
     message(STATUS "")
     message(STATUS "*** If the MKL or ACML libraries are installed in non-standard locations such as")
     message(STATUS "*** /opt/intel/mkl, /opt/intel/composerxe/, /usr/local/intel/mkl")
@@ -193,24 +193,24 @@ else()
     message(STATUS "*** to fix permission problems that may occur during run-time.")
     message(STATUS "*** See README.txt for more information")
     message(STATUS "")
-    
+
     if(MKL_FOUND)
       set(ARMA_LIBS ${ARMA_LIBS} ${MKL_LIBRARIES})
-      
+
       if(ACMLMP_FOUND OR ACML_FOUND)
         message(STATUS "*** Intel MKL as well as AMD ACML libraries were found.")
         message(STATUS "*** Using only the MKL library to avoid linking conflicts.")
         message(STATUS "*** If you wish to use ACML instead, please link manually with")
         message(STATUS "*** acml or acml_mp instead of the armadillo wrapper library.")
         message(STATUS "*** Alternatively, remove MKL from your system and rerun")
-        message(STATUS "*** Armadillo's configuration using ./configure") 
+        message(STATUS "*** Armadillo's configuration using ./configure")
       endif()
-      
+
     else()
-      
+
       if(ACMLMP_FOUND)
         set(ARMA_LIBS ${ARMA_LIBS} ${ACMLMP_LIBRARIES})
-        
+
         message(STATUS "*** Both single-core and multi-core ACML libraries were found.")
         message(STATUS "*** Using only the multi-core library to avoid linking conflicts.")
       else()
@@ -218,26 +218,26 @@ else()
           set(ARMA_LIBS ${ARMA_LIBS} ${ACML_LIBRARIES})
         endif()
       endif()
-      
+
     endif()
-    
+
   else()
-    
+
     if(OpenBLAS_FOUND AND ATLAS_FOUND)
       message(STATUS "")
       message(STATUS "*** WARNING: found both OpenBLAS and ATLAS; ATLAS will not be used")
     endif()
-    
+
     if(OpenBLAS_FOUND AND BLAS_FOUND)
       message(STATUS "")
       message(STATUS "*** WARNING: found both OpenBLAS and BLAS; BLAS will not be used")
     endif()
-    
+
     if(OpenBLAS_FOUND)
-      
+
       set(ARMA_USE_BLAS true)
       set(ARMA_LIBS ${ARMA_LIBS} ${OpenBLAS_LIBRARIES})
-      
+
       message(STATUS "")
       message(STATUS "*** If the OpenBLAS library is installed in")
       message(STATUS "*** /usr/local/lib or /usr/local/lib64")
@@ -245,31 +245,31 @@ else()
       message(STATUS "*** On Linux systems this can be done by editing /etc/ld.so.conf")
       message(STATUS "*** or modifying the LD_LIBRARY_PATH environment variable.")
       message(STATUS "")
-      
+
     else()
-      
+
       if(ATLAS_FOUND)
         set(ARMA_USE_ATLAS true)
         set(ARMA_ATLAS_INCLUDE_DIR ${ATLAS_INCLUDE_DIR})
         set(ARMA_LIBS ${ARMA_LIBS} ${ATLAS_LIBRARIES})
-        
+
         message(STATUS "ATLAS_INCLUDE_DIR = ${ATLAS_INCLUDE_DIR}")
       endif()
-      
+
       if(BLAS_FOUND)
         set(ARMA_USE_BLAS true)
         set(ARMA_LIBS ${ARMA_LIBS} ${BLAS_LIBRARIES})
       endif()
-      
+
     endif()
-    
+
     if(LAPACK_FOUND)
       set(ARMA_USE_LAPACK true)
       set(ARMA_LIBS ${ARMA_LIBS} ${LAPACK_LIBRARIES})
     endif()
-      
+
   endif()
-  
+
 endif()
 
 
@@ -302,7 +302,7 @@ if(DETECT_HDF5)
       endif()
     endif()
   endif()
- 
+
   message(STATUS "HDF5_FOUND = ${HDF5_FOUND}")
   if(HDF5_FOUND)
     set(ARMA_USE_HDF5_ALT true)
@@ -425,7 +425,7 @@ install(TARGETS armadillo EXPORT Armadil
   ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
   LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
   RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
-  
+
 # Export the package for use from the build-tree
 # (this registers the build-tree with a global CMake-registry)
 export(PACKAGE armadillo)
@@ -448,7 +448,7 @@ configure_file(${PROJECT_SOURCE_DIR}/cma
 
 # Install the export set for use with the install-tree
 install(EXPORT ArmadilloLibraryDepends DESTINATION
-  "${CMAKE_INSTALL_DATADIR}/Armadillo/CMake"
+  "${CMAKE_INSTALL_LIBDIR}/cmake/armadillo"
   COMPONENT dev)
 
 
@@ -457,7 +457,7 @@ install(EXPORT ArmadilloLibraryDepends D
 # and install it
 set(ARMADILLO_INCLUDE_DIRS "${CMAKE_INSTALL_FULL_INCLUDEDIR}")
 set(ARMADILLO_LIB_DIR      "${CMAKE_INSTALL_FULL_LIBDIR}")
-set(ARMADILLO_CMAKE_DIR    "${CMAKE_INSTALL_FULL_DATADIR}/Armadillo/CMake")
+set(ARMADILLO_CMAKE_DIR    "${CMAKE_INSTALL_FULL_LIBDIR}/cmake/armadillo")
 
 
 message(STATUS "Generating '${PROJECT_BINARY_DIR}/InstallFiles/ArmadilloConfig.cmake'")
