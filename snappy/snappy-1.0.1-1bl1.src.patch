--- origsrc/snappy-1.0.1/Makefile.am	2011-03-25 08:20:16.000000000 +0900
+++ src/snappy-1.0.1/Makefile.am	2011-03-31 09:29:20.172137900 +0900
@@ -3,7 +3,7 @@ ACLOCAL_AMFLAGS = -I m4
 # Library.
 lib_LTLIBRARIES = libsnappy.la
 libsnappy_la_SOURCES = snappy.cc snappy-sinksource.cc snappy-stubs-internal.cc
-libsnappy_la_LDFLAGS = -version-info $(SNAPPY_LTVERSION)
+libsnappy_la_LDFLAGS = -version-info $(SNAPPY_LTVERSION) -no-undefined
 
 include_HEADERS = snappy.h snappy-sinksource.h snappy-stubs-public.h
 noinst_HEADERS = snappy-internal.h snappy-stubs-internal.h snappy-test.h
--- origsrc/snappy-1.0.1/configure.ac	2011-03-25 08:20:16.000000000 +0900
+++ src/snappy-1.0.1/configure.ac	2011-03-31 09:29:34.787796800 +0900
@@ -13,7 +13,7 @@ AC_CONFIG_MACRO_DIR([m4])
 # These are flags passed to automake (though they look like gcc flags!)
 AM_INIT_AUTOMAKE([-Wall -Werror])
 
-LT_INIT
+LT_INIT(win32-dll)
 AC_SUBST([LIBTOOL_DEPS])
 AC_PROG_CXX
 AC_LANG([C++])
--- origsrc/snappy-1.0.1/snappy-test.cc	2011-03-25 08:20:16.000000000 +0900
+++ src/snappy-1.0.1/snappy-test.cc	2011-03-31 10:35:00.369775900 +0900
@@ -126,7 +126,12 @@ void Benchmark::Run() {
     // Run five times and pick the median.
     const int kNumRuns = 5;
     const int kMedianPos = kNumRuns / 2;
-    int num_iterations = 200000 * kCalibrateIterations / benchmark_real_time_us;
+    int num_iterations;
+    if (benchmark_real_time_us) {
+        num_iterations = 200000 * kCalibrateIterations / benchmark_real_time_us;
+    } else {
+        num_iterations = 1000;
+    }
     BenchmarkRun benchmark_runs[kNumRuns];
 
     for (int run = 0; run < kNumRuns; ++run) {
@@ -142,8 +147,12 @@ void Benchmark::Run() {
     sort(benchmark_runs, benchmark_runs + kNumRuns, BenchmarkCompareCPUTime());
     int64 real_time_us = benchmark_runs[kMedianPos].real_time_us;
     int64 cpu_time_us = benchmark_runs[kMedianPos].cpu_time_us;
-    int64 bytes_per_second = benchmark_bytes_processed * 1000000 / cpu_time_us;
-
+    int64 bytes_per_second;
+    if (cpu_time_us) {
+        bytes_per_second = benchmark_bytes_processed * 1000000 / cpu_time_us;
+    } else {
+        bytes_per_second = 0;
+    }
     string heading = StringPrintf("%s/%d", name_.c_str(), test_case_num);
     string human_readable_speed;
     if (bytes_per_second < 1024) {
