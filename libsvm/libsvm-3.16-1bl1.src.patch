--- origsrc/libsvm-3.16/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ src/libsvm-3.16/Makefile.am	2013-02-08 19:58:52.921166600 +0900
@@ -0,0 +1,15 @@
+AM_CFLAGS = -Wall -Wconversion -O3 -fopenmp
+
+lib_LTLIBRARIES = libsvm.la
+libsvm_la_SOURCES = svm.cpp
+libsvm_la_LDFLAGS = -no-undefined -version-info 2:0:0
+
+bin_PROGRAMS = svm-predict svm-train svm-scale
+svm_predict_SOURCES = svm-predict.c
+svm_predict_LDADD = libsvm.la
+svm_train_SOURCES = svm-train.c
+svm_train_LDADD = libsvm.la
+svm_scale_SOURCES = svm-scale.c
+svm_scale_LDADD = libsvm.la
+
+include_HEADERS = svm.h
--- origsrc/libsvm-3.16/configure.ac	1970-01-01 09:00:00.000000000 +0900
+++ src/libsvm-3.16/configure.ac	2013-02-08 20:11:14.605506400 +0900
@@ -0,0 +1,30 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([libsvm], [3.16])
+AC_CONFIG_SRCDIR([svm-predict.c])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE
+
+# Checks for programs.
+AC_PROG_CXX
+AC_PROG_CC
+AC_PROG_MAKE_SET
+LT_INIT
+
+# Checks for header files.
+AC_CHECK_HEADERS([float.h limits.h locale.h stdlib.h string.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_CHECK_HEADER_STDBOOL
+AC_C_INLINE
+
+# Checks for library functions.
+AC_FUNC_MALLOC
+AC_FUNC_REALLOC
+AC_FUNC_STRTOD
+AC_CHECK_FUNCS([memset setlocale sqrt strdup strrchr strstr strtol])
+
+AC_CONFIG_FILES([Makefile])
+AC_OUTPUT
--- origsrc/libsvm-3.16/svm.cpp	2012-11-23 10:45:57.000000000 +0900
+++ src/libsvm-3.16/svm.cpp	2013-02-08 20:09:21.330992800 +0900
@@ -1282,6 +1282,9 @@ public:
 		int start, j;
 		if((start = cache->get_data(i,&data,len)) < len)
 		{
+#ifdef OPENMP
+#pragma omp parallel for private(j)
+#endif
 			for(j=start;j<len;j++)
 				data[j] = (Qfloat)(y[i]*y[j]*(this->*kernel_function)(i,j));
 		}
@@ -2484,6 +2487,9 @@ double svm_predict_values(const svm_mode
 	{
 		double *sv_coef = model->sv_coef[0];
 		double sum = 0;
+#ifdef OPENMP
+#pragma omp parallel for private(i) reduction(+:sum)
+#endif
 		for(i=0;i<model->l;i++)
 			sum += sv_coef[i] * Kernel::k_function(x,model->SV[i],model->param);
 		sum -= model->rho[0];
@@ -2500,6 +2506,9 @@ double svm_predict_values(const svm_mode
 		int l = model->l;
 		
 		double *kvalue = Malloc(double,l);
+#ifdef OPENMP
+#pragma omp parallel for private(i)
+#endif
 		for(i=0;i<l;i++)
 			kvalue[i] = Kernel::k_function(x,model->SV[i],model->param);
 
