--- origsrc/thrift-0.9.2/compiler/cpp/thriftl.cc	2014-11-05 12:44:03.000000000 +0900
+++ src/thrift-0.9.2/compiler/cpp/thriftl.cc	2014-12-28 19:45:29.280918300 +0900
@@ -16,7 +16,7 @@
 /* First, we deal with  platform-specific or compiler-specific issues. */
 
 /* begin standard C headers. */
-#include <stdio.h>
+#include <cstdio>
 #include <string.h>
 #include <errno.h>
 #include <stdlib.h>
--- origsrc/thrift-0.9.2/configure.ac	2014-11-05 11:11:53.000000000 +0900
+++ src/thrift-0.9.2/configure.ac	2014-12-29 09:47:43.107723300 +0900
@@ -98,7 +98,7 @@ AC_PROG_AWK
 AC_PROG_RANLIB
 
 AC_LANG([C++])
-AX_CXX_COMPILE_STDCXX_11([noext])
+AX_CXX_COMPILE_STDCXX_11([ext])
 
 AC_ARG_ENABLE([libs],
   AS_HELP_STRING([--enable-libs], [build the Apache Thrift libraries [default=yes]]),
@@ -126,18 +126,19 @@ fi
 
 
 AX_THRIFT_LIB(cpp, [C++], yes)
-have_cpp=no
+have_cpp=yes
 if test "$with_cpp" = "yes";  then
-  AX_BOOST_BASE([1.54.0])
-  if test "x$succeeded" = "xyes" ; then
-    have_cpp="yes"
+  BOOST_REQUIRE([1.54.0], [have_cpp="no"])
+  if test "x$have_cpp" = "xyes"
+  then
+    BOOST_TEST
+    BOOST_PROGRAM_OPTIONS
+    BOOST_SYSTEM
+    BOOST_FILESYSTEM
   fi
 
-  AX_LIB_EVENT([1.0])
-  have_libevent=$success
-
-  AX_LIB_ZLIB([1.2.3])
-  have_zlib=$success
+  PKG_CHECK_MODULES([LIBEVENT], [libevent], [have_libevent="yes"], [have_libevent="no"])
+  PKG_CHECK_MODULES([ZLIB], [zlib], [have_zlib="yes"], [have_zlib="no"])
 
   AX_THRIFT_LIB(qt4, [Qt], yes)
   have_qt=no
@@ -219,10 +220,7 @@ AM_CONDITIONAL(HAVE_NPM, [test "x$NPM" !
 AX_THRIFT_LIB(lua, [Lua], yes)
 have_lua=no
 if test "$with_lua" = "yes"; then
-  AC_PATH_PROGS([LUA], [lua])
-  if test "x$LUA" != "x"; then
-    have_lua="yes"
-  fi
+  PKG_CHECK_MODULES([LUA], [lua], [have_lua="yes"], [have_lua="no"])
 fi
 AM_CONDITIONAL(WITH_LUA, [test "$have_lua" = "yes"])
 
--- origsrc/thrift-0.9.2/lib/c_glib/Makefile.am	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/c_glib/Makefile.am	2014-12-28 23:57:38.661312800 +0900
@@ -24,8 +24,8 @@ pkgconfigdir = $(libdir)/pkgconfig
 lib_LTLIBRARIES = libthrift_c_glib.la
 pkgconfig_DATA = thrift_c_glib.pc
 
-common_cflags = -g -Wall -W -Isrc -I src/thrift/c_glib $(GLIB_CFLAGS)
-common_ldflags = -g -Wall -W $(GLIB_LDFLAGS) @GCOV_LDFLAGS@
+common_cflags = -g -Wall -W -I$(srcdir)/src -I $(srcdir)/src/thrift/c_glib $(GLIB_CFLAGS)
+common_ldflags = -no-undefined -g -Wall -W $(GLIB_LDFLAGS) @GCOV_LDFLAGS@ $(GOBJECT_LIBS)
 
 # this removes optimizations and adds coverage flags
 CFLAGS = @GCOV_CFLAGS@
@@ -55,6 +55,7 @@ libthrift_c_glib_la_SOURCES = src/thrift
                               src/thrift/c_glib/server/thrift_simple_server.c
 
 libthrift_c_glib_la_CFLAGS = $(common_cflags)
+libthrift_c_glib_la_LDFLAGS = $(common_ldflags)
 
 include_thriftdir = $(includedir)/thrift/c_glib
 include_thrift_HEADERS = \
--- origsrc/thrift-0.9.2/lib/cpp/Makefile.am	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/Makefile.am	2014-12-28 23:34:46.632016000 +0900
@@ -32,7 +32,7 @@ pkgconfigdir = $(libdir)/pkgconfig
 
 lib_LTLIBRARIES = libthrift.la
 pkgconfig_DATA = thrift.pc
-libthrift_la_LDFLAGS = -release $(VERSION) $(BOOST_LDFLAGS)
+libthrift_la_LDFLAGS = -no-undefined -release $(VERSION) $(BOOST_LDFLAGS)
 
 ## We only build the extra libraries if we have the dependencies,
 ## but we install all of the headers unconditionally.
@@ -50,7 +50,7 @@ pkgconfig_DATA += thrift-qt.pc
 endif
 
 AM_CXXFLAGS = -Wall -Wextra -pedantic
-AM_CPPFLAGS = $(BOOST_CPPFLAGS) -I$(srcdir)/src
+AM_CPPFLAGS = $(BOOST_CPPFLAGS) -I$(builddir)/src -I$(srcdir)/src
 AM_LDFLAGS = $(BOOST_LDFLAGS)
 
 # Define the source files for the module
@@ -119,9 +119,12 @@ libthriftqt_la_CPPFLAGS = $(AM_CPPFLAGS)
 libthriftnb_la_CXXFLAGS = $(AM_CXXFLAGS)
 libthriftz_la_CXXFLAGS  = $(AM_CXXFLAGS)
 libthriftqt_la_CXXFLAGS  = $(AM_CXXFLAGS)
-libthriftnb_la_LDFLAGS  = -release $(VERSION) $(BOOST_LDFLAGS)
-libthriftz_la_LDFLAGS   = -release $(VERSION) $(BOOST_LDFLAGS)
-libthriftqt_la_LDFLAGS   = -release $(VERSION) $(BOOST_LDFLAGS) $(QT_LIBS)
+libthriftnb_la_LDFLAGS  = -no-undefined -release $(VERSION) $(BOOST_LDFLAGS)
+libthriftz_la_LDFLAGS   = -no-undefined -release $(VERSION) $(BOOST_LDFLAGS)
+libthriftqt_la_LDFLAGS   = -no-undefined -release $(VERSION) $(BOOST_LDFLAGS) $(QT_LIBS)
+libthriftnb_la_LIBADD = libthrift.la $(LIBEVENT_LIBS)
+libthriftz_la_LIBADD = libthrift.la $(ZLIB_LIBS)
+libthriftqt_la_LIBADD = libthrift.la
 
 include_thriftdir = $(includedir)/thrift
 include_thrift_HEADERS = \
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Monitor.cpp	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Monitor.cpp	2014-12-28 20:12:44.668613600 +0900
@@ -120,7 +120,7 @@ class Monitor::Impl {
                                   abstime);
   }
 
-  int waitForTime(const struct timeval* abstime) const {
+  int waitForTime(const struct ::timeval* abstime) const {
     struct THRIFT_TIMESPEC temp;
     temp.tv_sec  = abstime->tv_sec;
     temp.tv_nsec = abstime->tv_usec * 1000;
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Monitor.h	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Monitor.h	2014-12-28 20:12:53.465488600 +0900
@@ -25,6 +25,7 @@
 
 #include <boost/utility.hpp>
 
+#include <sys/time.h>
 
 namespace apache { namespace thrift { namespace concurrency {
 
@@ -84,7 +85,7 @@ class Monitor : boost::noncopyable {
    * Waits until the absolute time specified using struct timeval.
    * Returns 0 if condition occurs, THRIFT_ETIMEDOUT on timeout, or an error code.
    */
-  int waitForTime(const struct timeval* abstime) const;
+  int waitForTime(const struct ::timeval* abstime) const;
 
   /**
    * Waits forever until the condition occurs.
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Mutex.cpp	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Mutex.cpp	2014-12-28 20:16:13.277988600 +0900
@@ -211,7 +211,7 @@ void Mutex::DEFAULT_INITIALIZER(void* ar
   assert(ret == 0);
 }
 
-#if defined(PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP) || defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP)
+#if defined(PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP) || (defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP) && defined(PTHREAD_MUTEX_RECURSIVE_NP))
 static void init_with_kind(pthread_mutex_t* mutex, int kind) {
   pthread_mutexattr_t mutexattr;
   int ret = pthread_mutexattr_init(&mutexattr);
@@ -244,7 +244,7 @@ void Mutex::ADAPTIVE_INITIALIZER(void* a
 }
 #endif
 
-#ifdef PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
+#if defined(PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP) && defined(PTHREAD_MUTEX_RECURSIVE_NP)
 void Mutex::RECURSIVE_INITIALIZER(void* arg) {
   init_with_kind((pthread_mutex_t*)arg, PTHREAD_MUTEX_RECURSIVE_NP);
 }
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/concurrency/TimerManager.cpp	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/concurrency/TimerManager.cpp	2014-12-28 20:03:47.434238600 +0900
@@ -277,7 +277,7 @@ void TimerManager::add(shared_ptr<Runnab
   add(task, expiration - now);
 }
 
-void TimerManager::add(shared_ptr<Runnable> task, const struct timeval& value) {
+void TimerManager::add(shared_ptr<Runnable> task, const struct ::timeval& value) {
 
   int64_t expiration;
   Util::toMilliseconds(expiration, value);
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/concurrency/TimerManager.h	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/concurrency/TimerManager.h	2014-12-28 20:04:58.527988600 +0900
@@ -27,6 +27,7 @@
 #include <boost/shared_ptr.hpp>
 #include <map>
 #include <time.h>
+#include <sys/time.h>
 
 namespace apache { namespace thrift { namespace concurrency {
 
@@ -85,7 +86,7 @@ class TimerManager {
    * @param task The task to execute
    * @param timeout Absolute time in the future to execute task.
    */
-  virtual void add(boost::shared_ptr<Runnable> task, const struct timeval& timeout);
+  virtual void add(boost::shared_ptr<Runnable> task, const struct ::timeval& timeout);
 
   /**
    * Removes a pending task
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Util.h	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/concurrency/Util.h	2014-12-28 20:00:51.040683900 +0900
@@ -68,7 +68,7 @@ class Util {
     result.tv_nsec = (value % MS_PER_S) * NS_PER_MS; // ms to ns
   }
 
-  static void toTimeval(struct timeval& result, int64_t value) {
+  static void toTimeval(struct ::timeval& result, int64_t value) {
     result.tv_sec  = static_cast<uint32_t>(value / MS_PER_S); // ms to s
     result.tv_usec = static_cast<uint32_t>((value % MS_PER_S) * US_PER_MS); // ms to us
   }
@@ -96,7 +96,7 @@ class Util {
    * Converts struct timeval to arbitrary-sized ticks since epoch
    */
   static void toTicks(int64_t& result,
-                      const struct timeval& value,
+                      const struct ::timeval& value,
                       int64_t ticksPerSec) {
     return toTicks(result, value.tv_sec, value.tv_usec, US_PER_S, ticksPerSec);
   }
@@ -113,7 +113,7 @@ class Util {
    * Converts struct timeval to milliseconds
    */
   static void toMilliseconds(int64_t& result,
-                             const struct timeval& value) {
+                             const struct ::timeval& value) {
     return toTicks(result, value, MS_PER_S);
   }
 
@@ -127,7 +127,7 @@ class Util {
   /**
    * Converts struct timeval to microseconds
    */
-  static void toUsec(int64_t& result, const struct timeval& value) {
+  static void toUsec(int64_t& result, const struct ::timeval& value) {
     return toTicks(result, value, US_PER_S);
   }
 
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/transport/TFileTransport.cpp	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/transport/TFileTransport.cpp	2014-12-28 20:09:44.944004200 +0900
@@ -254,7 +254,7 @@ void TFileTransport::enqueueEvent(const
   // it is probably a non-factor for the time being
 }
 
-bool TFileTransport::swapEventBuffers(struct timeval* deadline) {
+bool TFileTransport::swapEventBuffers(struct ::timeval* deadline) {
   bool swap;
   Guard g(mutex_);
 
--- origsrc/thrift-0.9.2/lib/cpp/src/thrift/transport/TFileTransport.h	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/src/thrift/transport/TFileTransport.h	2014-12-28 20:10:54.725254200 +0900
@@ -35,6 +35,8 @@
 #include <thrift/concurrency/PlatformThreadFactory.h>
 #include <thrift/concurrency/Thread.h>
 
+#include <sys/time.h>
+
 namespace apache { namespace thrift { namespace transport {
 
 using apache::thrift::TProcessor;
@@ -301,7 +303,7 @@ class TFileTransport : public TFileReade
  private:
   // helper functions for writing to a file
   void enqueueEvent(const uint8_t* buf, uint32_t eventLen);
-  bool swapEventBuffers(struct timeval* deadline);
+  bool swapEventBuffers(struct ::timeval* deadline);
   bool initBufferAndWriteThread();
 
   // control for writer thread
--- origsrc/thrift-0.9.2/lib/cpp/test/Makefile.am	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/test/Makefile.am	2014-12-28 23:42:20.922055000 +0900
@@ -99,7 +99,7 @@ endif
 
 UnitTests_LDADD = \
   libtestgencpp.la \
-  -l:libboost_unit_test_framework.a
+  $(BOOST_UNIT_TEST_FRAMEWORK_LIBS)
 
 TransportTest_SOURCES = \
 	TransportTest.cpp
@@ -107,8 +107,8 @@ TransportTest_SOURCES = \
 TransportTest_LDADD = \
   libtestgencpp.la \
   $(top_builddir)/lib/cpp/libthriftz.la \
-  -l:libboost_unit_test_framework.a \
-  -lz
+  $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) \
+  $(ZLIB_LIBS)
 
 ZlibTest_SOURCES = \
 	ZlibTest.cpp
@@ -116,22 +116,22 @@ ZlibTest_SOURCES = \
 ZlibTest_LDADD = \
   libtestgencpp.la \
   $(top_builddir)/lib/cpp/libthriftz.la \
-  -l:libboost_unit_test_framework.a \
-  -lz
+  $(BOOST_UNIT_TEST_FRAMEWORK_LIBS) \
+  $(ZLIB_LIBS)
 
 EnumTest_SOURCES = \
   EnumTest.cpp
 
 EnumTest_LDADD = \
   libtestgencpp.la \
-  -l:libboost_unit_test_framework.a
+  $(BOOST_UNIT_TEST_FRAMEWORK_LIBS)
 
 TFileTransportTest_SOURCES = \
 	TFileTransportTest.cpp
 
 TFileTransportTest_LDADD = \
   libtestgencpp.la \
-  -l:libboost_unit_test_framework.a
+  $(BOOST_UNIT_TEST_FRAMEWORK_LIBS)
 
 #
 # TFDTransportTest
@@ -229,15 +229,15 @@ processor_test_LDADD = libprocessortest.
                        $(top_builddir)/lib/cpp/libthrift.la \
                        $(top_builddir)/lib/cpp/libthriftnb.la \
                        $(BOOST_LDFLAGS) \
-                       -levent \
-                       -l:libboost_unit_test_framework.a
+                       $(LIBEVENT_LIBS) \
+                       $(BOOST_UNIT_TEST_FRAMEWORK_LIBS)
 
 OpenSSLManualInitTest_SOURCES = \
 	OpenSSLManualInitTest.cpp
 
 OpenSSLManualInitTest_LDADD = \
 	$(top_builddir)/lib/cpp/libthrift.la \
-	-l:libboost_unit_test_framework.a
+	$(BOOST_UNIT_TEST_FRAMEWORK_LIBS)
 
 #
 # Common thrift code generation rules
@@ -268,7 +268,7 @@ gen-cpp/SecondService.cpp gen-cpp/Thrift
 gen-cpp/ChildService.cpp gen-cpp/ChildService.h gen-cpp/ParentService.cpp gen-cpp/ParentService.h gen-cpp/proc_types.cpp gen-cpp/proc_types.h: processor/proc.thrift
 	$(THRIFT) --gen cpp:templates,cob_style $<
 
-AM_CPPFLAGS = $(BOOST_CPPFLAGS) -I$(top_srcdir)/lib/cpp/src
+AM_CPPFLAGS = $(BOOST_CPPFLAGS) -I$(top_builddir)/lib/cpp/src -I$(top_srcdir)/lib/cpp/src
 AM_LDFLAGS = $(BOOST_LDFLAGS)
 AM_CXXFLAGS = -Wall -Wextra -pedantic
 
--- origsrc/thrift-0.9.2/lib/cpp/test/processor/ProcessorTest.cpp	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/cpp/test/processor/ProcessorTest.cpp	2014-12-28 21:46:46.856625300 +0900
@@ -23,6 +23,9 @@
  * implementations.
  */
 
+#define BOOST_TEST_DYN_LINK
+#define BOOST_TEST_MAIN
+
 #include <tr1/functional>
 #include <boost/test/unit_test.hpp>
 
--- origsrc/thrift-0.9.2/lib/lua/Makefile.am	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/lib/lua/Makefile.am	2014-12-29 00:02:29.600766000 +0900
@@ -21,6 +21,9 @@ AUTOMAKE_OPTIONS = subdir-objects
 
 SUBDIRS = .
 
+AM_CPPFLAGS = $(LUA_CFLAGS)
+AM_LDFLAGS = -no-undefined $(LUA_LIBS)
+
 lib_LTLIBRARIES = \
 			libluasocket.la \
 			libluabpack.la \
@@ -33,26 +36,26 @@ libluasocket_la_SOURCES = \
 
 nobase_include_HEADERS = src/socket.h
 
-libluasocket_la_CPPFLAGS = $(AM_CPPFLAGS) -I/usr/include/lua5.2 -DLUA_COMPAT_MODULE
-libluasocket_la_LDFLAGS = $(AM_LDFLAGS) -llua5.2 -lm
+libluasocket_la_CPPFLAGS = $(AM_CPPFLAGS) -DLUA_COMPAT_MODULE
+libluasocket_la_LDFLAGS = $(AM_LDFLAGS)
 
 libluabpack_la_SOURCES = src/luabpack.c
 
-libluabpack_la_CPPFLAGS = $(AM_CPPFLAGS) -I/usr/include/lua5.2 -DLUA_COMPAT_MODULE
-libluabpack_la_LDFLAGS = $(AM_LDFLAGS) -llua5.2 -lm
+libluabpack_la_CPPFLAGS = $(AM_CPPFLAGS) -DLUA_COMPAT_MODULE
+libluabpack_la_LDFLAGS = $(AM_LDFLAGS)
 libluabpack_la_LIBADD = liblualongnumber.la
 
 libluabitwise_la_SOURCES = src/luabitwise.c
 
-libluabitwise_la_CPPFLAGS = $(AM_CPPFLAGS) -I/usr/include/lua5.2 -DLUA_COMPAT_MODULE
-libluabitwise_la_LDFLAGS = $(AM_LDFLAGS) -llua5.2 -lm
+libluabitwise_la_CPPFLAGS = $(AM_CPPFLAGS) -DLUA_COMPAT_MODULE
+libluabitwise_la_LDFLAGS = $(AM_LDFLAGS)
 
 liblualongnumber_la_SOURCES = \
 		src/lualongnumber.c \
 		src/longnumberutils.c
 
-liblualongnumber_la_CPPFLAGS = $(AM_CPPFLAGS) -I/usr/include/lua5.2 -DLUA_COMPAT_MODULE
-liblualongnumber_la_LDFLAGS = $(AM_LDFLAGS) -llua5.2 -lm
+liblualongnumber_la_CPPFLAGS = $(AM_CPPFLAGS) -DLUA_COMPAT_MODULE
+liblualongnumber_la_LDFLAGS = $(AM_LDFLAGS)
 
 EXTRA_DIST = TBinaryProtocol.lua \
 		TBufferedTransport.lua \
--- origsrc/thrift-0.9.2/lib/php/src/ext/thrift_protocol/configure.ac	1970-01-01 09:00:00.000000000 +0900
+++ src/thrift-0.9.2/lib/php/src/ext/thrift_protocol/configure.ac	2014-12-28 19:35:27.652617800 +0900
@@ -0,0 +1 @@
+
--- origsrc/thrift-0.9.2/test/cpp/Makefile.am	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/test/cpp/Makefile.am	2014-12-29 09:44:51.849910800 +0900
@@ -60,7 +60,7 @@ TestServer_LDADD = \
 	$(top_builddir)/lib/cpp/libthrift.la \
 	$(top_builddir)/lib/cpp/libthriftz.la \
 	$(top_builddir)/lib/cpp/libthriftnb.la \
-	-levent -lboost_program_options -lboost_system -lboost_filesystem
+	$(LIBEVENT_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS)
 
 TestClient_SOURCES = \
 	src/TestClient.cpp
@@ -70,7 +70,7 @@ TestClient_LDADD = \
 	$(top_builddir)/lib/cpp/libthrift.la \
 	$(top_builddir)/lib/cpp/libthriftz.la \
 	$(top_builddir)/lib/cpp/libthriftnb.la \
-	-levent -lboost_program_options -lboost_system -lboost_filesystem
+	$(LIBEVENT_LIBS) $(BOOST_PROGRAM_OPTIONS_LIBS) $(BOOST_SYSTEM_LIBS) $(BOOST_FILESYSTEM_LIBS)
 
 StressTest_SOURCES = \
 	src/StressTest.cpp
@@ -85,7 +85,7 @@ StressTestNonBlocking_SOURCES = \
 StressTestNonBlocking_LDADD = \
 	libstresstestgencpp.la \
 	$(top_builddir)/lib/cpp/libthriftnb.la \
-	-levent
+	$(LIBEVENT_LIBS) 
 #
 # Common thrift code generation rules
 #
@@ -97,7 +97,7 @@ gen-cpp/ThriftTest.cpp gen-cpp/ThriftTes
 gen-cpp/StressTest_types.cpp gen-cpp/StressTest_constants.cpp gen-cpp/Service.cpp: $(top_srcdir)/test/StressTest.thrift
 	$(THRIFT) --gen cpp $<
 
-AM_CPPFLAGS = $(BOOST_CPPFLAGS) $(LIBEVENT_CPPFLAGS) -I$(top_srcdir)/lib/cpp/src -Igen-cpp
+AM_CPPFLAGS = $(BOOST_CPPFLAGS) $(LIBEVENT_CPPFLAGS) -I$(top_builddir)/lib/cpp/src -I$(top_srcdir)/lib/cpp/src -Igen-cpp
 AM_CXXFLAGS = -Wall -Wextra -pedantic
 AM_LDFLAGS = $(BOOST_LDFLAGS) $(LIBEVENT_LDFLAGS)
 
--- origsrc/thrift-0.9.2/tutorial/cpp/Makefile.am	2014-11-05 10:50:31.000000000 +0900
+++ src/thrift-0.9.2/tutorial/cpp/Makefile.am	2014-12-29 10:07:30.976033400 +0900
@@ -63,7 +63,7 @@ THRIFT = $(top_builddir)/compiler/cpp/th
 gen-cpp/Calculator.cpp gen-cpp/SharedService.cpp gen-cpp/shared_constants.cpp gen-cpp/shared_types.cpp gen-cpp/tutorial_constants.cpp gen-cpp/tutorial_types.cpp: $(top_srcdir)/tutorial/tutorial.thrift
 	$(THRIFT) --gen cpp -r $<
 
-AM_CPPFLAGS = $(BOOST_CPPFLAGS) $(LIBEVENT_CPPFLAGS) -I$(top_srcdir)/lib/cpp/src -Igen-cpp
+AM_CPPFLAGS = $(BOOST_CPPFLAGS) $(LIBEVENT_CPPFLAGS) -I$(top_builddir)/lib/cpp/src -I$(top_srcdir)/lib/cpp/src -Igen-cpp
 AM_CXXFLAGS = -Wall -Wextra -pedantic
 AM_LDFLAGS = $(BOOST_LDFLAGS) $(LIBEVENT_LDFLAGS)
 
