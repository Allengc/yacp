--- origsrc/oiio-Release-1.6.3dev/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/CMakeLists.txt	2015-05-21 20:26:43.537013300 +0900
@@ -559,3 +559,10 @@ include (CPack)
 #  * BOOST_DYNAMIC
 
 # Do TIFF, JPEG, PNG actually look in external?
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/openimageio.pc.in ${CMAKE_BINARY_DIR}/openimageio.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/openimageio.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/oiio-Release-1.6.3dev/openimageio.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/oiio-Release-1.6.3dev/openimageio.pc.in	2015-05-21 20:26:43.537013300 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: OpenImageIO
+Description: Library for reading and writing images
+Version: 1.6.1
+Libs: -L${libdir} -lOpenImageIO -lOpenImageIO_Util
+Cflags: -I${includedir}
--- origsrc/oiio-Release-1.6.3dev/src/cineon.imageio/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/cineon.imageio/CMakeLists.txt	2015-05-21 20:26:43.537013300 +0900
@@ -1,4 +1 @@
-add_oiio_plugin (cineoninput.cpp cineonoutput.cpp
-  libcineon/Cineon.cpp libcineon/OutStream.cpp libcineon/Codec.cpp libcineon/Reader.cpp
-  libcineon/Writer.cpp libcineon/CineonHeader.cpp libcineon/ElementReadStream.cpp
-  libcineon/InStream.cpp)
+add_oiio_plugin (cineoninput.cpp cineonoutput.cpp)
--- origsrc/oiio-Release-1.6.3dev/src/cineon.imageio/cineoninput.cpp	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/cineon.imageio/cineoninput.cpp	2015-05-21 20:26:43.552638300 +0900
@@ -28,7 +28,7 @@
   (This is the Modified BSD License)
 */
 
-#include "libcineon/Cineon.h"
+#include <Cineon.h>
 
 #include "OpenImageIO/dassert.h"
 #include "OpenImageIO/typedesc.h"
@@ -36,8 +36,6 @@
 #include "OpenImageIO/fmath.h"
 #include "OpenImageIO/strutil.h"
 
-using namespace cineon;
-
 OIIO_PLUGIN_NAMESPACE_BEGIN
 
 
--- origsrc/oiio-Release-1.6.3dev/src/cineon.imageio/cineonoutput.cpp	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/cineon.imageio/cineonoutput.cpp	2015-05-21 20:26:43.568263300 +0900
@@ -28,14 +28,12 @@
   (This is the Modified BSD License)
 */
 
-#include "libcineon/Cineon.h"
+#include <Cineon.h>
 
 #include "OpenImageIO/typedesc.h"
 #include "OpenImageIO/imageio.h"
 #include "OpenImageIO/fmath.h"
 
-using namespace cineon;
-
 OIIO_PLUGIN_NAMESPACE_BEGIN
 
 
--- origsrc/oiio-Release-1.6.3dev/src/dds.imageio/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/dds.imageio/CMakeLists.txt	2015-05-21 20:26:43.583888300 +0900
@@ -1,4 +1 @@
-add_oiio_plugin (ddsinput.cpp ddsoutput.cpp squish/alpha.cpp squish/clusterfit.cpp
-                 squish/colourblock.cpp squish/colourfit.cpp squish/colourset.cpp
-                 squish/maths.cpp squish/rangefit.cpp squish/singlecolourfit.cpp
-                 squish/squish.cpp)
+add_oiio_plugin (ddsinput.cpp ddsoutput.cpp)
--- origsrc/oiio-Release-1.6.3dev/src/dpx.imageio/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/dpx.imageio/CMakeLists.txt	2015-05-21 20:26:43.583888300 +0900
@@ -1,6 +1,3 @@
-add_oiio_plugin (dpxinput.cpp dpxoutput.cpp
-  libdpx/DPX.cpp libdpx/OutStream.cpp libdpx/RunLengthEncoding.cpp
-  libdpx/Codec.cpp libdpx/Reader.cpp libdpx/Writer.cpp libdpx/DPXHeader.cpp
-  libdpx/ElementReadStream.cpp libdpx/InStream.cpp libdpx/DPXColorConverter.cpp)
+add_oiio_plugin (dpxinput.cpp dpxoutput.cpp)
 link_openexr (dpx.imageio)
 link_ilmbase (dpx.imageio)
--- origsrc/oiio-Release-1.6.3dev/src/dpx.imageio/dpxinput.cpp	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/dpx.imageio/dpxinput.cpp	2015-05-21 20:26:43.615138300 +0900
@@ -28,8 +28,8 @@
   (This is the Modified BSD License)
 */
 
-#include "libdpx/DPX.h"
-#include "libdpx/DPXColorConverter.h"
+#include <DPX.h>
+#include "DPXColorConverter.h"
 #include <OpenEXR/ImfTimeCode.h> //For TimeCode support
 
 #include "OpenImageIO/typedesc.h"
--- origsrc/oiio-Release-1.6.3dev/src/dpx.imageio/dpxoutput.cpp	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/dpx.imageio/dpxoutput.cpp	2015-05-21 20:26:43.677638300 +0900
@@ -33,8 +33,8 @@
 #include <cmath>
 #include <iomanip>
 
-#include "libdpx/DPX.h"
-#include "libdpx/DPXColorConverter.h"
+#include <DPX.h>
+#include "DPXColorConverter.h"
 
 #include "OpenImageIO/typedesc.h"
 #include "OpenImageIO/imageio.h"
--- origsrc/oiio-Release-1.6.3dev/src/ffmpeg.imageio/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/ffmpeg.imageio/CMakeLists.txt	2015-05-21 20:26:43.693263300 +0900
@@ -1,5 +1,6 @@
 if (USE_FFMPEG)
     if (FFMPEG_FOUND)
+    	add_definitions("-D__STDC_CONSTANT_MACROS")
         include_directories (${FFMPEG_INCLUDE_DIR})
         add_oiio_plugin (ffmpeginput.cpp ffmpegoutput.cpp
                          LINK_LIBRARIES ${FFMPEG_LIBRARY}
--- origsrc/oiio-Release-1.6.3dev/src/ffmpeg.imageio/ffmpeginput.cpp	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/ffmpeg.imageio/ffmpeginput.cpp	2015-05-21 20:26:43.708888300 +0900
@@ -28,6 +28,11 @@
   (This is the Modified BSD License)
 */
 
+#ifdef __cplusplus
+ #define __STDC_CONSTANT_MACROS
+ #include <stdint.h>
+#endif
+
 extern "C" { // ffmpeg is a C api
 #include <errno.h>
 #include <libavformat/avformat.h>
@@ -35,6 +40,11 @@ extern "C" { // ffmpeg is a C api
 #include <libswscale/swscale.h>
 }
 
+#if LIBAVCODEC_VERSION_INT < AV_VERSION_INT(55,28,1)
+#define av_frame_alloc avcodec_alloc_frame
+#define av_frame_free avcodec_free_frame
+#endif
+
 #include <boost/shared_ptr.hpp>
 #include <boost/thread/once.hpp>
 
--- origsrc/oiio-Release-1.6.3dev/src/libOpenImageIO/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/libOpenImageIO/CMakeLists.txt	2015-05-21 20:26:43.724513300 +0900
@@ -57,22 +57,9 @@ if (EMBEDPLUGINS)
         ../bmp.imageio/bmpinput.cpp ../bmp.imageio/bmpoutput.cpp
         ../bmp.imageio/bmp_pvt.cpp
         ../cineon.imageio/cineoninput.cpp ../cineon.imageio/cineonoutput.cpp
-          ../cineon.imageio/libcineon/Cineon.cpp 
-          ../cineon.imageio/libcineon/Codec.cpp ../cineon.imageio/libcineon/Reader.cpp
-          ../cineon.imageio/libcineon/Writer.cpp ../cineon.imageio/libcineon/CineonHeader.cpp
-          ../cineon.imageio/libcineon/ElementReadStream.cpp ../cineon.imageio/libcineon/InStream.cpp
         ../dds.imageio/ddsinput.cpp ../dds.imageio/ddsoutput.cpp
-          ../dds.imageio/squish/alpha.cpp ../dds.imageio/squish/clusterfit.cpp
-          ../dds.imageio/squish/colourblock.cpp ../dds.imageio/squish/colourfit.cpp
-          ../dds.imageio/squish/colourset.cpp ../dds.imageio/squish/maths.cpp
-          ../dds.imageio/squish/rangefit.cpp ../dds.imageio/squish/singlecolourfit.cpp
-          ../dds.imageio/squish/squish.cpp
         ../dpx.imageio/dpxinput.cpp ../dpx.imageio/dpxoutput.cpp
-          ../dpx.imageio/libdpx/DPX.cpp ../dpx.imageio/libdpx/OutStream.cpp
-          ../dpx.imageio/libdpx/RunLengthEncoding.cpp ../dpx.imageio/libdpx/Codec.cpp
-          ../dpx.imageio/libdpx/Reader.cpp ../dpx.imageio/libdpx/Writer.cpp
-          ../dpx.imageio/libdpx/DPXHeader.cpp ../dpx.imageio/libdpx/ElementReadStream.cpp
-          ../dpx.imageio/libdpx/InStream.cpp ../dpx.imageio/libdpx/DPXColorConverter.cpp
+        ../dpx.imageio/libdpx/DPXColorConverter.cpp
         ../fits.imageio/fitsinput.cpp ../fits.imageio/fitsoutput.cpp
           ../fits.imageio/fits_pvt.cpp
         ../hdr.imageio/hdrinput.cpp ../hdr.imageio/hdroutput.cpp
@@ -87,13 +74,6 @@ if (EMBEDPLUGINS)
         ../psd.imageio/psdinput.cpp ../psd.imageio/psdoutput.cpp
         ../psd.imageio/jpeg_memory_src.cpp
         ../ptex.imageio/ptexinput.cpp ../ptex.imageio/ptexoutput.cpp
-        ../ptex.imageio/ptex/PtexCache.cpp ../ptex.imageio/ptex/PtexFilters.cpp
-        ../ptex.imageio/ptex/PtexHalf.cpp ../ptex.imageio/ptex/PtexReader.cpp
-        ../ptex.imageio/ptex/PtexSeparableFilter.cpp
-        ../ptex.imageio/ptex/PtexSeparableKernel.cpp
-        ../ptex.imageio/ptex/PtexTriangleFilter.cpp
-        ../ptex.imageio/ptex/PtexTriangleKernel.cpp
-        ../ptex.imageio/ptex/PtexUtils.cpp ../ptex.imageio/ptex/PtexWriter.cpp
         ../openexr.imageio/exrinput.cpp ../openexr.imageio/exroutput.cpp
         ../rla.imageio/rlainput.cpp ../rla.imageio/rlaoutput.cpp
         ../sgi.imageio/sgiinput.cpp ../sgi.imageio/sgioutput.cpp
@@ -104,6 +84,7 @@ if (EMBEDPLUGINS)
         ../tiff.imageio/tiffinput.cpp ../tiff.imageio/tiffoutput.cpp
         ../zfile.imageio/zfile.cpp
         )
+    include_directories (../dpx.imageio/libdpx/)
     if (NOT Boost_VERSION LESS "103500")
         # Boost < 1.35 is too old to support asio that socket needs
         set (libOpenImageIO_srcs ${libOpenImageIO_srcs}
@@ -263,6 +244,8 @@ if (EMBEDPLUGINS)
                                ${HDF5_LIBRARY}
                                ${OPENJPEG_LIBRARIES}
                                ${WEBP_LIBRARY}
+                               ${CINEON_LIBRARY} ${SQUISH_LIBRARY}
+                               ${DPX_LIBRARY} ${PTEX_LIBRARY}
                           )
     link_openexr (OpenImageIO)
     if (USE_GIF AND GIF_FOUND)
--- origsrc/oiio-Release-1.6.3dev/src/libutil/sysutil.cpp	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/libutil/sysutil.cpp	2015-05-21 20:26:43.724513300 +0900
@@ -34,7 +34,7 @@
 #include <iostream>
 #include <ctime>
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
 # include <sys/sysinfo.h>
 # include <unistd.h>
 # include <sys/ioctl.h>
@@ -83,7 +83,7 @@ using namespace Sysutil;
 size_t
 Sysutil::memory_used (bool resident)
 {
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
 #if 0
     // doesn't seem to work?
     struct rusage ru;
@@ -141,7 +141,7 @@ Sysutil::memory_used (bool resident)
 size_t
 Sysutil::physical_memory ()
 {
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
     size_t size = 0;
     FILE *file = fopen ("/proc/meminfo", "r");
     if (file) {
@@ -221,7 +221,7 @@ Sysutil::this_program_path ()
     char filename[10240];
     filename[0] = 0;
 
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
     unsigned int size = sizeof(filename);
     int r = readlink ("/proc/self/exe", filename, size);
     ASSERT(r < int(size)); // user won't get the right answer if the filename is too long to store
@@ -276,7 +276,7 @@ Sysutil::terminal_columns ()
 {
     int columns = 80;   // a decent guess, if we have nothing more to go on
 
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__GNU__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__GNU__) || defined(__CYGWIN__)
     struct winsize w;
     ioctl (0, TIOCGWINSZ, &w);
     columns = w.ws_col;
@@ -312,7 +312,7 @@ Sysutil::put_in_background (int, char* [
     // But it suffers from the same problem on OS X, and seems to just be
     // a wrapper for fork.
 
-#if defined(__linux__) || defined(__GLIBC__)
+#if defined(__linux__) || defined(__GLIBC__) || defined(__CYGWIN__)
     // Simplest case:
     // daemon returns 0 if successful, thus return true if successful
     return daemon (1, 1) == 0;
--- origsrc/oiio-Release-1.6.3dev/src/ptex.imageio/CMakeLists.txt	2015-05-21 06:04:25.000000000 +0900
+++ src/oiio-Release-1.6.3dev/src/ptex.imageio/CMakeLists.txt	2015-05-21 20:26:43.724513300 +0900
@@ -6,16 +6,6 @@ if (ZLIB_FOUND)
     endif()
     include_directories (${ZLIB_INCLUDE_DIR})
     add_oiio_plugin (ptexinput.cpp ptexoutput.cpp
-                 ptex/PtexCache.cpp
-                 ptex/PtexFilters.cpp
-                 ptex/PtexHalf.cpp
-                 ptex/PtexReader.cpp
-                 ptex/PtexSeparableFilter.cpp
-                 ptex/PtexSeparableKernel.cpp
-                 ptex/PtexTriangleFilter.cpp
-                 ptex/PtexTriangleKernel.cpp
-                 ptex/PtexUtils.cpp
-                 ptex/PtexWriter.cpp
-                 LINK_LIBRARIES ${ZLIB_LIBRARIES} )
+                 LINK_LIBRARIES ${ZLIB_LIBRARIES} ${PTEX_LIBRARIES})
 endif ()
 
