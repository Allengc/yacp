--- origsrc/oiio-Release-1.8.10/CMakeLists.txt	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/CMakeLists.txt	2018-04-09 20:31:07.935000000 +0900
@@ -401,3 +401,10 @@ set (CPACK_COMPONENT_DEVELOPER_DESCRIPTI
 set (CPACK_COMPONENT_DOCUMENTATION_DESCRIPTION "OpenImageIO documentation")
 set (CPACK_COMPONENT_DEVELOPER_DEPENDS user)
 include (CPack)
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/OpenImageIO.pc.in ${CMAKE_BINARY_DIR}/OpenImageIO.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/OpenImageIO.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/oiio-Release-1.8.10/OpenImageIO.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/oiio-Release-1.8.10/OpenImageIO.pc.in	2018-04-09 20:31:02.357000200 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: OpenImageIO
+Description: Library for reading and writing images
+Version: @PROJECT_VERSION@
+Libs: -L${libdir} -lOpenImageIO -lOpenImageIO_Util
+Cflags: -I${includedir}
--- origsrc/oiio-Release-1.8.10/src/cineon.imageio/CMakeLists.txt	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/cineon.imageio/CMakeLists.txt	2018-04-09 18:24:05.740000000 +0900
@@ -1,4 +1 @@
-add_oiio_plugin (cineoninput.cpp
-  libcineon/Cineon.cpp libcineon/OutStream.cpp libcineon/Codec.cpp libcineon/Reader.cpp
-  libcineon/Writer.cpp libcineon/CineonHeader.cpp libcineon/ElementReadStream.cpp
-  libcineon/InStream.cpp)
+add_oiio_plugin (cineoninput.cpp)
--- origsrc/oiio-Release-1.8.10/src/cineon.imageio/cineoninput.cpp	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/cineon.imageio/cineoninput.cpp	2018-04-09 18:24:38.622000000 +0900
@@ -28,7 +28,7 @@
   (This is the Modified BSD License)
 */
 
-#include "libcineon/Cineon.h"
+#include <Cineon.h>
 
 #include <OpenImageIO/dassert.h>
 #include <OpenImageIO/typedesc.h>
@@ -36,8 +36,6 @@
 #include <OpenImageIO/fmath.h>
 #include <OpenImageIO/strutil.h>
 
-using namespace cineon;
-
 OIIO_PLUGIN_NAMESPACE_BEGIN
 
 
--- origsrc/oiio-Release-1.8.10/src/cmake/compiler.cmake	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/cmake/compiler.cmake	2018-04-09 19:25:58.766000000 +0900
@@ -177,7 +177,9 @@ if (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COM
         message (STATUS "Building for C++11")
         set (CSTD_FLAGS "-std=c++11")
     endif ()
-    add_definitions (${CSTD_FLAGS})
+    if (NOT CYGWIN)
+        add_definitions (${CSTD_FLAGS})
+    endif()
     if (CMAKE_COMPILER_IS_CLANG)
         # C++ >= 11 doesn't like 'register' keyword, which is in Qt headers
         add_definitions ("-Wno-deprecated-register")
--- origsrc/oiio-Release-1.8.10/src/cmake/externalpackages.cmake	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/cmake/externalpackages.cmake	2018-04-09 18:39:18.550602300 +0900
@@ -495,3 +495,7 @@ endif()
 # end DCMTK setup
 ###########################################################################
 
+include(FindPkgConfig)
+pkg_check_modules(DPX REQUIRED dpx)
+pkg_check_modules(LIBCINEON REQUIRED libcineon)
+pkg_check_modules(LIBSQUISH REQUIRED libsquish)
--- origsrc/oiio-Release-1.8.10/src/dds.imageio/CMakeLists.txt	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/dds.imageio/CMakeLists.txt	2018-04-09 18:26:45.926000200 +0900
@@ -1,4 +1 @@
-add_oiio_plugin (ddsinput.cpp squish/alpha.cpp squish/clusterfit.cpp
-                 squish/colourblock.cpp squish/colourfit.cpp squish/colourset.cpp
-                 squish/maths.cpp squish/rangefit.cpp squish/singlecolourfit.cpp
-                 squish/squish.cpp)
+add_oiio_plugin (ddsinput.cpp)
--- origsrc/oiio-Release-1.8.10/src/dpx.imageio/CMakeLists.txt	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/dpx.imageio/CMakeLists.txt	2018-04-09 18:32:08.739000000 +0900
@@ -1,5 +1,3 @@
 add_oiio_plugin (dpxinput.cpp dpxoutput.cpp
-  libdpx/DPX.cpp libdpx/OutStream.cpp libdpx/RunLengthEncoding.cpp
-  libdpx/Codec.cpp libdpx/Reader.cpp libdpx/Writer.cpp libdpx/DPXHeader.cpp
-  libdpx/ElementReadStream.cpp libdpx/InStream.cpp libdpx/DPXColorConverter.cpp
-  LINK_LIBRARIES ${OPENEXR_LIBRARIES})
+    libdpx/DPXColorConverter.cpp
+    LINK_LIBRARIES ${OPENEXR_LIBRARIES})
--- origsrc/oiio-Release-1.8.10/src/dpx.imageio/dpxinput.cpp	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/dpx.imageio/dpxinput.cpp	2018-04-09 18:27:47.254000000 +0900
@@ -28,8 +28,8 @@
   (This is the Modified BSD License)
 */
 
-#include "libdpx/DPX.h"
-#include "libdpx/DPXColorConverter.h"
+#include <DPX.h>
+#include "DPXColorConverter.h"
 #include <OpenEXR/ImfTimeCode.h> //For TimeCode support
 
 #include <OpenImageIO/typedesc.h>
--- origsrc/oiio-Release-1.8.10/src/dpx.imageio/dpxoutput.cpp	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/dpx.imageio/dpxoutput.cpp	2018-04-09 18:28:05.126000000 +0900
@@ -33,8 +33,8 @@
 #include <cmath>
 #include <iomanip>
 
-#include "libdpx/DPX.h"
-#include "libdpx/DPXColorConverter.h"
+#include <DPX.h>
+#include "DPXColorConverter.h"
 
 #include <OpenImageIO/typedesc.h>
 #include <OpenImageIO/imageio.h>
--- origsrc/oiio-Release-1.8.10/src/include/OpenImageIO/strutil.h	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/include/OpenImageIO/strutil.h	2018-04-09 19:03:42.280000000 +0900
@@ -45,6 +45,7 @@
 #include <cstdio>
 #include <vector>
 #include <map>
+#include <cstdarg>
 
 #include <OpenImageIO/export.h>
 #include <OpenImageIO/oiioversion.h>
--- origsrc/oiio-Release-1.8.10/src/libOpenImageIO/CMakeLists.txt	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/libOpenImageIO/CMakeLists.txt	2018-04-09 19:46:24.320000000 +0900
@@ -175,6 +175,12 @@ target_link_libraries (OpenImageIO ${ILM
 target_link_libraries (OpenImageIO ${OPENEXR_LIBRARIES})
 target_link_libraries (OpenImageIO ${ZLIB_LIBRARIES})
 
+include_directories (../dpx.imageio/libdpx/)
+
+target_link_libraries (OpenImageIO ${DPX_LIBRARIES})
+target_link_libraries (OpenImageIO ${LIBCINEON_LIBRARIES})
+target_link_libraries (OpenImageIO ${LIBSQUISH_LIBRARIES})
+
 if (VERBOSE)
     message(STATUS "Setting SOVERSION to: ${SOVERSION}")
 endif ()
--- origsrc/oiio-Release-1.8.10/src/libutil/argparse.cpp	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/libutil/argparse.cpp	2018-04-09 19:05:10.757999800 +0900
@@ -39,6 +39,7 @@
 #include <iterator>
 #include <string>
 #include <sstream>
+#include <alloca.h>
 
 #include <OpenImageIO/strutil.h>
 #include <OpenImageIO/sysutil.h>
--- origsrc/oiio-Release-1.8.10/src/libutil/sysutil.cpp	2018-04-01 06:56:14.000000000 +0900
+++ src/oiio-Release-1.8.10/src/libutil/sysutil.cpp	2018-04-09 19:42:48.970000000 +0900
@@ -35,7 +35,7 @@
 #include <iostream>
 #include <ctime>
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
 # include <sys/sysinfo.h>
 # include <unistd.h>
 # include <sys/ioctl.h>
@@ -93,7 +93,7 @@ using namespace Sysutil;
 size_t
 Sysutil::memory_used (bool resident)
 {
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
 #if 0
     // doesn't seem to work?
     struct rusage ru;
@@ -151,7 +151,7 @@ Sysutil::memory_used (bool resident)
 size_t
 Sysutil::physical_memory ()
 {
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
     size_t size = 0;
     FILE *file = fopen ("/proc/meminfo", "r");
     if (file) {
@@ -231,7 +231,7 @@ Sysutil::this_program_path ()
     char filename[10240];
     filename[0] = 0;
 
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
     unsigned int size = sizeof(filename);
     int r = readlink ("/proc/self/exe", filename, size);
     ASSERT(r < int(size)); // user won't get the right answer if the filename is too long to store
@@ -294,7 +294,7 @@ Sysutil::terminal_columns ()
 {
     int columns = 80;   // a decent guess, if we have nothing more to go on
 
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__GNU__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__GNU__) || defined(__CYGWIN__)
     struct winsize w;
     ioctl (0, TIOCGWINSZ, &w);
     columns = w.ws_col;
@@ -317,7 +317,7 @@ Sysutil::terminal_rows ()
 {
     int rows = 24;   // a decent guess, if we have nothing more to go on
 
-#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__GNU__)
+#if defined(__linux__) || defined(__APPLE__) || defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__GNU__) || defined(__CYGWIN__)
     struct winsize w;
     ioctl (0, TIOCGWINSZ, &w);
     rows = w.ws_row;
