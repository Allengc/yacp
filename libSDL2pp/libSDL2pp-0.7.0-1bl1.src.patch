--- origsrc/libSDL2pp-0.7.0/CMakeLists.txt	2015-01-22 20:59:30.000000000 +0900
+++ src/libSDL2pp-0.7.0/CMakeLists.txt	2015-03-20 08:35:27.186546900 +0900
@@ -16,7 +16,7 @@ SET(SDL2PP_VERSION "${SDL2PP_MAJOR_VERSI
 OPTION(SDL2PP_WITH_2_0_4 "Enable new functions available only in SDL2 2.0.4+" OFF)
 OPTION(SDL2PP_WITH_WERROR "Make warnings fatal" OFF)
 
-SET(SDL2PP_CXXSTD "c++11" CACHE STRING "Used c++ standard")
+SET(SDL2PP_CXXSTD "gnu++11" CACHE STRING "Used c++ standard")
 
 IF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
 	OPTION(SDL2PP_WITH_IMAGE "Enable SDL2_image support" ON)
@@ -209,7 +209,7 @@ IF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOU
 	# install
 	INSTALL(FILES ${LIBRARY_HEADERS} ${PROJECT_BINARY_DIR}/SDL2pp/Config.hh DESTINATION include/SDL2pp)
 	INSTALL(FILES ${LIBRARY_EXTERNAL_HEADERS} DESTINATION include/SDL2pp/external)
-	INSTALL(TARGETS SDL2pp LIBRARY DESTINATION lib)
+	INSTALL(TARGETS SDL2pp RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
 	INSTALL(FILES ${PROJECT_BINARY_DIR}/sdl2pp.pc DESTINATION ${PKGCONFIGDIR})
 ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
 	MESSAGE(STATUS "libSDL2pp ${SDL2PP_VERSION} bundled build")
--- origsrc/libSDL2pp-0.7.0/examples/image.cc	2015-01-22 20:59:30.000000000 +0900
+++ src/libSDL2pp-0.7.0/examples/image.cc	2015-03-20 01:04:16.460227400 +0900
@@ -19,6 +19,7 @@
   3. This notice may not be removed or altered from any source distribution.
 */
 
+#include <cmath>
 #include <iostream>
 
 #include <SDL2/SDL.h>
--- origsrc/libSDL2pp-0.7.0/tests/testing.h	2015-01-22 20:59:30.000000000 +0900
+++ src/libSDL2pp-0.7.0/tests/testing.h	2015-03-20 01:08:30.005149300 +0900
@@ -36,6 +36,8 @@
 #include <sstream>
 #include <functional>
 
+#include <boost/lexical_cast.hpp>
+
 //
 // Helper class for literal quoting / extra processing
 //
@@ -120,7 +122,7 @@ private:
 		default:
 			return str;
 		}
-		return std::string("\033[") + (bright ? "1" : "0") + ";" + std::to_string(30 + color) + "m" + str + "\033[0m";
+		return std::string("\033[") + (bright ? "1" : "0") + ";" + boost::lexical_cast<std::string>(30 + color) + "m" + str + "\033[0m";
 	}
 
 	//
