--- origsrc/vmime/CMakeLists.txt	2013-01-16 14:24:45.000000000 +0900
+++ src/vmime/CMakeLists.txt	2013-01-16 15:14:57.294450900 +0900
@@ -96,6 +96,7 @@ SET_TARGET_PROPERTIES(
 	SOVERSION  "${VMIME_API_VERSION}"
 )
 
+IF(NOT CYGWIN)
 # Static library
 #
 # Note: cannot have two targets with the same name so the static version has
@@ -112,26 +113,32 @@ SET_TARGET_PROPERTIES(
 	PROPERTIES
 	OUTPUT_NAME  ${VMIME_LIBRARY_NAME}
 )
+ENDIF()
 
 # These next two lines are required but it is unclear exactly what they do.
 # The CMake FAQ mentions they are necessary and it does not work otherwise.
 SET_TARGET_PROPERTIES(${VMIME_LIBRARY_NAME} PROPERTIES CLEAN_DIRECT_OUTPUT 1)
+IF(NOT CYGWIN)
 SET_TARGET_PROPERTIES(${VMIME_LIBRARY_NAME}-static PROPERTIES CLEAN_DIRECT_OUTPUT 1)
+ENDIF()
 
 SET(CMAKE_INSTALL_LIBDIR lib CACHE PATH "Output directory for libraries")
 
 # Installation of libraries
 INSTALL(
 	TARGETS ${VMIME_LIBRARY_NAME}
+	RUNTIME DESTINATION bin COMPONENT sharedlibs
 	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT sharedlibs
 	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT sharedlibs
 )
 
+IF(NOT CYGWIN)
 INSTALL(
 	TARGETS ${VMIME_LIBRARY_NAME}-static
 	LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT staticlibs
 	ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT staticlibs
 )
+ENDIF()
 
 # Installation of header files
 INSTALL_HEADERS_WITH_DIRECTORY(VMIME_LIBRARY_INCLUDE_FILES headers)
@@ -168,6 +175,7 @@ IF(VMIME_BUILD_TESTS)
 	INCLUDE(cmake/FindCppUnit.cmake)
 
 	INCLUDE_DIRECTORIES(${CPPUNIT_INCLUDE_DIR})
+	INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR})
 
 	TARGET_LINK_LIBRARIES(
 		"run-tests"
--- origsrc/vmime/src/charsetConverter.cpp	2013-01-16 14:24:45.000000000 +0900
+++ src/vmime/src/charsetConverter.cpp	2013-01-16 14:38:17.792698600 +0900
@@ -126,11 +126,11 @@ void charsetConverter::convert(utility::
 	while (true)
 	{
 		// Fullfill the buffer
-		size_t inLength = static_cast <size_t>(in.read(inBuffer + inPos, sizeof(inBuffer) - inPos) + inPos);
-		size_t outLength = sizeof(outBuffer);
+		::size_t inLength = static_cast <size_t>(in.read(inBuffer + inPos, sizeof(inBuffer) - inPos) + inPos);
+		::size_t outLength = sizeof(outBuffer);
 
 		const char* inPtr = breakAfterNext ? NULL : inBuffer;
-		size_t *ptrLength = breakAfterNext ? NULL : &inLength;
+		::size_t *ptrLength = breakAfterNext ? NULL : &inLength;
 		char* outPtr = outBuffer;
 
 		// Convert input bytes
@@ -286,9 +286,9 @@ void charsetFilteredOutputStream::write
 
 			// Try a conversion
 			const char* inPtr = m_unconvBuffer;
-			size_t inLength = m_unconvCount;
+			::size_t inLength = m_unconvCount;
 			char* outPtr = m_outputBuffer;
-			size_t outLength = sizeof(m_outputBuffer);
+			::size_t outLength = sizeof(m_outputBuffer);
 
 			const size_t inLength0 = inLength;
 
@@ -320,9 +320,9 @@ void charsetFilteredOutputStream::write
 
 		// Now, convert the current data buffer
 		const char* inPtr = curData;
-		size_t inLength = std::min(curDataLen, sizeof(m_outputBuffer) / MAX_CHARACTER_WIDTH);
+		::size_t inLength = std::min(curDataLen, sizeof(m_outputBuffer) / MAX_CHARACTER_WIDTH);
 		char* outPtr = m_outputBuffer;
-		size_t outLength = sizeof(m_outputBuffer);
+		::size_t outLength = sizeof(m_outputBuffer);
 
 		const size_t inLength0 = inLength;
 
@@ -373,9 +373,9 @@ void charsetFilteredOutputStream::flush(
 	{
 		// Try a conversion
 		const char* inPtr = m_unconvBuffer + offset;
-		size_t inLength = m_unconvCount;
+		::size_t inLength = m_unconvCount;
 		char* outPtr = m_outputBuffer;
-		size_t outLength = sizeof(m_outputBuffer);
+		::size_t outLength = sizeof(m_outputBuffer);
 
 		const size_t inLength0 = inLength;
 
--- origsrc/vmime/src/platforms/posix/posixHandler.cpp	2013-01-16 14:24:45.000000000 +0900
+++ src/vmime/src/platforms/posix/posixHandler.cpp	2013-01-16 15:03:29.279788200 +0900
@@ -230,6 +230,8 @@ unsigned int posixHandler::getThreadId()
 	return static_cast <unsigned int>(::gettid());
 #elif VMIME_HAVE_SYSCALL && VMIME_HAVE_SYSCALL_GETTID
 	return static_cast <unsigned int>(::syscall(SYS_gettid));
+#elif defined(__CYGWIN__)
+	return getProcessId();
 #else
 	#error We have no implementation of getThreadId() for this platform!
 #endif
--- origsrc/vmime/src/platforms/posix/posixSocket.cpp	2013-01-16 14:24:45.000000000 +0900
+++ src/vmime/src/platforms/posix/posixSocket.cpp	2013-01-16 14:56:21.691441000 +0900
@@ -411,8 +411,11 @@ const string posixSocket::getPeerName()
 #else
 
 		struct hostent *hp;
-
+#if defined(__CYGWIN__)
+		if ((hp = gethostbyaddr(reinterpret_cast <const char *>(&peer),
+#else
 		if ((hp = gethostbyaddr(reinterpret_cast <const void *>(&peer),
+#endif
 				sizeof(peer), peer.sa_family)) != NULL)
 		{
 			return string(hp->h_name);
--- origsrc/vmime/src/security/sasl/builtinSASLMechanism.cpp	2013-01-16 14:24:46.000000000 +0900
+++ src/vmime/src/security/sasl/builtinSASLMechanism.cpp	2013-01-16 14:41:36.179202200 +0900
@@ -67,7 +67,7 @@ bool builtinSASLMechanism::step
 	 byte_t** response, long* responseLen)
 {
 	char* output = 0;
-	size_t outputLen = 0;
+	::size_t outputLen = 0;
 
 	const int result = gsasl_step(sess->m_gsaslSession,
 		reinterpret_cast <const char*>(challenge), challengeLen,
@@ -125,7 +125,7 @@ void builtinSASLMechanism::encode
 	 byte_t** output, long* outputLen)
 {
 	char* coutput = 0;
-	size_t coutputLen = 0;
+	::size_t coutputLen = 0;
 
 	if (gsasl_encode(sess->m_gsaslSession,
 		reinterpret_cast <const char*>(input), inputLen,
@@ -158,7 +158,7 @@ void builtinSASLMechanism::decode
 	 byte_t** output, long* outputLen)
 {
 	char* coutput = 0;
-	size_t coutputLen = 0;
+	::size_t coutputLen = 0;
 
 	try
 	{
