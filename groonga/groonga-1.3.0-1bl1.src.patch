--- origsrc/groonga-1.3.0/Makefile.am	2011-11-13 13:48:24.729515700 +0900
+++ src/groonga-1.3.0/Makefile.am	2012-02-18 14:46:29.887057400 +0900
@@ -2,7 +2,6 @@
 
 LOCALES = ja
 
-ACLOCAL_AMFLAGS = $$ACLOCAL_ARGS -I .
 AUTOMAKE_OPTIONS = 1.9.6
 SUBDIRS =					\
 	include					\
--- origsrc/groonga-1.3.0/lib/ctx.c	2012-01-28 11:50:03.472863000 +0900
+++ src/groonga-1.3.0/lib/ctx.c	2012-02-18 14:55:11.847617400 +0900
@@ -2561,6 +2561,9 @@ grn_set_segv_handler(void)
 
   sigemptyset(&action.sa_mask);
   action.sa_sigaction = segv_handler;
+#if !defined(SA_ONSTACK)
+#define SA_ONSTACK 0
+#endif
   action.sa_flags = SA_SIGINFO | SA_ONSTACK;
 
   if (sigaction(SIGSEGV, &action, NULL)) {
--- origsrc/groonga-1.3.0/src/Makefile.am	2011-11-13 13:34:21.710597200 +0900
+++ src/groonga-1.3.0/src/Makefile.am	2012-02-18 14:58:52.506227000 +0900
@@ -10,7 +10,7 @@ DEFS += $(GRN_DEFS)
 
 AM_LDFLAGS = -no-undefined
 
-DEFAULT_INCLUDES = -I$(top_builddir) -I$(srcdir) -I$(top_srcdir)/include $(GROONGA_INCLUDEDIR)
+DEFAULT_INCLUDES = -I$(top_builddir) -I$(srcdir) -I$(top_srcdir)/include $(GROONGA_INCLUDEDIR) -I$(top_srcdir)
 
 groonga_SOURCES = groonga.c
 nodist_EXTRA_groonga_SOURCES = $(NONEXISTENT_CXX_SOURCE)
--- origsrc/groonga-1.3.0/test/unit/core/dat/test-id-cursor.cpp	2011-11-13 13:34:21.714597100 +0900
+++ src/groonga-1.3.0/test/unit/core/dat/test-id-cursor.cpp	2012-02-18 19:38:28.791104700 +0900
@@ -233,7 +233,7 @@ namespace test_dat_id_cursor
 
     grn::dat::IdCursor cursor;
 
-    cursor.open(trie, 3, 6, 0, grn::dat::UINT32_MAX);
+    cursor.open(trie, 3, 6, 0, UINT32_MAX);
     for (grn::dat::UInt32 i = 3; i <= 6; ++i) {
       const grn::dat::Key &key = cursor.next();
       cppcut_assert_equal(true, key.is_valid());
@@ -269,7 +269,7 @@ namespace test_dat_id_cursor
     grn::dat::IdCursor cursor;
 
     cursor.open(trie, grn::dat::INVALID_KEY_ID, grn::dat::INVALID_KEY_ID,
-                0, grn::dat::UINT32_MAX, grn::dat::ASCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::ASCENDING_CURSOR);
     for (grn::dat::UInt32 i = trie.min_key_id(); i <= trie.max_key_id(); ++i) {
       const grn::dat::Key &key = cursor.next();
       cppcut_assert_equal(true, key.is_valid());
@@ -277,7 +277,7 @@ namespace test_dat_id_cursor
     }
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, 2, 7, 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, 2, 7, 0, UINT32_MAX,
                 grn::dat::ASCENDING_CURSOR);
     for (grn::dat::UInt32 i = 2; i <= 7; ++i) {
       const grn::dat::Key &key = cursor.next();
@@ -303,7 +303,7 @@ namespace test_dat_id_cursor
     grn::dat::IdCursor cursor;
 
     cursor.open(trie, grn::dat::INVALID_KEY_ID, grn::dat::INVALID_KEY_ID,
-                0, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     for (grn::dat::UInt32 i = trie.max_key_id(); i >= trie.min_key_id(); --i) {
       const grn::dat::Key &key = cursor.next();
       cppcut_assert_equal(true, key.is_valid());
@@ -311,7 +311,7 @@ namespace test_dat_id_cursor
     }
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, 2, 7, 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, 2, 7, 0, UINT32_MAX,
                 grn::dat::DESCENDING_CURSOR);
     for (grn::dat::UInt32 i = 7; i >= 2; --i) {
       const grn::dat::Key &key = cursor.next();
@@ -337,7 +337,7 @@ namespace test_dat_id_cursor
     grn::dat::IdCursor cursor;
 
     cursor.open(trie, grn::dat::INVALID_KEY_ID, grn::dat::INVALID_KEY_ID,
-                0, grn::dat::UINT32_MAX,
+                0, UINT32_MAX,
                 grn::dat::EXCEPT_LOWER_BOUND | grn::dat::EXCEPT_UPPER_BOUND);
     for (grn::dat::UInt32 i = trie.min_key_id(); i <= trie.max_key_id(); ++i) {
       const grn::dat::Key &key = cursor.next();
@@ -347,7 +347,7 @@ namespace test_dat_id_cursor
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, trie.min_key_id(), trie.max_key_id(),
-                0, grn::dat::UINT32_MAX,
+                0, UINT32_MAX,
                 grn::dat::EXCEPT_LOWER_BOUND | grn::dat::EXCEPT_UPPER_BOUND);
     for (grn::dat::UInt32 i = trie.min_key_id() + 1; i <= (trie.max_key_id() - 1); ++i) {
       const grn::dat::Key &key = cursor.next();
--- origsrc/groonga-1.3.0/test/unit/core/dat/test-key-cursor.cpp	2011-11-13 13:34:21.714597100 +0900
+++ src/groonga-1.3.0/test/unit/core/dat/test-key-cursor.cpp	2012-02-18 19:46:10.438153100 +0900
@@ -152,7 +152,7 @@ namespace test_dat_key_cursor
     grn::dat::KeyCursor cursor;
 
     cursor.open(trie, grn::dat::String("Gnome"), grn::dat::String("Werdna"),
-                0, grn::dat::UINT32_MAX);
+                0, UINT32_MAX);
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(7), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
@@ -184,7 +184,7 @@ namespace test_dat_key_cursor
     grn::dat::KeyCursor cursor;
 
     cursor.open(trie, grn::dat::String(), grn::dat::String(),
-                0, grn::dat::UINT32_MAX, grn::dat::ASCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
@@ -195,7 +195,7 @@ namespace test_dat_key_cursor
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("Elf"), grn::dat::String("Human"),
-                0, grn::dat::UINT32_MAX, grn::dat::ASCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(7), cursor.next().id());
@@ -217,7 +217,7 @@ namespace test_dat_key_cursor
     grn::dat::KeyCursor cursor;
 
     cursor.open(trie, grn::dat::String(), grn::dat::String(),
-                0, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
@@ -228,7 +228,7 @@ namespace test_dat_key_cursor
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("Elf"), grn::dat::String("Human"),
-                0, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(7), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
@@ -250,7 +250,7 @@ namespace test_dat_key_cursor
     grn::dat::KeyCursor cursor;
 
     cursor.open(trie, grn::dat::String(), grn::dat::String(),
-                0, grn::dat::UINT32_MAX,
+                0, UINT32_MAX,
                 grn::dat::EXCEPT_LOWER_BOUND | grn::dat::EXCEPT_UPPER_BOUND);
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
@@ -262,7 +262,7 @@ namespace test_dat_key_cursor
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("Dwarf"), grn::dat::String("Werdna"),
-                0, grn::dat::UINT32_MAX,
+                0, UINT32_MAX,
                 grn::dat::EXCEPT_LOWER_BOUND | grn::dat::EXCEPT_UPPER_BOUND);
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
@@ -284,7 +284,7 @@ namespace test_dat_key_cursor
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("Fighter"), grn::dat::String("Samurai"),
-                0, grn::dat::UINT32_MAX,
+                0, UINT32_MAX,
                 grn::dat::EXCEPT_LOWER_BOUND | grn::dat::EXCEPT_UPPER_BOUND);
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(7), cursor.next().id());
--- origsrc/groonga-1.3.0/test/unit/core/dat/test-predictive-cursor.cpp	2011-11-13 13:34:21.714597100 +0900
+++ src/groonga-1.3.0/test/unit/core/dat/test-predictive-cursor.cpp	2012-02-18 19:50:52.620952000 +0900
@@ -133,7 +133,7 @@ namespace test_dat_predictive_cursor
 
     grn::dat::PredictiveCursor cursor;
 
-    cursor.open(trie, grn::dat::String(), 0, grn::dat::UINT32_MAX);
+    cursor.open(trie, grn::dat::String(), 0, UINT32_MAX);
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
@@ -180,7 +180,7 @@ namespace test_dat_predictive_cursor
 
     grn::dat::PredictiveCursor cursor;
 
-    cursor.open(trie, grn::dat::String(), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String(), 0, UINT32_MAX,
                 grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
@@ -190,7 +190,7 @@ namespace test_dat_predictive_cursor
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String(), 3, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String(), 3, UINT32_MAX,
                 grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
@@ -203,7 +203,7 @@ namespace test_dat_predictive_cursor
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗"), 0, UINT32_MAX,
                 grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
@@ -218,7 +218,7 @@ namespace test_dat_predictive_cursor
 
     grn::dat::PredictiveCursor cursor;
 
-    cursor.open(trie, grn::dat::String(), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String(), 0, UINT32_MAX,
                 grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
@@ -228,7 +228,7 @@ namespace test_dat_predictive_cursor
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String(), 3, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String(), 3, UINT32_MAX,
                 grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
@@ -241,14 +241,14 @@ namespace test_dat_predictive_cursor
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗"), 0, UINT32_MAX,
                 grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗"), 2, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗"), 2, UINT32_MAX,
                 grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
@@ -258,7 +258,7 @@ namespace test_dat_predictive_cursor
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗"), 3, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗"), 3, UINT32_MAX,
                 grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(false, cursor.next().is_valid());
 
@@ -274,7 +274,7 @@ namespace test_dat_predictive_cursor
 
     grn::dat::PredictiveCursor cursor;
 
-    cursor.open(trie, grn::dat::String(), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String(), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(6), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
@@ -284,40 +284,40 @@ namespace test_dat_predictive_cursor
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北"), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗"), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗神"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗神"), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗神拳"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗神拳"), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗神拳伝承"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗神拳伝承"), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗神拳伝承者"), 0, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗神拳伝承者"), 0, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(false, cursor.next().is_valid());
 
-    cursor.open(trie, grn::dat::String("北斗"), 1, grn::dat::UINT32_MAX,
+    cursor.open(trie, grn::dat::String("北斗"), 1, UINT32_MAX,
                 grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
--- origsrc/groonga-1.3.0/test/unit/core/dat/test-prefix-cursor.cpp	2011-11-13 13:34:21.714597100 +0900
+++ src/groonga-1.3.0/test/unit/core/dat/test-prefix-cursor.cpp	2012-02-18 19:55:54.474996800 +0900
@@ -158,7 +158,7 @@ namespace test_dat_prefix_cursor
 
     grn::dat::PrefixCursor cursor;
 
-    cursor.open(trie, grn::dat::String("東京都庁ビル"), 0, 0, grn::dat::UINT32_MAX);
+    cursor.open(trie, grn::dat::String("東京都庁ビル"), 0, 0, UINT32_MAX);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
@@ -199,19 +199,19 @@ namespace test_dat_prefix_cursor
     grn::dat::PrefixCursor cursor;
 
     cursor.open(trie, grn::dat::String("京都府"), 0,
-                0, grn::dat::UINT32_MAX, grn::dat::ASCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("京都府"), std::strlen("京都"),
-                0, grn::dat::UINT32_MAX, grn::dat::ASCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("京都府"), 0,
-                1, grn::dat::UINT32_MAX, grn::dat::ASCENDING_CURSOR);
+                1, UINT32_MAX, grn::dat::ASCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(4), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
@@ -229,20 +229,20 @@ namespace test_dat_prefix_cursor
     grn::dat::PrefixCursor cursor;
 
     cursor.open(trie, grn::dat::String("東京都庁"), 0,
-                0, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("東京都庁"), std::strlen("東京都"),
-                0, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                0, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("東京都庁"), std::strlen("東京都"),
-                1, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                1, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
@@ -252,7 +252,7 @@ namespace test_dat_prefix_cursor
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("東京都庁"), 0,
-                1, grn::dat::UINT32_MAX, grn::dat::DESCENDING_CURSOR);
+                1, UINT32_MAX, grn::dat::DESCENDING_CURSOR);
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
@@ -272,27 +272,27 @@ namespace test_dat_prefix_cursor
     grn::dat::PrefixCursor cursor;
 
     cursor.open(trie, grn::dat::String("東京都庁ビル"), 0,
-                0, grn::dat::UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
+                0, UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("東京都庁ビル"), std::strlen("東京"),
-                0, grn::dat::UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
+                0, UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(5), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("東京都庁"), std::strlen("東京"),
-                0, grn::dat::UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
+                0, UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(1), cursor.next().id());
     cppcut_assert_equal(grn::dat::UInt32(3), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
 
     cursor.open(trie, grn::dat::String("京都府"), 0,
-                0, grn::dat::UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
+                0, UINT32_MAX, grn::dat::EXCEPT_EXACT_MATCH);
     cppcut_assert_equal(grn::dat::UInt32(2), cursor.next().id());
     cppcut_assert_equal(false, cursor.next().is_valid());
   }
--- origsrc/groonga-1.3.0/test/unit/core/dat/test-trie.cpp	2012-01-28 11:50:03.504862200 +0900
+++ src/groonga-1.3.0/test/unit/core/dat/test-trie.cpp	2012-02-18 19:57:08.701729600 +0900
@@ -266,10 +266,10 @@ namespace test_dat_trie
     cppcut_assert_equal(true, trie.lcp_search("0123", 4));
     cppcut_assert_equal(false, trie.lcp_search("12345", 5));
 
-    grn::dat::UInt32 key_pos = grn::dat::UINT32_MAX;
+    grn::dat::UInt32 key_pos = UINT32_MAX;
 
     cppcut_assert_equal(false, trie.lcp_search("01", 2, &key_pos));
-    cppcut_assert_equal(grn::dat::UINT32_MAX, key_pos);
+    cppcut_assert_equal(UINT32_MAX, key_pos);
 
     cppcut_assert_equal(true, trie.lcp_search("012", 3, &key_pos));
     cppcut_assert_equal(true, trie.get_key(key_pos).is_valid());
