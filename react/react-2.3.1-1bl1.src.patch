--- origsrc/react-2.3.1/CMakeLists.txt	2014-04-30 03:43:12.000000000 +0900
+++ src/react-2.3.1/CMakeLists.txt	2014-12-17 22:42:51.343500000 +0900
@@ -61,13 +61,15 @@ set_target_properties(react PROPERTIES
 	LINKER_LANGUAGE CXX
 )
 
+if(NOT CYGWIN)
 if(UNIX OR MINGW)
 	set_target_properties(react PROPERTIES COMPILE_FLAGS "-fPIC")
 endif()
+endif()
 
 install(TARGETS react
 	EXPORT ReactTargets
-	LIBRARY DESTINATION lib${LIB_SUFFIX}
+	RUNTIME DESTINATION bin
 	ARCHIVE DESTINATION lib${LIB_SUFFIX}
 	BUNDLE DESTINATION library
 )
--- origsrc/react-2.3.1/include/react/updater.hpp	2014-04-30 03:43:12.000000000 +0900
+++ src/react-2.3.1/include/react/updater.hpp	2014-12-17 08:25:55.270203100 +0900
@@ -19,6 +19,8 @@
 #include <stack>
 #include <stdexcept>
 
+#include <boost/lexical_cast.hpp>
+
 #include "call_tree.hpp"
 
 namespace react {
@@ -125,7 +127,7 @@ public:
 		if (!action_code_is_valid(action_code)) {
 			throw std::invalid_argument(
 						"Can't start action: action code is invalid: "
-						+ std::to_string(static_cast<long long>(action_code))
+						+ boost::lexical_cast<std::string>(static_cast<long long>(action_code))
 			);
 		}
 
@@ -152,7 +154,7 @@ public:
 		if (!action_code_is_valid(action_code)) {
 			throw std::invalid_argument(
 						"Can't stop action: action code is invalid: "
-						+ std::to_string(static_cast<long long>(action_code))
+						+ boost::lexical_cast<std::string>(static_cast<long long>(action_code))
 			);
 		}
 
@@ -277,7 +279,7 @@ private:
 				error_message = "~time_stats_updater(): extra measurements:\n";
 				if (get_actual_trace_depth() != get_trace_depth()) {
 					error_message +=
-							std::to_string(static_cast<long long>(get_trace_depth() - get_actual_trace_depth()))
+							boost::lexical_cast<std::string>(static_cast<long long>(get_trace_depth() - get_actual_trace_depth()))
 							+ " untracked actions due to max depth\n";
 				}
 				while (get_actual_trace_depth() > 0) {
@@ -390,7 +392,7 @@ public:
 						+ " is already stopped";
 			} else {
 				error_message = "action "
-						+ std::to_string(static_cast<long long>(action_code))
+						+ boost::lexical_cast<std::string>(static_cast<long long>(action_code))
 						+ " is already stopped";
 			}
 
--- origsrc/react-2.3.1/tests/test_actions_set.cpp	2014-04-30 03:43:12.000000000 +0900
+++ src/react-2.3.1/tests/test_actions_set.cpp	2014-12-17 08:27:24.444031200 +0900
@@ -1,4 +1,5 @@
 #include <stdexcept>
+#include <boost/lexical_cast.hpp>
 
 #include "tests.hpp"
 
@@ -14,7 +15,7 @@ BOOST_AUTO_TEST_CASE( define_new_action_
 
 	for (int i = 0; i < 10; ++i)
 	{
-		int action_code = actions_set.define_new_action("ACTION" + std::to_string(static_cast<long long>(i)));
+		int action_code = actions_set.define_new_action("ACTION" + boost::lexical_cast<std::string>(static_cast<long long>(i)));
 		BOOST_CHECK_EQUAL( action_code, i );
 	}
 }
@@ -25,13 +26,13 @@ BOOST_AUTO_TEST_CASE( define_new_action_
 
 	for (int i = 0; i < 10; ++i)
 	{
-		int action_code = actions_set.define_new_action("ACTION" + std::to_string(static_cast<long long>(i)));
+		int action_code = actions_set.define_new_action("ACTION" + boost::lexical_cast<std::string>(static_cast<long long>(i)));
 		BOOST_CHECK_EQUAL( action_code, i );
 	}
 
 	for (int i = 0; i < 10; ++i)
 	{
-		int action_code = actions_set.define_new_action("ACTION" + std::to_string(static_cast<long long>(i)));
+		int action_code = actions_set.define_new_action("ACTION" + boost::lexical_cast<std::string>(static_cast<long long>(i)));
 		BOOST_CHECK_EQUAL( action_code, i );
 	}
 }
@@ -42,12 +43,12 @@ BOOST_AUTO_TEST_CASE( get_action_name_te
 
 	for (int i = 0; i < 10; ++i)
 	{
-		actions_set.define_new_action("ACTION" + std::to_string(static_cast<long long>(i)));
+		actions_set.define_new_action("ACTION" + boost::lexical_cast<std::string>(static_cast<long long>(i)));
 	}
 
 	for (int i = 0; i < 10; ++i)
 	{
-		BOOST_CHECK_EQUAL( actions_set.get_action_name(i), "ACTION" + std::to_string(static_cast<long long>(i)) );
+		BOOST_CHECK_EQUAL( actions_set.get_action_name(i), "ACTION" + boost::lexical_cast<std::string>(static_cast<long long>(i)) );
 	}
 }
 
