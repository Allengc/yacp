--- origsrc/kitchen_sync-0.99.1/CMakeLists.txt	2017-10-07 08:20:08.000000000 +0900
+++ src/kitchen_sync-0.99.1/CMakeLists.txt	2017-11-18 12:38:53.329000000 +0900
@@ -8,7 +8,9 @@ include(CheckCXXCompilerFlag)
 CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
 CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
 CHECK_CXX_COMPILER_FLAG("-stdlib=libc++" COMPILER_SUPPORTS_STDLIB)
-if(COMPILER_SUPPORTS_CXX11)
+if(CYGWIN)
+	ADD_DEFINITIONS("-std=gnu++11")
+elseif(COMPILER_SUPPORTS_CXX11)
 	ADD_DEFINITIONS("-std=c++11")
 elseif(COMPILER_SUPPORTS_CXX0X)
 	ADD_DEFINITIONS("-std=c++0x")
@@ -17,6 +19,10 @@ if(COMPILER_SUPPORTS_STDLIB)
 	ADD_DEFINITIONS("-stdlib=libc++")
 endif()
 
+if(CYGWIN)
+	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive")
+endif()
+
 # where to look first for cmake modules, before ${CMAKE_ROOT}/Modules/ is checked
 set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
 
@@ -56,7 +62,7 @@ if(NOT APPLE)
 endif()
 
 # is backtrace in libc?
-if(NOT APPLE)
+if(NOT APPLE AND NOT CYGWIN)
 	find_package(Backtrace)
 endif()
 
@@ -64,9 +70,12 @@ if(Backtrace_FOUND OR APPLE)
 	ADD_DEFINITIONS("-DUSE_BACKTRACE")
 endif()
 
+include(FindPkgConfig)
+pkg_check_modules(XXHASH REQUIRED xxhash)
+
 # the endpoints do the actual work
-set(ks_endpoint_SRCS src/schema.cpp src/filters.cpp src/abortable_barrier.cpp src/sync_queue.cpp src/xxHash/xxhash.cpp)
-set(ks_endpoint_LIBS ${OPENSSL_LIBRARIES} ${YamlCPP_LIBRARIES} ${Boost_LIBRARIES})
+set(ks_endpoint_SRCS src/schema.cpp src/filters.cpp src/abortable_barrier.cpp src/sync_queue.cpp)
+set(ks_endpoint_LIBS ${OPENSSL_LIBRARIES} ${YamlCPP_LIBRARIES} ${Boost_LIBRARIES} ${XXHASH_LIBRARIES})
 
 # turn on debugging symbols
 set(CMAKE_BUILD_TYPE Debug)
@@ -102,23 +111,23 @@ if (PostgreSQL_FOUND)
 endif()
 
 # tests require ruby and various extra gems.  to run the suite, run
-#   cmake .. && CTEST_OUTPUT_ON_FAILURE=1 make test
+#   cmake ${CMAKE_SOURCE_DIR} && CTEST_OUTPUT_ON_FAILURE=1 make test
 enable_testing()
-add_test(protocol_version_test   env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/protocol_version_test.rb)
-add_test(snapshot_from_test      env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/snapshot_from_test.rb)
-add_test(schema_from_test        env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/schema_from_test.rb)
-add_test(schema_to_test          env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/schema_to_test.rb)
-add_test(range_from_test         env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/range_from_test.rb)
-add_test(hash_from_test          env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/hash_from_test.rb)
-add_test(rows_from_test          env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/rows_from_test.rb)
-add_test(filter_from_test        env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/filter_from_test.rb)
-add_test(column_types_to_test    env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/column_types_to_test.rb)
-add_test(column_types_from_test  env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/column_types_from_test.rb)
-add_test(sync_to_test            env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/sync_to_test.rb)
+add_test(protocol_version_test   env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/protocol_version_test.rb)
+add_test(snapshot_from_test      env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/snapshot_from_test.rb)
+add_test(schema_from_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/schema_from_test.rb)
+add_test(schema_to_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/schema_to_test.rb)
+add_test(range_from_test         env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/range_from_test.rb)
+add_test(hash_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/hash_from_test.rb)
+add_test(rows_from_test          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/rows_from_test.rb)
+add_test(filter_from_test        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/filter_from_test.rb)
+add_test(column_types_to_test    env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/column_types_to_test.rb)
+add_test(column_types_from_test  env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/column_types_from_test.rb)
+add_test(sync_to_test            env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/sync_to_test.rb)
 
 # regression tests for legacy protocol version 6
-add_test(hash_from_test6          env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/p6/hash_from_test.rb)
-add_test(rows_from_test6          env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/p6/rows_from_test.rb)
-add_test(rows_and_hash_from_test6 env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/p6/rows_and_hash_from_test.rb)
-add_test(sync_to_test6            env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/p6/sync_to_test.rb)
-add_test(filter_from_test6        env BUNDLE_GEMFILE=../test/Gemfile bundle exec ruby ../test/p6/filter_from_test.rb)
+add_test(hash_from_test6          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/p6/hash_from_test.rb)
+add_test(rows_from_test6          env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/p6/rows_from_test.rb)
+add_test(rows_and_hash_from_test6 env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/p6/rows_and_hash_from_test.rb)
+add_test(sync_to_test6            env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/p6/sync_to_test.rb)
+add_test(filter_from_test6        env BUNDLE_GEMFILE=${CMAKE_SOURCE_DIR}/test/Gemfile bundle exec ruby ${CMAKE_SOURCE_DIR}/test/p6/filter_from_test.rb)
--- origsrc/kitchen_sync-0.99.1/src/env.h	2017-10-07 08:20:08.000000000 +0900
+++ src/kitchen_sync-0.99.1/src/env.h	2017-11-18 12:36:18.279000000 +0900
@@ -13,7 +13,11 @@ int getenv_default(const char *name, int
 }
 
 void setenv(const char *name, const std::string &value) {
+#if defined(__CYGWIN__)
+	setenv(name, value.c_str());
+#else
 	setenv(name, value.c_str(), 1);
+#endif
 }
 
 #endif
--- origsrc/kitchen_sync-0.99.1/src/ks.cpp	2017-10-07 08:20:08.000000000 +0900
+++ src/kitchen_sync-0.99.1/src/ks.cpp	2017-11-18 12:35:28.381000000 +0900
@@ -83,9 +83,15 @@ int main(int argc, char *argv[]) {
 		setenv("ENDPOINT_WORKERS", to_string(options.workers));
 		setenv("ENDPOINT_STARTFD", to_string(to_descriptor_list_start));
 		setenv("ENDPOINT_VERBOSE", to_string(options.verbose));
+#if defined(__CYGWIN__)
+		setenv("ENDPOINT_PROGRESS", options.progress ? "1" : "0");
+		setenv("ENDPOINT_SNAPSHOT", options.snapshot ? "1" : "0");
+		setenv("ENDPOINT_ALTER", options.alter ? "1" : "0");
+#else
 		setenv("ENDPOINT_PROGRESS", options.progress ? "1" : "0", 1);
 		setenv("ENDPOINT_SNAPSHOT", options.snapshot ? "1" : "0", 1);
 		setenv("ENDPOINT_ALTER", options.alter ? "1" : "0", 1);
+#endif
 		setenv("ENDPOINT_COMMIT_LEVEL", to_string(options.commit_level));
 		setenv("ENDPOINT_HASH_ALGORITHM", to_string(options.hash_algorithm));
 		setenv("ENDPOINT_STRUCTURE_ONLY", to_string(options.structure_only));
