--- origsrc/SQLiteCpp-2.0.0/CMakeLists.txt	2016-07-26 14:39:35.000000000 +0900
+++ src/SQLiteCpp-2.0.0/CMakeLists.txt	2016-12-28 20:55:04.566119100 +0900
@@ -32,7 +32,11 @@ else (MSVC)
     set(CPPLINT_ARG_OUTPUT      "--output=eclipse")
     set(CPPCHECK_ARG_TEMPLATE   "--template=gcc")
     # Useful compile flags and extra warnings 
+    if (CYGWIN)
+        add_compile_options(-Wall -Winit-self -Wswitch-enum -Wshadow -Winline)
+    else ()
     add_compile_options(-fstack-protector -Wall -Winit-self -Wswitch-enum -Wshadow -Winline)
+    endif ()
     if (CMAKE_COMPILER_IS_GNUCXX)
         # GCC flags
         if (SQLITECPP_USE_GCOV AND CMAKE_COMPILER_IS_GNUCXX)
@@ -164,9 +168,12 @@ add_library(SQLiteCpp ${SQLITECPP_SRC} $
 target_include_directories(SQLiteCpp PUBLIC "${PROJECT_SOURCE_DIR}/include")
 
 if (UNIX AND (CMAKE_COMPILER_IS_GNUCXX OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang"))
+  if (NOT CYGWIN)
     set_target_properties(SQLiteCpp PROPERTIES COMPILE_FLAGS "-fPIC")
+  endif ()
 endif (UNIX AND (CMAKE_COMPILER_IS_GNUCXX OR ${CMAKE_CXX_COMPILER_ID} STREQUAL "Clang"))
 
+set_target_properties(SQLiteCpp PROPERTIES SOVERSION 0)
 
 ## Build provided copy of SQLite3 C library ##
 
@@ -176,6 +183,8 @@ if (SQLITECPP_INTERNAL_SQLITE)
     add_subdirectory(sqlite3)
     include_directories("${PROJECT_SOURCE_DIR}/sqlite3")
     target_include_directories(sqlite3 PUBLIC "${PROJECT_SOURCE_DIR}/sqlite3")
+else ()
+    target_link_libraries(SQLiteCpp sqlite3)
 endif (SQLITECPP_INTERNAL_SQLITE)
 
 
@@ -254,15 +263,20 @@ if (SQLITECPP_BUILD_TESTS)
     # add the subdirectory containing the CMakeLists.txt for the gtest library
     # TODO: under Linux, uses libgtest-dev if found
     # TODO: move to the new googletest Github repository
+    if (NOT CYGWIN)
     if (NOT EXISTS "${PROJECT_SOURCE_DIR}/googletest/CMakeLists.txt")
         message(FATAL_ERROR "Missing 'googletest' submodule! Either use 'git init submodule' and 'git update submodule' to get googletest according to the README, or deactivate unit tests with -DSQLITECPP_BUILD_TESTS=OFF")
     endif ()
     add_subdirectory(googletest) 
     include_directories("${PROJECT_SOURCE_DIR}/googletest/include")
+    endif ()
 
     # add the unit test executable
     add_executable(SQLiteCpp_tests ${SQLITECPP_TESTS})
     target_link_libraries(SQLiteCpp_tests gtest_main SQLiteCpp sqlite3)
+    if (CYGWIN)
+        target_link_libraries(SQLiteCpp_tests gtest)
+    endif ()
     # Link target with dl for linux
     if (UNIX AND NOT APPLE)
         target_link_libraries(SQLiteCpp_tests dl)
@@ -282,3 +296,15 @@ else (SQLITECPP_BUILD_TESTS)
     message(STATUS "SQLITECPP_BUILD_TESTS OFF")
 endif (SQLITECPP_BUILD_TESTS)
 
+install(TARGETS SQLiteCpp RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+file(GLOB headers "include/SQliteCpp/*.h")
+install(FILES ${headers} DESTINATION include/${PROJECT_NAME})
+install(FILES FindSQLiteCpp.cmake DESTINATION lib/cmake/${PROJECT_NAME})
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+SET(VERSION "2.0.0")
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/${PROJECT_NAME}.pc.in ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/${PROJECT_NAME}.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/SQLiteCpp-2.0.0/SQLiteCpp.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/SQLiteCpp-2.0.0/SQLiteCpp.pc.in	2016-12-28 20:40:44.350836600 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: SQLiteCpp
+Description: Smart and easy to use C++ SQLite3 wrapper
+Version: @VERSION@
+Libs: -L${libdir} -lSQLiteCpp
+Cflags: -I${includedir}
