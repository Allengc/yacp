--- origsrc/cryptominisat-5.0.1/CMakeLists.txt	2016-09-10 22:30:17.000000000 +0900
+++ src/cryptominisat-5.0.1/CMakeLists.txt	2016-12-08 10:51:07.253550500 +0900
@@ -145,7 +145,7 @@ endif()
 
 # Note: O3 gives slight speed increase, 1 more solved from SAT Comp'14 @ 3600s
 if (NOT WIN32)
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -g")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11 -g")
     if (USE_PTHREADS)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
     endif()
@@ -526,4 +526,3 @@ install(FILES
 install(EXPORT ${CRYPTOMINISAT5_EXPORT_NAME} DESTINATION
     "${CRYPTOMINISAT5_INSTALL_CMAKE_DIR}"
 )
-
--- origsrc/cryptominisat-5.0.1/src/CMakeLists.txt	2016-09-10 22:30:17.000000000 +0900
+++ src/cryptominisat-5.0.1/src/CMakeLists.txt	2016-12-08 12:05:56.153122300 +0900
@@ -185,7 +185,7 @@ endforeach()
 
 install(TARGETS libcryptominisat5
     EXPORT ${CRYPTOMINISAT5_EXPORT_NAME}
-    LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/lib"
+    RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/bin"
     ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/lib"
     PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_PREFIX}/include/cryptominisat5"
 )
--- origsrc/cryptominisat-5.0.1/src/main.cpp	2016-09-10 22:30:17.000000000 +0900
+++ src/cryptominisat-5.0.1/src/main.cpp	2016-12-08 10:47:30.201268600 +0900
@@ -52,6 +52,10 @@ THE SOFTWARE.
 #include "cryptominisat5/cryptominisat.h"
 #include "signalcode.h"
 
+#if defined(__CYGWIN__)
+extern "C" int fileno(FILE *stream);
+#endif
+
 #ifdef USE_ZLIB
 static size_t gz_read(void* buf, size_t num, size_t count, gzFile f)
 {
--- origsrc/cryptominisat-5.0.1/src/main_simple.cpp	2016-09-10 22:30:17.000000000 +0900
+++ src/cryptominisat-5.0.1/src/main_simple.cpp	2016-12-08 10:47:14.660308300 +0900
@@ -42,6 +42,10 @@ using std::endl;
 using namespace CMSat;
 std::ostream* dratf;
 
+#if defined(__CYGWIN__)
+extern "C" int fileno(FILE *stream);
+#endif
+
 #ifdef USE_ZLIB
 static size_t gz_read(void* buf, size_t num, size_t count, gzFile f)
 {
--- origsrc/cryptominisat-5.0.1/tests/CMakeLists.txt	2016-09-10 22:30:17.000000000 +0900
+++ src/cryptominisat-5.0.1/tests/CMakeLists.txt	2016-12-08 11:49:27.133356300 +0900
@@ -42,12 +42,15 @@ set(LIT_ARGS -v CACHE STRING "Arguments
 # the location of GTest source code is probably error prone so using a copy in the
 # repository seems like the easiest thing to do. This also has the added benefit that
 # everyone uses the same version of GTest.
-set(GTEST_PREFIX ${PROJECT_SOURCE_DIR}/utils/gtest)
-message(STATUS "NOTE: if adding the 'gtest' subdirectory fails, you need to issue 'git submodule init' and 'git submodule update'")
-add_subdirectory(${GTEST_PREFIX} gtest)
-set(GTEST_BOTH_LIBRARIES gtest gtest_main)
+option(USE_SYSTEM_GTEST "use system gtest" ON)
+if(NOT USE_SYSTEM_GTEST)
+  set(GTEST_PREFIX ${PROJECT_SOURCE_DIR}/utils/gtest)
+  message(STATUS "NOTE: if adding the 'gtest' subdirectory fails, you need to issue 'git submodule init' and 'git submodule update'")
+  add_subdirectory(${GTEST_PREFIX} gtest)
 
-include_directories(${GTEST_PREFIX}/include)
+  include_directories(${GTEST_PREFIX}/include)
+endif()
+set(GTEST_BOTH_LIBRARIES gtest gtest_main)
 
 # Add handy macros/functions
 include(AddSTPGTest)
@@ -64,14 +67,13 @@ option(TEST_CNF_FILES
 
 if(TEST_CNF_FILES)
     add_subdirectory(${PROJECT_SOURCE_DIR}/tests/cnf-files)
-endif()
 
 
 # -----------------------------------------------------------------------------
 
-add_subdirectory(${PROJECT_SOURCE_DIR}/utils/cnf-utils cnf-utils)
-add_subdirectory(${PROJECT_SOURCE_DIR}/utils/sha1-sat sha1-sat)
-
+    add_subdirectory(${PROJECT_SOURCE_DIR}/utils/cnf-utils cnf-utils)
+    add_subdirectory(${PROJECT_SOURCE_DIR}/utils/sha1-sat sha1-sat)
+endif()
 
 if (PYTHON_OK AND NOT STATS)
     # add_subdirectory(swig)
--- origsrc/cryptominisat-5.0.1/tests/assump_test.cpp	2016-09-10 22:30:17.000000000 +0900
+++ src/cryptominisat-5.0.1/tests/assump_test.cpp	2016-12-08 11:57:59.997656200 +0900
@@ -25,6 +25,7 @@ THE SOFTWARE.
 #include "cryptominisat5/cryptominisat.h"
 #include "src/solverconf.h"
 #include <vector>
+#include <algorithm>
 using std::vector;
 using namespace CMSat;
 
