--- origsrc/avro-cpp-1.8.1/CMakeLists.txt	2016-05-15 09:51:44.000000000 +0900
+++ src/avro-cpp-1.8.1/CMakeLists.txt	2016-10-22 22:27:34.594302200 +0900
@@ -81,22 +81,27 @@ add_library (avrocpp SHARED ${AVRO_SOURC
 set_property (TARGET avrocpp
     APPEND PROPERTY COMPILE_DEFINITIONS AVRO_DYN_LINK)
 
+option(ENABLE_STATIC "Enable static" OFF)
+if (ENABLE_STATIC)
 add_library (avrocpp_s STATIC ${AVRO_SOURCE_FILES})
 
 set_property (TARGET avrocpp avrocpp_s
     APPEND PROPERTY COMPILE_DEFINITIONS AVRO_SOURCE)
+endif (ENABLE_STATIC)
 
 set_target_properties (avrocpp PROPERTIES
-    VERSION ${AVRO_VERSION_MAJOR}.${AVRO_VERSION_MINOR})
-
-set_target_properties (avrocpp_s PROPERTIES
-    VERSION ${AVRO_VERSION_MAJOR}.${AVRO_VERSION_MINOR})
+    VERSION ${AVRO_VERSION_MAJOR}.${AVRO_VERSION_MINOR}
+    SOVERSION 0)
 
 target_link_libraries (avrocpp ${Boost_LIBRARIES})
 
 add_executable (precompile test/precompile.cc)
 
+if (ENABLE_STATIC)
 target_link_libraries (precompile avrocpp_s ${Boost_LIBRARIES})
+else (ENABLE_STATIC)
+target_link_libraries (precompile avrocpp ${Boost_LIBRARIES})
+endif (ENABLE_STATIC)
 
 macro (gen file ns)
     add_custom_command (OUTPUT ${file}.hh
@@ -121,7 +126,11 @@ gen (reuse ru)
 gen (circulardep cd)
 
 add_executable (avrogencpp impl/avrogencpp.cc)
+if (NOT ENABLE_STATIC)
+target_link_libraries (avrogencpp avrocpp ${Boost_LIBRARIES})
+else (NOT ENABLE_STATIC)
 target_link_libraries (avrogencpp avrocpp_s ${Boost_LIBRARIES})
+endif (NOT ENABLE_STATIC)
 
 enable_testing()
 
@@ -154,10 +163,17 @@ set (CPACK_PACKAGE_FILE_NAME "avrocpp-${
 
 include (CPack)
 
+if (NOT ENABLE_STATIC)
+install (TARGETS avrocpp
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin)
+else (NOT ENABLE_STATIC)
 install (TARGETS avrocpp avrocpp_s
     LIBRARY DESTINATION lib
     ARCHIVE DESTINATION lib
     RUNTIME DESTINATION lib)
+endif (NOT ENABLE_STATIC)
 
 install (TARGETS avrogencpp RUNTIME DESTINATION bin)
 
@@ -169,3 +185,10 @@ if (NOT CMAKE_BUILD_TYPE)
       "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
       FORCE)
 endif (NOT CMAKE_BUILD_TYPE)
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/avro-cpp.pc.in ${CMAKE_BINARY_DIR}/avro-cpp.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/avro-cpp.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/avro-cpp-1.8.1/avro-cpp.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/avro-cpp-1.8.1/avro-cpp.pc.in	2016-10-22 22:27:34.597239900 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: avro-cpp
+Description: Data serialization system (C++)
+Version: @AVRO_VERSION@
+Libs: -L${libdir} -lavro-cpp
+Cflags: -I${includedir}/avro
--- origsrc/avro-cpp-1.8.1/test/SchemaTests.cc	2016-05-15 09:51:44.000000000 +0900
+++ src/avro-cpp-1.8.1/test/SchemaTests.cc	2016-10-22 22:38:02.513370200 +0900
@@ -128,7 +128,7 @@ const char* basicSchemaErrors[] = {
     // Duplicate type
     "[{\"type\": \"array\", \"items\": \"long\"}, "
         "{\"type\": \"array\", \"items\": \"string\"}]",
-        
+
     // Fixed
     // No size
     "{\"type\": \"fixed\", \"name\": \"Missing size\"}",
@@ -138,19 +138,19 @@ const char* basicSchemaErrors[] = {
 
 static void testBasic(const char* schema)
 {
-    BOOST_CHECKPOINT(schema);
+    BOOST_TEST_CHECKPOINT(schema);
     compileJsonSchemaFromString(schema);
 }
 
 static void testBasic_fail(const char* schema)
 {
-    BOOST_CHECKPOINT(schema);
+    BOOST_TEST_CHECKPOINT(schema);
     BOOST_CHECK_THROW(compileJsonSchemaFromString(schema), Exception);
 }
 
 static void testCompile(const char* schema)
 {
-    BOOST_CHECKPOINT(schema);
+    BOOST_TEST_CHECKPOINT(schema);
     compileJsonSchemaFromString(std::string(schema));
 }
 
@@ -161,10 +161,10 @@ static void testCompile(const char* sche
 
 #define ADD_PARAM_TEST(ts, func, data) \
     ts->add(BOOST_PARAM_TEST_CASE(&func, data, ENDOF(data)))
-    
+
 
 boost::unit_test::test_suite*
-init_unit_test_suite(int argc, char* argv[]) 
+init_unit_test_suite(int argc, char* argv[])
 {
     using namespace boost::unit_test;
 
--- origsrc/avro-cpp-1.8.1/test/buffertest.cc	2016-05-15 09:51:44.000000000 +0900
+++ src/avro-cpp-1.8.1/test/buffertest.cc	2016-10-22 22:33:25.756623700 +0900
@@ -56,7 +56,7 @@ std::string makeString(size_t len)
     return newstring;
 }
 
-void printBuffer(const InputBuffer &buf) 
+void printBuffer(const InputBuffer &buf)
 {
     avro::istream is(buf);
     cout << is.rdbuf() << endl;
@@ -64,7 +64,7 @@ void printBuffer(const InputBuffer &buf)
 
 void TestReserve()
 {
-    BOOST_MESSAGE( "TestReserve");
+    BOOST_TEST_MESSAGE( "TestReserve");
     {
         OutputBuffer ob;
         BOOST_CHECK_EQUAL(ob.size(), 0U);
@@ -111,8 +111,8 @@ void addDataToBuffer(OutputBuffer &buf,
 
 void TestGrow()
 {
-    BOOST_MESSAGE( "TestGrow");
-    { 
+    BOOST_TEST_MESSAGE( "TestGrow");
+    {
         OutputBuffer ob;
 
         // add exactly one block
@@ -151,7 +151,7 @@ void TestGrow()
 
 void TestDiscard()
 {
-    BOOST_MESSAGE( "TestDiscard");
+    BOOST_TEST_MESSAGE( "TestDiscard");
     {
         OutputBuffer ob;
         size_t dataSize = kDefaultBlockSize*2 + kDefaultBlockSize/2;
@@ -189,7 +189,7 @@ void TestDiscard()
         BOOST_CHECK_EQUAL(ob.numDataChunks(), 3);
     }
 
-    { 
+    {
         // discard exactly one block
         OutputBuffer ob;
         size_t dataSize = kDefaultBlockSize*2 + kDefaultBlockSize/2;
@@ -244,7 +244,7 @@ void TestDiscard()
             ob.discardData(ob.size()+1);
         }
         catch (std::exception &e) {
-            std::cout << "Intentionally triggered exception: " << e.what() << std::endl; 
+            std::cout << "Intentionally triggered exception: " << e.what() << std::endl;
         }
         ob.discardData(ob.size());
 
@@ -257,7 +257,7 @@ void TestDiscard()
 
 void TestConvertToInput()
 {
-    BOOST_MESSAGE( "TestConvertToInput");
+    BOOST_TEST_MESSAGE( "TestConvertToInput");
     {
         OutputBuffer ob;
         size_t dataSize = kDefaultBlockSize*2 + kDefaultBlockSize/2;
@@ -277,7 +277,7 @@ void TestConvertToInput()
 
 void TestExtractToInput()
 {
-    BOOST_MESSAGE( "TestExtractToInput");
+    BOOST_TEST_MESSAGE( "TestExtractToInput");
     {
         OutputBuffer ob;
         size_t dataSize = kDefaultBlockSize*2 + kDefaultBlockSize/2;
@@ -310,7 +310,7 @@ void TestExtractToInput()
         BOOST_CHECK_EQUAL(ob.numChunks(), 1);
         BOOST_CHECK_EQUAL(ob.numDataChunks(), 3);
     }
-    
+
     {
         // extract exactly one block
         OutputBuffer ob;
@@ -359,7 +359,7 @@ void TestExtractToInput()
             ob.extractData(ob.size()+1);
         }
         catch (std::exception &e) {
-            std::cout << "Intentionally triggered exception: " << e.what() << std::endl; 
+            std::cout << "Intentionally triggered exception: " << e.what() << std::endl;
         }
 
         InputBuffer ib = ob.extractData(remainder);
@@ -376,7 +376,7 @@ void TestExtractToInput()
 
 void TestAppend()
 {
-    BOOST_MESSAGE( "TestAppend");
+    BOOST_TEST_MESSAGE( "TestAppend");
     {
         OutputBuffer ob;
         size_t dataSize = kDefaultBlockSize + kDefaultBlockSize/2;
@@ -405,7 +405,7 @@ void TestAppend()
 
 void TestBufferStream()
 {
-    BOOST_MESSAGE( "TestBufferStream");
+    BOOST_TEST_MESSAGE( "TestBufferStream");
 
     {
         // write enough bytes to a buffer, to create at least 3 blocks
@@ -434,7 +434,7 @@ void TestEof()
     OutputBuffer buf2;
     buf2.writeTo(&eofs[0], eofs.size());
 
-    // append the buffers, so the first 
+    // append the buffers, so the first
     // character on a buffer boundary is eof
     buf1.append(buf2);
 
@@ -456,7 +456,7 @@ void TestEof()
 
 void TestBufferStreamEof()
 {
-    BOOST_MESSAGE( "TestBufferStreamEof");
+    BOOST_TEST_MESSAGE( "TestBufferStreamEof");
 
     TestEof<int32_t>();
 
@@ -469,7 +469,7 @@ void TestBufferStreamEof()
 
 void TestSeekAndTell()
 {
-    BOOST_MESSAGE( "TestSeekAndTell");
+    BOOST_TEST_MESSAGE( "TestSeekAndTell");
 
     {
         std::string junk = makeString(kDefaultBlockSize/2);
@@ -501,7 +501,7 @@ void TestSeekAndTell()
 
 void TestReadSome()
 {
-    BOOST_MESSAGE( "TestReadSome");
+    BOOST_TEST_MESSAGE( "TestReadSome");
     {
         std::string junk = makeString(kDefaultBlockSize/2);
 
@@ -531,7 +531,7 @@ void TestReadSome()
 
 void TestSeek()
 {
-    BOOST_MESSAGE( "TestSeek");
+    BOOST_TEST_MESSAGE( "TestSeek");
     {
         const std::string str = "SampleMessage";
 
@@ -539,7 +539,7 @@ void TestSeek()
         tmp1.writeTo(str.c_str(), 3); // Sam
         tmp2.writeTo(str.c_str()+3, 7);  // pleMess
         tmp3.writeTo(str.c_str()+10, 3); // age
-        
+
         tmp2.append(tmp3);
         tmp1.append(tmp2);
 
@@ -586,13 +586,13 @@ void TestSeek()
         oss << is.rdbuf();
         cout << "After reading bytes: " << oss.str() << '\n';
         BOOST_CHECK_EQUAL(oss.str(), part2);
-        
+
     }
 }
 
-void TestIterator() 
+void TestIterator()
 {
-    BOOST_MESSAGE( "TestIterator");
+    BOOST_TEST_MESSAGE( "TestIterator");
     {
         OutputBuffer ob(2 * kMaxBlockSize + 10);
         BOOST_CHECK_EQUAL(ob.numChunks(), 3);
@@ -622,7 +622,7 @@ void TestIterator()
 
         size_t acc = 0;
         for(OutputBuffer::const_iterator iter = ob.begin();
-            iter != ob.end(); 
+            iter != ob.end();
             ++iter) {
             acc += iter->size();
         }
@@ -632,13 +632,13 @@ void TestIterator()
             ob.wroteTo(acc+1);
         }
         catch (std::exception &e) {
-            std::cout << "Intentionally triggered exception: " << e.what() << std::endl; 
+            std::cout << "Intentionally triggered exception: " << e.what() << std::endl;
         }
     }
 }
 
 #ifdef HAVE_BOOST_ASIO
-void server(boost::barrier &b) 
+void server(boost::barrier &b)
 {
     using boost::asio::ip::tcp;
     boost::asio::io_service io_service;
@@ -674,7 +674,7 @@ void server(boost::barrier &b)
 void TestAsioBuffer()
 {
     using boost::asio::ip::tcp;
-    BOOST_MESSAGE( "TestAsioBuffer");
+    BOOST_TEST_MESSAGE( "TestAsioBuffer");
     {
         boost::barrier b(2);
 
@@ -682,7 +682,7 @@ void TestAsioBuffer()
 
         b.wait();
 
-        // set up the thing 
+        // set up the thing
         boost::asio::io_service io_service;
 
         tcp::resolver resolver(io_service);
@@ -705,7 +705,7 @@ void TestAsioBuffer()
         std::string world = "world";
         avro::OutputBuffer buf;
         buf.writeTo(hello.c_str(), hello.size());
-        
+
         BOOST_CHECK_EQUAL(buf.size(), hello.size());
 
         avro::OutputBuffer buf2;
@@ -738,7 +738,7 @@ void TestAsioBuffer()
     }
 }
 #else
-void TestAsioBuffer() 
+void TestAsioBuffer()
 {
     cout << "Skipping asio test\n";
 }
@@ -746,12 +746,12 @@ void TestAsioBuffer()
 
 void TestSplit()
 {
-    BOOST_MESSAGE( "TestSplit");
+    BOOST_TEST_MESSAGE( "TestSplit");
     {
         const std::string str = "This message is to be split";
 
         avro::OutputBuffer buf;
-        buf.writeTo(str.c_str(), str.size()); 
+        buf.writeTo(str.c_str(), str.size());
 
         char datain[12];
         avro::istream is(buf);
@@ -773,26 +773,26 @@ void TestSplit()
 
 void TestSplitOnBorder()
 {
-    BOOST_MESSAGE( "TestSplitOnBorder");
+    BOOST_TEST_MESSAGE( "TestSplitOnBorder");
     {
 
         const std::string part1 = "This message";
         const std::string part2 = " is to be split";
 
         avro::OutputBuffer buf;
-        buf.writeTo(part1.c_str(), part1.size()); 
+        buf.writeTo(part1.c_str(), part1.size());
         size_t firstChunkSize = buf.size();
 
         {
             avro::OutputBuffer tmp;
-            tmp.writeTo(part2.c_str(), part2.size()); 
+            tmp.writeTo(part2.c_str(), part2.size());
             buf.append(tmp);
             printBuffer(InputBuffer(buf));
         }
 
         BOOST_CHECK_EQUAL(buf.numDataChunks(), 2);
         size_t bufsize = buf.size();
-    
+
         boost::scoped_array<char> datain(new char[firstChunkSize]);
         avro::istream is(buf);
         size_t in = static_cast<size_t>(is.readsome(&datain[0], firstChunkSize));
@@ -810,9 +810,9 @@ void TestSplitOnBorder()
     }
 }
 
-void TestSplitTwice() 
+void TestSplitTwice()
 {
-    BOOST_MESSAGE( "TestSplitTwice");
+    BOOST_TEST_MESSAGE( "TestSplitTwice");
     {
         const std::string msg1 = makeString(30);
 
@@ -828,7 +828,7 @@ void TestSplitTwice()
         is.readsome(buffer, 5);
         buffer[5] = 0;
         std::cout << "buffer =" << buffer << std::endl;
-        
+
         buf1.discardData(static_cast<size_t>(is.tellg()));
         printBuffer(buf1);
 
@@ -840,9 +840,9 @@ void TestSplitTwice()
     }
 }
 
-void TestCopy() 
+void TestCopy()
 {
-    BOOST_MESSAGE( "TestCopy");
+    BOOST_TEST_MESSAGE( "TestCopy");
 
     const std::string msg = makeString(30);
     // Test1, small data, small buffer
@@ -855,7 +855,7 @@ void TestCopy()
 
         BOOST_CHECK_EQUAL(msg.size(), wb.size());
         BOOST_CHECK_EQUAL(wb.numDataChunks(), 1);
-        BOOST_CHECK_EQUAL(kDefaultBlockSize - msg.size(), 
+        BOOST_CHECK_EQUAL(kDefaultBlockSize - msg.size(),
                 wb.freeSpace());
 
         // copy starting at offset 5 and copying 10 less bytes
@@ -871,14 +871,14 @@ void TestCopy()
         // buf 1 should be unchanged
         BOOST_CHECK_EQUAL(msg.size(), wb.size());
         BOOST_CHECK_EQUAL(wb.numDataChunks(), 1);
-        BOOST_CHECK_EQUAL(kDefaultBlockSize - msg.size(), 
+        BOOST_CHECK_EQUAL(kDefaultBlockSize - msg.size(),
                 wb.freeSpace());
 
         // make sure wb is still functional
         wb.reserve(kDefaultBlockSize);
         BOOST_CHECK_EQUAL(wb.size(), msg.size());
         BOOST_CHECK_EQUAL(wb.numChunks(), 2);
-        BOOST_CHECK_EQUAL(kDefaultBlockSize * 2 - msg.size(), 
+        BOOST_CHECK_EQUAL(kDefaultBlockSize * 2 - msg.size(),
                 wb.freeSpace());
     }
 
@@ -896,7 +896,7 @@ void TestCopy()
 
         BOOST_CHECK_EQUAL(wb.size(), msg.size());
         BOOST_CHECK_EQUAL(wb.numDataChunks(), 1);
-        BOOST_CHECK_EQUAL(bufsize - msg.size(), 
+        BOOST_CHECK_EQUAL(bufsize - msg.size(),
                 wb.freeSpace());
 
         BufferReader br(wb);
@@ -924,7 +924,7 @@ void TestCopy()
         wb.reserve(bufsize);
         BOOST_CHECK_EQUAL(msg.size(), wb.size());
         BOOST_CHECK_EQUAL(wb.numChunks(), 4);
-        BOOST_CHECK_EQUAL(kMaxBlockSize * 3 - msg.size() + kMinBlockSize, 
+        BOOST_CHECK_EQUAL(kMaxBlockSize * 3 - msg.size() + kMinBlockSize,
                 wb.freeSpace());
     }
 
@@ -959,7 +959,7 @@ void TestCopy()
         BOOST_CHECK_EQUAL(wb.numDataChunks(), 2);
     }
 
-    // Test4, no data 
+    // Test4, no data
     {
         const OutputBuffer::size_type bufsize= 2*kMaxBlockSize;
         std::cout << "Test4\n";
@@ -996,9 +996,9 @@ void TestCopy()
 }
 
 // this is reproducing a sequence of steps that caused a crash
-void TestBug()  
+void TestBug()
 {
-    BOOST_MESSAGE( "TestBug");
+    BOOST_TEST_MESSAGE( "TestBug");
     {
         OutputBuffer rxBuf;
         OutputBuffer  buf;
@@ -1010,7 +1010,7 @@ void TestBug()
             avro::InputBuffer ib(rxBuf.extractData());
             buf.append(ib);
         }
-        
+
         buf.discardData(61);
 
         rxBuf.reserve(64 * 1024);
@@ -1030,15 +1030,15 @@ void TestBug()
 
 bool safeToDelete = false;
 
-void deleteForeign(const std::string &val) 
+void deleteForeign(const std::string &val)
 {
     std::cout << "Deleting foreign string containing " << val << '\n';
     BOOST_CHECK(safeToDelete);
 }
 
-void TestForeign ()  
+void TestForeign ()
 {
-    BOOST_MESSAGE( "TestForeign");
+    BOOST_TEST_MESSAGE( "TestForeign");
     {
         std::string hello = "hello ";
         std::string there = "there ";
@@ -1051,7 +1051,7 @@ void TestForeign ()
             buf.writeTo(hello.c_str(), hello.size());
             buf.appendForeignData(there.c_str(), there.size(), boost::bind(&deleteForeign, there));
             buf.writeTo(world.c_str(), world.size());
-        
+
             printBuffer(buf);
             BOOST_CHECK_EQUAL(buf.size(), 18U);
             copy = buf;
@@ -1063,9 +1063,9 @@ void TestForeign ()
     safeToDelete = false;
 }
 
-void TestForeignDiscard ()  
+void TestForeignDiscard ()
 {
-    BOOST_MESSAGE( "TestForeign");
+    BOOST_TEST_MESSAGE( "TestForeign");
     {
         std::string hello = "hello ";
         std::string again = "again ";
@@ -1077,7 +1077,7 @@ void TestForeignDiscard ()
         buf.appendForeignData(again.c_str(), again.size(), boost::bind(&deleteForeign, again));
         buf.appendForeignData(there.c_str(), there.size(), boost::bind(&deleteForeign, there));
         buf.writeTo(world.c_str(), world.size());
-        
+
         printBuffer(buf);
         BOOST_CHECK_EQUAL(buf.size(), 24U);
 
@@ -1085,7 +1085,7 @@ void TestForeignDiscard ()
         buf.discardData(9);
         printBuffer(buf);
         BOOST_CHECK_EQUAL(buf.size(), 15U);
-        
+
         // discard some more data, which will lop off the first foreign buffer
         safeToDelete = true;
         buf.discardData(6);
@@ -1104,7 +1104,7 @@ void TestForeignDiscard ()
 
 void TestPrinter()
 {
-    BOOST_MESSAGE( "TestPrinter");
+    BOOST_TEST_MESSAGE( "TestPrinter");
     {
         OutputBuffer ob;
         addDataToBuffer(ob, 128);
@@ -1115,7 +1115,7 @@ void TestPrinter()
 
 struct BufferTestSuite : public boost::unit_test::test_suite
 {
-    BufferTestSuite()  : 
+    BufferTestSuite()  :
         boost::unit_test::test_suite("BufferTestSuite")
     {
         add (BOOST_TEST_CASE( TestReserve ));
@@ -1143,11 +1143,10 @@ struct BufferTestSuite : public boost::u
 };
 
 boost::unit_test::test_suite*
-init_unit_test_suite( int, char* [] ) 
+init_unit_test_suite( int, char* [] )
 {
     boost::unit_test::test_suite *test (BOOST_TEST_SUITE ("Buffer Unit Tests"));
     test->add (new BufferTestSuite() );
 
     return test;
 }
-
