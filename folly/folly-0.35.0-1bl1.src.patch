--- origsrc/folly-0.35.0/folly/Conv.h	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/Conv.h	2015-04-20 18:55:01.527887500 +0900
@@ -47,7 +47,7 @@
 #define FOLLY_RANGE_CHECK_STRINGIZE2(x) FOLLY_RANGE_CHECK_STRINGIZE(x)
 
 // Android doesn't support std::to_string so just use a placeholder there.
-#ifdef __ANDROID__
+#if defined(__ANDROID__) || defined(__CYGWIN__)
 #define FOLLY_RANGE_CHECK_TO_STRING(x) std::string("N/A")
 #else
 #define FOLLY_RANGE_CHECK_TO_STRING(x) std::to_string(x)
--- origsrc/folly-0.35.0/folly/Makefile.am	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/Makefile.am	2015-04-20 22:50:20.329751800 +0900
@@ -2,6 +2,9 @@ SUBDIRS = . test
 
 ACLOCAL_AMFLAGS = -I m4
 
+AM_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)/../
+AM_LDFLAGS = -no-undefined
+
 CLEANFILES =
 
 noinst_PROGRAMS = generate_fingerprint_tables
@@ -305,15 +308,15 @@ nobase_follyinclude_HEADERS = \
 	wangle/ssl/TLSTicketKeySeeds.h
 
 FormatTables.cpp: build/generate_format_tables.py
-	build/generate_format_tables.py
+	$(top_srcdir)/build/generate_format_tables.py
 CLEANFILES += FormatTables.cpp
 
 EscapeTables.cpp: build/generate_escape_tables.py
-	build/generate_escape_tables.py
+	$(top_srcdir)/build/generate_escape_tables.py
 CLEANFILES += EscapeTables.cpp
 
 GroupVarintTables.cpp: build/generate_varint_tables.py
-	build/generate_varint_tables.py
+	$(top_srcdir)/build/generate_varint_tables.py
 CLEANFILES += GroupVarintTables.cpp
 
 libfollybase_la_SOURCES = \
@@ -417,7 +420,6 @@ libfolly_la_SOURCES += \
 endif
 
 if !HAVE_LINUX
-nobase_follyinclude_HEADERS += detail/Clock.h
 libfollybase_la_SOURCES += detail/Clock.cpp
 endif
 
@@ -431,10 +433,10 @@ endif
 
 libfollybase_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION)
 
-libfolly_la_LIBADD = libfollybase.la
-libfolly_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION) -lssl
+libfolly_la_LIBADD = libfollybase.la $(BOOST_CONTEXT_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_REGEX_LIB) $(BOOST_SYSTEM_LIB) $(OPENSSL_LIBS) $(LIBEVENT_LIBS)
+libfolly_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION)
 
-FingerprintTables.cpp: generate_fingerprint_tables
+FingerprintTables.cpp: generate_fingerprint_tables$(EXEEXT)
 	./generate_fingerprint_tables
 CLEANFILES += FingerprintTables.cpp
 
--- origsrc/folly-0.35.0/folly/String.h	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/String.h	2015-04-20 18:56:13.905904300 +0900
@@ -17,6 +17,7 @@
 #ifndef FOLLY_BASE_STRING_H_
 #define FOLLY_BASE_STRING_H_
 
+#include <cstdarg>
 #include <exception>
 #include <string>
 #include <boost/type_traits.hpp>
--- origsrc/folly-0.35.0/folly/Subprocess.h	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/Subprocess.h	2015-04-20 19:42:52.425274100 +0900
@@ -77,6 +77,16 @@
 #include <folly/Portability.h>
 #include <folly/Range.h>
 
+#if defined(stdin)
+#undef stdin
+#endif
+#if defined(stdout)
+#undef stdout
+#endif
+#if defined(stderr)
+#undef stderr
+#endif
+
 namespace folly {
 
 /**
--- origsrc/folly-0.35.0/folly/configure.ac	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/configure.ac	2015-04-20 21:16:16.235132700 +0900
@@ -58,10 +58,7 @@ AC_CHECK_LIB([glog],[openlog],[],[AC_MSG
 AC_CHECK_LIB([gflags],[getenv],[],[AC_MSG_ERROR(
              [Please install google-gflags library])])
 
-AC_CHECK_LIB(ssl,
-        SSL_ctrl,
-        [],
-        [AC_MSG_ERROR(["Error: libssl required"])])
+PKG_CHECK_MODULES([OPENSSL], [openssl])
 
 # check for boost libs
 AX_BOOST_BASE([1.51.0], [], [AC_MSG_ERROR(
@@ -82,7 +79,7 @@ AC_CHECK_HEADER(double-conversion/double
 AC_CHECK_LIB([double-conversion],[ceil],[],[AC_MSG_ERROR(
              [Please install double-conversion library])])
 
-AC_CHECK_LIB([event], [event_set], [], [AC_MSG_ERROR([Unable to find libevent])])
+PKG_CHECK_MODULES([LIBEVENT], [libevent])
 
 AC_CHECK_LIB([jemalloc], [xallocx])
 
@@ -250,11 +247,13 @@ if test "$folly_cv_prog_cc_weak_symbols"
             [Define to 1 if the linker supports weak symbols.])
 fi
 
+if test "$host_os" != "cygwin"; then
 AC_SEARCH_LIBS([cplus_demangle_v3_callback], [iberty_pic iberty])
 if test "$ac_cv_search_cplus_demangle_v3_callback" != "no" ; then
   AC_DEFINE([HAVE_CPLUS_DEMANGLE_V3_CALLBACK], [1],
             [Define to 1 if we have cplus_demangle_v3_callback.])
 fi
+fi
 
 # Check for clock_gettime(2). This is not in an AC_CHECK_FUNCS() because we
 # want to link with librt if necessary.
--- origsrc/folly-0.35.0/folly/detail/Clock.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/detail/Clock.cpp	2015-04-20 19:30:44.577224700 +0900
@@ -52,6 +52,6 @@ int clock_getres(clockid_t clk_id, struc
 // using winpthreads from mingw-w64
 // <pthreads_time.h> has clock_gettime and friends
 // make sure to include <pthread.h> as well for typedefs of timespec/etc
-#else
+#elif !defined(__CYGWIN__)
 #error No clock_gettime(2) compatibility wrapper available for this platform.
 #endif
--- origsrc/folly-0.35.0/folly/detail/Clock.h	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/detail/Clock.h	2015-04-20 19:31:31.724941000 +0900
@@ -22,7 +22,7 @@
 
 #include <folly/Portability.h>
 
-#if FOLLY_HAVE_CLOCK_GETTIME
+#if FOLLY_HAVE_CLOCK_GETTIME && !defined(__CYGWIN__)
 #error This should only be used as a workaround for platforms \
           that do not support clock_gettime(2).
 #endif
@@ -32,7 +32,12 @@
 #include <pthread.h>
 #include <pthread_time.h>
 #else
+#if !defined(__CYGWIN__)
 typedef uint8_t clockid_t;
+#endif
+#if defined(CLOCK_REALTIME)
+#undef CLOCK_REALTIME
+#endif
 #define CLOCK_REALTIME 0
 
 int clock_gettime(clockid_t clk_id, struct timespec* ts);
--- origsrc/folly-0.35.0/folly/experimental/JSONSchema.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/experimental/JSONSchema.cpp	2015-04-20 20:04:23.755418100 +0900
@@ -134,7 +134,7 @@ struct MultipleOfValidator final : IVali
       return none;
     }
     if (schema_.isDouble() || value.isDouble()) {
-      const auto rem = std::remainder(value.asDouble(), schema_.asDouble());
+      const auto rem = ::remainder(value.asDouble(), schema_.asDouble());
       if (std::abs(rem) > std::numeric_limits<double>::epsilon()) {
         return makeError("a multiple of ", schema_, value);
       }
--- origsrc/folly-0.35.0/folly/experimental/fibers/Fiber.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/experimental/fibers/Fiber.cpp	2015-04-20 20:00:18.186829000 +0900
@@ -15,7 +15,9 @@
  */
 #include "Fiber.h"
 
+#if !defined(__CYGWIN__)
 #include <sys/syscall.h>
+#endif
 #include <unistd.h>
 
 #include <algorithm>
@@ -34,7 +36,11 @@ namespace {
 static const uint64_t kMagic8Bytes = 0xfaceb00cfaceb00c;
 
 pid_t localThreadId() {
+#if defined(__CYGWIN__)
+  static thread_local pid_t threadId = getpid();
+#else
   static thread_local pid_t threadId = syscall(SYS_gettid);
+#endif
   return threadId;
 }
 
--- origsrc/folly-0.35.0/folly/experimental/fibers/FiberManager.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/experimental/fibers/FiberManager.cpp	2015-04-20 20:01:02.746313300 +0900
@@ -15,7 +15,9 @@
  */
 #include "FiberManager.h"
 
+#if !defined(__CYGWIN__)
 #include <sys/syscall.h>
+#endif
 #include <unistd.h>
 
 #include <cassert>
--- origsrc/folly-0.35.0/folly/io/async/AsyncSSLSocket.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/io/async/AsyncSSLSocket.cpp	2015-04-20 19:35:02.837416500 +0900
@@ -1351,11 +1351,13 @@ int AsyncSSLSocket::eorAwareBioWrite(BIO
 
   tsslSock =
     reinterpret_cast<AsyncSSLSocket*>(BIO_get_app_data(b));
+#if defined(MSG_EOR)
   if (tsslSock &&
       tsslSock->minEorRawByteNo_ &&
       tsslSock->minEorRawByteNo_ <= BIO_number_written(b) + inl) {
     flags = MSG_EOR;
   }
+#endif
 
   errno = 0;
   ret = sendmsg(b->num, &msg, flags);
--- origsrc/folly-0.35.0/folly/io/async/AsyncSocket.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/io/async/AsyncSocket.cpp	2015-04-20 19:34:20.553993700 +0900
@@ -1634,6 +1634,7 @@ ssize_t AsyncSocket::performWrite(const
 
 #ifdef MSG_NOSIGNAL // Linux-only
   msg_flags |= MSG_NOSIGNAL;
+#if defined(MSG_MORE)
   if (isSet(flags, WriteFlags::CORK)) {
     // MSG_MORE tells the kernel we have more data to send, so wait for us to
     // give it the rest of the data rather than immediately sending a partial
@@ -1641,10 +1642,13 @@ ssize_t AsyncSocket::performWrite(const
     msg_flags |= MSG_MORE;
   }
 #endif
+#endif
+#if defined(MSG_EOR)
   if (isSet(flags, WriteFlags::EOR)) {
     // marks that this is the last byte of a record (response)
     msg_flags |= MSG_EOR;
   }
+#endif
   ssize_t totalWritten = ::sendmsg(fd_, &msg, msg_flags);
   if (totalWritten < 0) {
     if (errno == EAGAIN) {
--- origsrc/folly-0.35.0/folly/io/async/SSLContext.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/io/async/SSLContext.cpp	2015-04-20 19:38:32.277301800 +0900
@@ -649,7 +649,7 @@ static void callbackLocking(int mode, in
 }
 
 static unsigned long callbackThreadID() {
-  return static_cast<unsigned long>(
+  return reinterpret_cast<unsigned long>(
 #ifdef __APPLE__
     pthread_mach_thread_np(pthread_self())
 #else
--- origsrc/folly-0.35.0/folly/io/async/test/TimeUtil.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/io/async/test/TimeUtil.cpp	2015-04-20 20:00:14.034737500 +0900
@@ -22,7 +22,9 @@
 #include <chrono>
 #include <sys/types.h>
 #include <sys/stat.h>
+#if !defined(__CYGWIN__)
 #include <sys/syscall.h>
+#endif
 #include <sys/utsname.h>
 #include <errno.h>
 #include <glog/logging.h>
@@ -40,7 +42,11 @@ namespace folly {
  * glibc doesn't provide gettid(), so define it ourselves.
  */
 static pid_t gettid() {
+#if defined(__CYGWIN__)
+  return getpid();
+#else
   return syscall(SYS_gettid);
+#endif
 }
 
 /**
--- origsrc/folly-0.35.0/folly/test/Makefile.am	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/test/Makefile.am	2015-04-20 22:28:34.534749100 +0900
@@ -2,7 +2,7 @@ SUBDIRS = . function_benchmark
 
 ACLOCAL_AMFLAGS = -I m4
 
-CPPFLAGS += -Igtest-1.7.0/include
+CPPFLAGS += -I$(top_builddir)
 
 TESTS= \
 	sorted_vector_types_test \
@@ -14,172 +14,165 @@ TESTS= \
 	bits_test \
 	bit_iterator_test
 
-check_LTLIBRARIES = libgtestmain.la libgtest.la
 check_PROGRAMS =
 
-libgtestmain_la_CPPFLAGS = -Igtest-1.7.0 -Igtest-1.7.0/src
-libgtestmain_la_SOURCES = gtest-1.7.0/src/gtest-all.cc gtest-1.7.0/src/gtest_main.cc
-
-libgtest_la_CPPFLAGS = -Igtest-1.7.0 -Igtest-1.7.0/src
-libgtest_la_SOURCES = gtest-1.7.0/src/gtest-all.cc
-
 noinst_HEADERS = FBStringTestBenchmarks.cpp.h \
 		 FBVectorTestBenchmarks.cpp.h
 
 spin_lock_test_SOURCES = SpinLockTest.cpp
-spin_lock_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+spin_lock_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += spin_lock_test
 
 if HAVE_X86_64
 small_locks_test_SOURCES = SmallLocksTest.cpp
-small_locks_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+small_locks_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += small_locks_test
 
 # Fails with WARNING: Logging before InitGoogleLogging() is written to STDERR
 packed_sync_ptr_test_SOURCES = PackedSyncPtrTest.cpp
-packed_sync_ptr_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+packed_sync_ptr_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += packed_sync_ptr_test
 
 small_vector_test_SOURCES = small_vector_test.cpp
-small_vector_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+small_vector_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += small_vector_test
 
 discriminated_ptr_test_SOURCES = DiscriminatedPtrTest.cpp
-discriminated_ptr_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+discriminated_ptr_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += discriminated_ptr_test
 endif
 
 sorted_vector_types_test_SOURCES = sorted_vector_test.cpp
-sorted_vector_types_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+sorted_vector_types_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 
 
 foreach_test_SOURCES = ForeachTest.cpp
-foreach_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+foreach_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 
 hash_test_SOURCES = HashTest.cpp
-hash_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+hash_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 
 
 fbstring_test_using_jemalloc_SOURCES = FBStringTest.cpp
-fbstring_test_using_jemalloc_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+fbstring_test_using_jemalloc_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 TESTS += fbstring_test_using_jemalloc
 
 thread_cached_int_test_SOURCES = ThreadCachedIntTest.cpp
-thread_cached_int_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+thread_cached_int_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 
 thread_local_test_SOURCES = ThreadLocalTest.cpp
-thread_local_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+thread_local_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 
 TESTS += thread_cached_int_test thread_local_test
 
 fbvector_test_SOURCES = FBVectorTest.cpp
-fbvector_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+fbvector_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 TESTS += fbvector_test
 
 # fails due to cout
 dynamic_test_SOURCES = DynamicTest.cpp
-dynamic_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la $(top_builddir)/libfolly.la
+dynamic_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la $(top_builddir)/libfolly.la
 TESTS += dynamic_test
 
 # fails due to cout
 json_test_SOURCES = JsonTest.cpp
-json_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la  $(top_builddir)/libfolly.la
+json_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la  $(top_builddir)/libfolly.la
 TESTS += json_test
 
 benchmark_test_SOURCES = BenchmarkTest.cpp
-benchmark_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+benchmark_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 check_PROGRAMS += benchmark_test
 
 # fails due to destructor
 scope_guard_test_SOURCES = ScopeGuardTest.cpp
-scope_guard_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+scope_guard_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += scope_guard_test
 
 timeout_queue_test_SOURCES = TimeoutQueueTest.cpp
-timeout_queue_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+timeout_queue_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 
 conv_test_SOURCES = ConvTest.cpp
-conv_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+conv_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 
 range_test_SOURCES = RangeTest.cpp
-range_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+range_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 
 bits_test_SOURCES = BitsTest.cpp
-bits_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+bits_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 
 bit_iterator_test_SOURCES = BitIteratorTest.cpp
-bit_iterator_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+bit_iterator_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 
 endian_test_SOURCES = EndianTest.cpp
-endian_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+endian_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += endian_test
 
 rw_spinlock_test_SOURCES = RWSpinLockTest.cpp
-rw_spinlock_test_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+rw_spinlock_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 TESTS += rw_spinlock_test
 
 synchronized_test_SOURCES = SynchronizedTest.cpp
-synchronized_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+synchronized_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += synchronized_test
 
 concurrent_skiplist_test_SOURCES = ConcurrentSkipListTest.cpp
-concurrent_skiplist_test_LDADD = libgtest.la $(top_builddir)/libfolly.la
+concurrent_skiplist_test_LDADD = -lgtest $(top_builddir)/libfolly.la
 TESTS += concurrent_skiplist_test
 
 concurrent_skiplist_benchmark_SOURCES = ConcurrentSkipListBenchmark.cpp
-concurrent_skiplist_benchmark_LDADD = libgtestmain.la $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
+concurrent_skiplist_benchmark_LDADD = -lgtest -lgtest_main $(top_builddir)/libfollybenchmark.la $(top_builddir)/libfolly.la
 check_PROGRAMS += concurrent_skiplist_benchmark
 
 histogram_test_SOURCES = HistogramTest.cpp
-histogram_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+histogram_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += histogram_test
 
 group_varint_test_SOURCES = GroupVarintTest.cpp
-group_varint_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+group_varint_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += group_varint_test
 
 map_util_test_SOURCES = MapUtilTest.cpp
-map_util_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+map_util_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += map_util_test
 
 string_test_SOURCES = StringTest.cpp
-string_test_LDADD = libgtest.la $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
+string_test_LDADD = -lgtest $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
 TESTS += string_test
 
 producer_consumer_queue_test_SOURCES = ProducerConsumerQueueTest.cpp
-producer_consumer_queue_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+producer_consumer_queue_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += producer_consumer_queue_test
 
 atomic_hash_array_test_SOURCES = AtomicHashArrayTest.cpp
-atomic_hash_array_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+atomic_hash_array_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += atomic_hash_array_test
 
 atomic_hash_map_test_SOURCES = AtomicHashMapTest.cpp
-atomic_hash_map_test_LDADD = libgtest.la $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
+atomic_hash_map_test_LDADD = -lgtest $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
 TESTS += atomic_hash_map_test
 
 format_test_SOURCES = FormatTest.cpp
-format_test_LDADD = libgtest.la $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
+format_test_LDADD = -lgtest $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
 TESTS += format_test
 
 fingerprint_test_SOURCES = FingerprintTest.cpp
-fingerprint_test_LDADD = libgtest.la $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
+fingerprint_test_LDADD = -lgtest $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
 TESTS += fingerprint_test
 
 portability_test_SOURCES = PortabilityTest.cpp
-portability_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+portability_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += portability_test
 
 cpuid_test_SOURCES = CpuIdTest.cpp
-cpuid_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la
+cpuid_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la
 TESTS += cpuid_test
 
 spooky_hash_v1_test_SOURCES = SpookyHashV1Test.cpp
-spooky_hash_v1_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
+spooky_hash_v1_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
 TESTS += spooky_hash_v1_test
 
 spooky_hash_v2_test_SOURCES = SpookyHashV2Test.cpp
-spooky_hash_v2_test_LDADD = libgtestmain.la $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
+spooky_hash_v2_test_LDADD = -lgtest -lgtest_main $(top_builddir)/libfolly.la $(top_builddir)/libfollybenchmark.la
 TESTS += spooky_hash_v2_test
 
 check_PROGRAMS += $(TESTS)
--- origsrc/folly-0.35.0/folly/test/SynchronizedTest.cpp	2015-04-10 12:35:37.000000000 +0900
+++ src/folly-0.35.0/folly/test/SynchronizedTest.cpp	2015-04-20 22:31:48.061824600 +0900
@@ -27,7 +27,7 @@
 TEST(Synchronized, Basic) {
   testBasic<std::mutex>();
   testBasic<std::recursive_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testBasic<std::timed_mutex>();
   testBasic<std::recursive_timed_mutex>();
 #endif
@@ -39,7 +39,7 @@ TEST(Synchronized, Basic) {
   testBasic<boost::mutex>();
   testBasic<boost::recursive_mutex>();
   testBasic<boost::shared_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testBasic<boost::timed_mutex>();
   testBasic<boost::recursive_timed_mutex>();
 #endif
@@ -48,7 +48,7 @@ TEST(Synchronized, Basic) {
 TEST(Synchronized, Concurrency) {
   testConcurrency<std::mutex>();
   testConcurrency<std::recursive_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testConcurrency<std::timed_mutex>();
   testConcurrency<std::recursive_timed_mutex>();
 #endif
@@ -60,7 +60,7 @@ TEST(Synchronized, Concurrency) {
   testConcurrency<boost::mutex>();
   testConcurrency<boost::recursive_mutex>();
   testConcurrency<boost::shared_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testConcurrency<boost::timed_mutex>();
   testConcurrency<boost::recursive_timed_mutex>();
 #endif
@@ -70,7 +70,7 @@ TEST(Synchronized, Concurrency) {
 TEST(Synchronized, DualLocking) {
   testDualLocking<std::mutex>();
   testDualLocking<std::recursive_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testDualLocking<std::timed_mutex>();
   testDualLocking<std::recursive_timed_mutex>();
 #endif
@@ -82,7 +82,7 @@ TEST(Synchronized, DualLocking) {
   testDualLocking<boost::mutex>();
   testDualLocking<boost::recursive_mutex>();
   testDualLocking<boost::shared_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testDualLocking<boost::timed_mutex>();
   testDualLocking<boost::recursive_timed_mutex>();
 #endif
@@ -92,7 +92,7 @@ TEST(Synchronized, DualLocking) {
 TEST(Synchronized, DualLockingWithConst) {
   testDualLockingWithConst<std::mutex>();
   testDualLockingWithConst<std::recursive_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testDualLockingWithConst<std::timed_mutex>();
   testDualLockingWithConst<std::recursive_timed_mutex>();
 #endif
@@ -104,14 +104,14 @@ TEST(Synchronized, DualLockingWithConst)
   testDualLockingWithConst<boost::mutex>();
   testDualLockingWithConst<boost::recursive_mutex>();
   testDualLockingWithConst<boost::shared_mutex>();
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testDualLockingWithConst<boost::timed_mutex>();
   testDualLockingWithConst<boost::recursive_timed_mutex>();
 #endif
 }
 
 
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
 TEST(Synchronized, TimedSynchronized) {
   testTimedSynchronized<std::timed_mutex>();
   testTimedSynchronized<std::recursive_timed_mutex>();
@@ -125,7 +125,7 @@ TEST(Synchronized, TimedSynchronized) {
 #endif
 
 TEST(Synchronized, ConstCopy) {
-#ifndef __APPLE__
+#if !(defined(__APPLE__) || defined(__CYGWIN__))
   testConstCopy<std::timed_mutex>();
   testConstCopy<std::recursive_timed_mutex>();
 
