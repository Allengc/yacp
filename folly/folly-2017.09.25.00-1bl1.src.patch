--- origsrc/folly-2017.09.25.00/folly/Makefile.am	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/Makefile.am	2017-09-28 20:23:13.861000000 +0900
@@ -9,6 +9,9 @@ SUBDIRS = . test experimental $(MAYBE_IN
 
 ACLOCAL_AMFLAGS = -I m4
 
+AM_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)/../
+AM_LDFLAGS = -no-undefined
+
 CLEANFILES =
 
 
@@ -455,15 +458,15 @@ nobase_follyinclude_HEADERS = \
 	VersionCheck.h
 
 FormatTables.cpp: build/generate_format_tables.py
-	$(PYTHON) build/generate_format_tables.py
+	$(PYTHON) $(top_srcdir)/build/generate_format_tables.py
 CLEANFILES += FormatTables.cpp
 
 EscapeTables.cpp: build/generate_escape_tables.py
-	$(PYTHON) build/generate_escape_tables.py
+	$(PYTHON) $(top_srcdir)/build/generate_escape_tables.py
 CLEANFILES += EscapeTables.cpp
 
 GroupVarintTables.cpp: build/generate_varint_tables.py
-	$(PYTHON) build/generate_varint_tables.py
+	$(PYTHON) $(top_srcdir)/build/generate_varint_tables.py
 CLEANFILES += GroupVarintTables.cpp
 
 libfollybasesse42_la_SOURCES = \
@@ -709,9 +712,9 @@ libfollybase_la_LIBADD = libfollybasesse
 libfollybase_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION)
 
 libfolly_la_LIBADD = libfollybase.la
-libfolly_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION) -lssl
+libfolly_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION) $(OPENSSL_LIBS) $(PKG_LIBS)
 
-FingerprintTables.cpp: generate_fingerprint_tables
+FingerprintTables.cpp: generate_fingerprint_tables$(EXEEXT)
 	./generate_fingerprint_tables
 CLEANFILES += FingerprintTables.cpp
 
--- origsrc/folly-2017.09.25.00/folly/Range.h	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/Range.h	2017-09-28 20:40:15.566000000 +0900
@@ -59,6 +59,12 @@
 FOLLY_PUSH_WARNING
 FOLLY_GCC_DISABLE_WARNING("-Wshadow")
 
+#if defined(__CYGWIN__)
+extern "C" {
+  void *memrchr(const void *s, int c, size_t n);
+}
+#endif
+
 namespace folly {
 
 template <class Iter>
--- origsrc/folly-2017.09.25.00/folly/Singleton.cpp	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/Singleton.cpp	2017-09-28 20:24:13.223000000 +0900
@@ -28,7 +28,7 @@
 
 #include <folly/ScopeGuard.h>
 
-#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__ANDROID__) && !defined(__CYGWIN__)
 static void hs_init_weak(int* argc, char** argv[])
     __attribute__((__weakref__("hs_init")));
 #endif
@@ -36,7 +36,7 @@ static void hs_init_weak(int* argc, char
 namespace folly {
 
 SingletonVault::Type SingletonVault::defaultVaultType() {
-#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__ANDROID__)
+#if !defined(_WIN32) && !defined(__APPLE__) && !defined(__ANDROID__) && !defined(__CYGWIN__)
   bool isPython = dlsym(RTLD_DEFAULT, "Py_Main");
   bool isHaskel = &::hs_init_weak || dlsym(RTLD_DEFAULT, "hs_init");
   bool isJVM = dlsym(RTLD_DEFAULT, "JNI_GetCreatedJavaVMs");
--- origsrc/folly-2017.09.25.00/folly/ThreadId.h	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/ThreadId.h	2017-09-28 20:24:55.957743700 +0900
@@ -84,6 +84,8 @@ inline uint64_t getOSThreadID() {
   return tid;
 #elif _WIN32
   return uint64_t(GetCurrentThreadId());
+#elif defined(__CYGWIN__)
+  return (pid_t)(uintptr_t)pthread_self();
 #else
   return uint64_t(syscall(FOLLY_SYS_gettid));
 #endif
--- origsrc/folly-2017.09.25.00/folly/configure.ac	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/configure.ac	2017-09-28 20:26:19.020000000 +0900
@@ -436,11 +436,13 @@ if test "$folly_cv_prog_vsnprintf_bad_fo
             [Define to 1 if the vsnprintf supports returning errors on bad format strings.])
 fi
 
+AS_IF([test "$host_os" != "cygwin"], [
 AC_SEARCH_LIBS([cplus_demangle_v3_callback], [iberty_pic iberty])
 if test "$ac_cv_search_cplus_demangle_v3_callback" != "no" ; then
   AC_DEFINE([HAVE_CPLUS_DEMANGLE_V3_CALLBACK], [1],
             [Define to 1 if we have cplus_demangle_v3_callback.])
 fi
+],[])
 
 # Check for clock_gettime(2). This is not in an AC_CHECK_FUNCS() because we
 # want to link with librt if necessary.
--- origsrc/folly-2017.09.25.00/folly/experimental/logging/Makefile.am	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/experimental/logging/Makefile.am	2017-09-28 20:27:05.413000200 +0900
@@ -1,3 +1,5 @@
+AM_LDFLAGS = -no-undefined
+
 SUBDIRS = . example
 
 lib_LTLIBRARIES = libfollylogging.la
--- origsrc/folly-2017.09.25.00/folly/init/Makefile.am	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/init/Makefile.am	2017-09-28 20:27:23.364000000 +0900
@@ -1,3 +1,5 @@
+AM_LDFLAGS = -no-undefined
+
 SUBDIRS = .
 
 lib_LTLIBRARIES = libfollyinit.la
--- origsrc/folly-2017.09.25.00/folly/io/async/AsyncSocket.cpp	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/io/async/AsyncSocket.cpp	2017-09-28 20:28:45.283806000 +0900
@@ -202,7 +202,9 @@ int AsyncSocket::SendMsgParamsCallback::
 #endif // MSG_NOSIGNAL
   if (isSet(flags, WriteFlags::EOR)) {
     // marks that this is the last byte of a record (response)
+#if defined(MSG_EOR)
     msg_flags |= MSG_EOR;
+#endif
   }
 
   return msg_flags;
--- origsrc/folly-2017.09.25.00/folly/io/async/EventFDWrapper.h	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/io/async/EventFDWrapper.h	2017-09-28 20:29:25.117000200 +0900
@@ -41,7 +41,9 @@
 #else /* !def FOLLY_GLIBC_2_9 */
 
 #include <fcntl.h>
+#if !defined(__CYGWIN__)
 #include <sys/syscall.h>
+#endif
 #include <unistd.h>
 
 // Use existing __NR_eventfd2 if already defined
--- origsrc/folly-2017.09.25.00/folly/portability/Stdlib.cpp	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/portability/Stdlib.cpp	2017-09-28 20:30:08.340000000 +0900
@@ -146,6 +146,7 @@ int unsetenv(const char* name) {
 
 #include <string>
 #include <vector>
+#include <unistd.h>
 
 extern "C" int clearenv() {
   std::vector<std::string> data;
--- origsrc/folly-2017.09.25.00/folly/portability/SysSyscall.h	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/portability/SysSyscall.h	2017-09-28 20:30:30.801000200 +0900
@@ -16,7 +16,7 @@
 
 #pragma once
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__CYGWIN__)
 #include <sys/syscall.h>
 
 #if defined(__APPLE__)
--- origsrc/folly-2017.09.25.00/folly/test/ApplyTupleTest.cpp	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/test/ApplyTupleTest.cpp	2017-09-28 20:31:03.181000000 +0900
@@ -21,6 +21,7 @@
 
 #include <array>
 #include <memory>
+#include <algorithm>
 
 // this placates visual studio stupidity - see
 // http://stackoverflow.com/questions/5503901
--- origsrc/folly-2017.09.25.00/folly/test/FunctionRefTest.cpp	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/test/FunctionRefTest.cpp	2017-09-28 20:31:50.269000000 +0900
@@ -190,7 +190,7 @@ TEST(FunctionRef, DefaultConstructAndAss
   int (*func)(int, int) = [](int x, int y) { return 10 * x + y; };
   fref = func;
 
-  EXPECT_TRUE(fref);
+  EXPECT_TRUE((bool) fref);
   EXPECT_EQ(42, fref(4, 2));
 }
 
--- origsrc/folly-2017.09.25.00/folly/test/Makefile.am	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/test/Makefile.am	2017-09-28 20:33:39.628000000 +0900
@@ -2,8 +2,6 @@ SUBDIRS = . function_benchmark
 
 ACLOCAL_AMFLAGS = -I m4
 
-CPPFLAGS += -isystem gtest/googletest/include -isystem gtest/googlemock/include
-
 TESTS= \
 	sorted_vector_types_test \
 	foreach_test \
@@ -16,26 +14,23 @@ TESTS= \
 	bits_test \
 	bit_iterator_test
 
-check_LTLIBRARIES = libfollytestmain.la libgtest.la
+check_LTLIBRARIES = libfollytestmain.la
 check_PROGRAMS =
 noinst_LTLIBRARIES = thread_local_test_lib.la
 
-libgtest_la_CPPFLAGS = -isystem gtest/googletest
-libgtest_la_SOURCES = gtest/googletest/src/gtest-all.cc
-
 if FOLLY_TESTMAIN
-libfollytestmain_la_CPPFLAGS = $(AM_CPPFLAGS) $(libgtest_la_CPPFLAGS)
-libfollytestmain_la_SOURCES = $(libgtest_la_SOURCES) common/TestMain.cpp
-libfollytestmain_la_LIBADD = $(top_builddir)/init/libfollyinit.la $(top_builddir)/libfolly.la
+libfollytestmain_la_CPPFLAGS = $(AM_CPPFLAGS)
+libfollytestmain_la_SOURCES = common/TestMain.cpp
+libfollytestmain_la_LIBADD = $(top_builddir)/init/libfollyinit.la $(top_builddir)/libfolly.la -lgtest -lgtest_main
 else
-libfollytestmain_la_CPPFLAGS = $(libgtest_la_CPPFLAGS)
-libfollytestmain_la_SOURCES = $(libgtest_la_SOURCES) gtest/googletest/src/gtest_main.cc
-libfollytestmain_la_LIBADD = $(top_builddir)/libfolly.la
+libfollytestmain_la_CPPFLAGS =
+libfollytestmain_la_SOURCES =
+libfollytestmain_la_LIBADD = $(top_builddir)/libfolly.la -lgtest -lgtest_main
 endif
 
 thread_local_test_lib_la_CPPFLAGS = $(AM_CPPFLAGS)
 thread_local_test_lib_la_SOURCES = ThreadLocalTestLib.cpp
-thread_local_test_lib_la_LDFLAGS = -module -rpath /force_shared
+thread_local_test_lib_la_LDFLAGS = -no-undefined -module -rpath /force_shared
 thread_local_test_lib_la_LIBADD = $(top_builddir)/libfolly.la
 
 noinst_HEADERS = FBStringTestBenchmarks.cpp.h \
--- origsrc/folly-2017.09.25.00/folly/test/ThreadNameTest.cpp	2017-09-24 15:19:41.000000000 +0900
+++ src/folly-2017.09.25.00/folly/test/ThreadNameTest.cpp	2017-09-28 20:34:07.769000000 +0900
@@ -42,6 +42,7 @@ TEST(ThreadName, getCurrentThreadName) {
   SCOPE_EXIT { th.join(); };
 }
 
+#if FOLLY_HAVE_PTHREAD
 TEST(ThreadName, setThreadName_other_pthread) {
   Baton<> handle_set;
   Baton<> let_thread_end;
@@ -57,6 +58,7 @@ TEST(ThreadName, setThreadName_other_pth
   EXPECT_EQ(
       expectedSetOtherThreadNameResult, setThreadName(handle, kThreadName));
 }
+#endif
 
 TEST(ThreadName, setThreadName_other_id) {
   Baton<> let_thread_end;
