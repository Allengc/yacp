--- origsrc/folly-2016.12.19.00/folly/Makefile.am	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/Makefile.am	2016-12-26 21:15:06.405184900 +0900
@@ -6,6 +6,9 @@ endif
 
 ACLOCAL_AMFLAGS = -I m4
 
+AM_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)/../
+AM_LDFLAGS = -no-undefined
+
 CLEANFILES =
 
 
@@ -380,15 +383,15 @@ nobase_follyinclude_HEADERS = \
 	VersionCheck.h
 
 FormatTables.cpp: build/generate_format_tables.py
-	$(PYTHON) build/generate_format_tables.py
+	$(PYTHON) $(top_srcdir)/build/generate_format_tables.py
 CLEANFILES += FormatTables.cpp
 
 EscapeTables.cpp: build/generate_escape_tables.py
-	$(PYTHON) build/generate_escape_tables.py
+	$(PYTHON) $(top_srcdir)/build/generate_escape_tables.py
 CLEANFILES += EscapeTables.cpp
 
 GroupVarintTables.cpp: build/generate_varint_tables.py
-	$(PYTHON) build/generate_varint_tables.py
+	$(PYTHON) $(top_srcdir)/build/generate_varint_tables.py
 CLEANFILES += GroupVarintTables.cpp
 
 libfollybasesse42_la_SOURCES = \
@@ -585,9 +588,9 @@ libfollybase_la_LIBADD = libfollybasesse
 libfollybase_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION)
 
 libfolly_la_LIBADD = libfollybase.la
-libfolly_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION) -lssl
+libfolly_la_LDFLAGS = $(AM_LDFLAGS) -version-info $(LT_VERSION) $(OPENSSL_LIBS) $(PKG_LIBS)
 
-FingerprintTables.cpp: generate_fingerprint_tables
+FingerprintTables.cpp: generate_fingerprint_tables$(EXEEXT)
 	./generate_fingerprint_tables
 CLEANFILES += FingerprintTables.cpp
 
--- origsrc/folly-2016.12.19.00/folly/Range.h	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/Range.h	2016-12-26 20:16:25.837332100 +0900
@@ -58,6 +58,10 @@
 #pragma GCC diagnostic push
 #pragma GCC diagnostic ignored "-Wshadow"
 
+#if defined(__CYGWIN__)
+extern "C" void *memrchr(const void *s, int c, size_t n);
+#endif
+
 namespace folly {
 
 template <class T> class Range;
--- origsrc/folly-2016.12.19.00/folly/configure.ac	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/configure.ac	2016-12-26 20:58:16.545871100 +0900
@@ -458,11 +458,13 @@ if test "$folly_cv_prog_vsnprintf_bad_fo
             [Define to 1 if the vsnprintf supports returning errors on bad format strings.])
 fi
 
+if test "$host_os" != "cygwin"; then
 AC_SEARCH_LIBS([cplus_demangle_v3_callback], [iberty_pic iberty])
 if test "$ac_cv_search_cplus_demangle_v3_callback" != "no" ; then
   AC_DEFINE([HAVE_CPLUS_DEMANGLE_V3_CALLBACK], [1],
             [Define to 1 if we have cplus_demangle_v3_callback.])
 fi
+fi
 
 # Check for clock_gettime(2). This is not in an AC_CHECK_FUNCS() because we
 # want to link with librt if necessary.
--- origsrc/folly-2016.12.19.00/folly/io/async/AsyncSSLSocket.cpp	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/io/async/AsyncSSLSocket.cpp	2016-12-26 20:29:04.968267400 +0900
@@ -1577,7 +1577,9 @@ int AsyncSSLSocket::bioWrite(BIO* b, con
 
   if (tsslSock->trackEor_ && tsslSock->minEorRawByteNo_ &&
       tsslSock->minEorRawByteNo_ <= BIO_number_written(b) + inl) {
+#if defined(MSG_EOR)
     flags = MSG_EOR;
+#endif
   }
 
 #ifdef MSG_NOSIGNAL
--- origsrc/folly-2016.12.19.00/folly/io/async/AsyncSocket.cpp	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/io/async/AsyncSocket.cpp	2016-12-26 20:28:07.589419300 +0900
@@ -1875,6 +1875,7 @@ AsyncSocket::WriteResult AsyncSocket::pe
 
 #ifdef MSG_NOSIGNAL // Linux-only
   msg_flags |= MSG_NOSIGNAL;
+#if defined(MSG_MORE)
   if (isSet(flags, WriteFlags::CORK)) {
     // MSG_MORE tells the kernel we have more data to send, so wait for us to
     // give it the rest of the data rather than immediately sending a partial
@@ -1882,9 +1883,12 @@ AsyncSocket::WriteResult AsyncSocket::pe
     msg_flags |= MSG_MORE;
   }
 #endif
+#endif
   if (isSet(flags, WriteFlags::EOR)) {
+#if defined(MSG_EOR)
     // marks that this is the last byte of a record (response)
     msg_flags |= MSG_EOR;
+#endif
   }
   auto writeResult = sendSocketMessage(fd_, &msg, msg_flags);
   auto totalWritten = writeResult.writeReturn;
--- origsrc/folly-2016.12.19.00/folly/io/async/EventFDWrapper.h	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/io/async/EventFDWrapper.h	2016-12-26 21:24:44.633514500 +0900
@@ -40,7 +40,9 @@
 #include <sys/eventfd.h>
 #else /* !def FOLLY_GLIBC_2_9 */
 
+#if !defined(__CYGWIN__)
 #include <sys/syscall.h>
+#endif
 #include <unistd.h>
 #include <fcntl.h>
 
--- origsrc/folly-2016.12.19.00/folly/io/async/SSLContext.cpp	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/io/async/SSLContext.cpp	2016-12-26 20:34:01.835069800 +0900
@@ -775,7 +775,11 @@ static void callbackLocking(int mode, in
 }
 
 static unsigned long callbackThreadID() {
+#if defined(__CYGWIN__)
+  return reinterpret_cast<unsigned long>(
+#else
   return static_cast<unsigned long>(
+#endif
 #ifdef __APPLE__
     pthread_mach_thread_np(pthread_self())
 #elif _MSC_VER
--- origsrc/folly-2016.12.19.00/folly/io/async/test/TimeUtil.cpp	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/io/async/test/TimeUtil.cpp	2016-12-26 20:36:24.936946000 +0900
@@ -52,7 +52,11 @@ static pid_t gettid() {
  * glibc doesn't provide gettid(), so define it ourselves.
  */
 static pid_t gettid() {
+#if defined(__CYGWIN__)
+  return getpid();
+#else
   return syscall(FOLLY_SYS_gettid);
+#endif
 }
 
 /**
--- origsrc/folly-2016.12.19.00/folly/portability/SysSyscall.h	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/portability/SysSyscall.h	2016-12-26 20:35:18.530299000 +0900
@@ -16,7 +16,7 @@
 
 #pragma once
 
-#ifndef _WIN32
+#if !defined(_WIN32) && !defined(__CYGWIN__)
 #include <sys/syscall.h>
 
 #if defined(__APPLE__)
--- origsrc/folly-2016.12.19.00/folly/test/Makefile.am	2016-12-18 11:33:03.000000000 +0900
+++ src/folly-2016.12.19.00/folly/test/Makefile.am	2016-12-26 21:20:52.838886000 +0900
@@ -2,7 +2,7 @@ SUBDIRS = . function_benchmark
 
 ACLOCAL_AMFLAGS = -I m4
 
-CPPFLAGS += -Igtest-1.7.0/include
+AM_CPPFLAGS = -I$(top_builddir) -I$(top_srcdir)/../
 
 TESTS= \
 	sorted_vector_types_test \
@@ -16,13 +16,10 @@ TESTS= \
 	bits_test \
 	bit_iterator_test
 
-check_LTLIBRARIES = libfollytestmain.la libgtest.la
+check_LTLIBRARIES = libfollytestmain.la
 check_PROGRAMS =
 noinst_LTLIBRARIES = lib_thread_local_test.la
 
-libgtest_la_CPPFLAGS = -Igtest-1.7.0 -Igtest-1.7.0/src
-libgtest_la_SOURCES = gtest-1.7.0/src/gtest-all.cc
-
 if FOLLY_TESTMAIN
 libfollytestmain_la_CPPFLAGS = $(AM_CPPFLAGS) $(libgtest_la_CPPFLAGS)
 libfollytestmain_la_SOURCES = $(libgtest_la_SOURCES) common/TestMain.cpp
@@ -35,7 +32,7 @@ endif
 
 lib_thread_local_test_la_CPPFLAGS = $(AM_CPPFLAGS)
 lib_thread_local_test_la_SOURCES = ThreadLocalTestLib.cpp
-lib_thread_local_test_la_LDFLAGS = -rpath /force_shared
+# lib_thread_local_test_la_LDFLAGS = -rpath /force_shared
 lib_thread_local_test_la_LIBADD = $(top_builddir)/libfolly.la
 
 noinst_HEADERS = FBStringTestBenchmarks.cpp.h \
