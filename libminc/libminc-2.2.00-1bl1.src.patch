--- origsrc/libminc-release-2.2.00/CMakeLists.txt	2012-09-25 02:35:36.000000000 +0900
+++ src/libminc-release-2.2.00/CMakeLists.txt	2015-03-26 07:06:33.869012400 +0900
@@ -25,22 +25,22 @@ ENDIF(MINC_TOOLKIT_BUILD)
 
 IF(NOT MINC2_EXTERNALLY_CONFIGURED)
   SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_CURRENT_SOURCE_DIR}/cmake-modules")
-  
+
   SET(CPACK_GENERATOR TGZ)
   SET(CPACK_PACKAGE_VERSION_MAJOR ${MINC2_PACKAGE_VERSION_MAJOR})
   SET(CPACK_PACKAGE_VERSION_MINOR ${MINC2_PACKAGE_VERSION_MINOR})
   SET(CPACK_PACKAGE_VERSION_PATCH ${MINC2_PACKAGE_VERSION_PATCH})
-  
+
   OPTION(MINC2_BUILD_SHARED_LIBS "Build minc2 with shared libraries." OFF)
-  
+
   INCLUDE(CPack)
-  
+
   OPTION(MINC2_BUILD_V2                "Support minc2 file format" ON)
   OPTION(MINC2_BUILD_TOOLS             "Build minc tools (mincreshape,mincresample, etc)" ON)
   OPTION(MINC2_BUILD_CONVERTERS        "Build minc conversion programs (mnc2nii, nii2mnc , dcm2mnc...)" ON)
   OPTION(MINC2_BUILD_EZMINC            "Build C++ interface library EZminc" ON)
   OPTION(MINC2_BUILD_EZMINC_EXAMPLES   "Build EZminc examples" ON)
-  
+
 ENDIF(NOT MINC2_EXTERNALLY_CONFIGURED)
 
 IF(MINC2_BUILD_V2 AND NOT MINC2_EXTERNALLY_CONFIGURED)
@@ -79,7 +79,7 @@ IF(MINC2_BUILD_V2 AND NOT MINC2_EXTERNAL
     FIND_PACKAGE(ZLIB REQUIRED)
     FIND_PACKAGE(HDF5 REQUIRED)
   ENDIF(USE_ITK_HDF5)
-  
+
   IF(ZLIB_FOUND)
     SET(HAVE_ZLIB 1)
   ELSE(ZLIB_FOUND)
@@ -91,7 +91,7 @@ IF(MINC2_BUILD_V2 AND NOT MINC2_EXTERNAL
 ENDIF(MINC2_BUILD_V2 AND NOT MINC2_EXTERNALLY_CONFIGURED)
 
 # add for building relocatable library
-IF(UNIX)
+IF(UNIX AND NOT CYGWIN)
   SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS}   -fPIC")
   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
 ENDIF(UNIX)
@@ -108,9 +108,9 @@ CHECK_FUNCTION_EXISTS(fork     HAVE_WORK
 CHECK_FUNCTION_EXISTS(vfork    HAVE_WORKING_VFORK)
 CHECK_FUNCTION_EXISTS(fdopen   HAVE_FDOPEN)
 CHECK_FUNCTION_EXISTS(strdup   HAVE_STRDUP)
-CHECK_FUNCTION_EXISTS(getpwnam HAVE_GETPWNAM) 
+CHECK_FUNCTION_EXISTS(getpwnam HAVE_GETPWNAM)
 CHECK_FUNCTION_EXISTS(select   HAVE_SELECT)
-CHECK_FUNCTION_EXISTS(strerror HAVE_STRERROR) 
+CHECK_FUNCTION_EXISTS(strerror HAVE_STRERROR)
 CHECK_FUNCTION_EXISTS(sysconf  HAVE_SYSCONF)
 CHECK_FUNCTION_EXISTS(system   HAVE_SYSTEM)
 
@@ -133,6 +133,7 @@ CHECK_INCLUDE_FILES(inttypes.h  HAVE_INT
 CHECK_INCLUDE_FILES(string.h    HAVE_STRING_H)
 CHECK_INCLUDE_FILES(strings.h   HAVE_STRINGS_H)
 CHECK_INCLUDE_FILES(pwd.h       HAVE_PWD_H)
+CHECK_INCLUDE_FILES(sys/time.h  HAVE_SYS_TIME_H)
 
 ADD_DEFINITIONS(-DHAVE_CONFIG_H)
 
@@ -140,7 +141,7 @@ ADD_DEFINITIONS(-DHAVE_CONFIG_H)
 SET(VERSION "${PACKAGE_VERSION}")
 
 IF(MINC2_BUILD_EZMINC)
-  set(MINC2_INCLUDE_DIRS_CONFIG    
+  set(MINC2_INCLUDE_DIRS_CONFIG
     ${CMAKE_CURRENT_SOURCE_DIR}/ezminc
   )
   INCLUDE_DIRECTORIES(
@@ -196,9 +197,9 @@ SET(minc1_LIB_SRCS
    )
 
 SET(minc1_HEADERS
-  libsrc/minc.h 
-  libsrc/ParseArgv.h 
-  libsrc/voxel_loop.h 
+  libsrc/minc.h
+  libsrc/ParseArgv.h
+  libsrc/voxel_loop.h
   libsrc/nd_loop.h
   libsrc/time_stamp.h
   libsrc/minc_compat.h
@@ -266,20 +267,20 @@ SET(volume_io_LIB_SRCS
 
 SET(volume_io_HEADERS
     volume_io/Include/volume_io/alloc.h
-    volume_io/Include/volume_io/arrays.h 
-    volume_io/Include/volume_io/basic.h 
-    volume_io/Include/volume_io/def_math.h 
-    volume_io/Include/volume_io/files.h 
-    volume_io/Include/volume_io/geom_structs.h 
-    volume_io/Include/volume_io/geometry.h 
-    volume_io/Include/internal_volume_io.h 
-    volume_io/Include/volume_io/multidim.h 
-    volume_io/Include/volume_io/progress.h 
-    volume_io/Include/volume_io/string_funcs.h 
-    volume_io/Include/volume_io/system_dependent.h 
-    volume_io/Include/volume_io/transforms.h 
-    volume_io/Include/volume_io/vol_io_prototypes.h 
-    volume_io/Include/volume_io/volume.h 
+    volume_io/Include/volume_io/arrays.h
+    volume_io/Include/volume_io/basic.h
+    volume_io/Include/volume_io/def_math.h
+    volume_io/Include/volume_io/files.h
+    volume_io/Include/volume_io/geom_structs.h
+    volume_io/Include/volume_io/geometry.h
+    volume_io/Include/internal_volume_io.h
+    volume_io/Include/volume_io/multidim.h
+    volume_io/Include/volume_io/progress.h
+    volume_io/Include/volume_io/string_funcs.h
+    volume_io/Include/volume_io/system_dependent.h
+    volume_io/Include/volume_io/transforms.h
+    volume_io/Include/volume_io/vol_io_prototypes.h
+    volume_io/Include/volume_io/volume.h
     volume_io/Include/volume_io/volume_cache.h
 )
 
@@ -299,7 +300,7 @@ IF(MINC2_BUILD_V2)
   SET(MINC2_LIBRARY minc2)
   SET(MINC2_LIBRARIES ${MINC2_LIBRARY} ${HDF5_LIBRARY} ${NETCDF_LIBRARY} ${ZLIB_LIBRARY}  m )
   SET(VOLUME_IO_LIBRARY volume_io2)
-  
+
 ELSE(MINC2_BUILD_V2)
   SET(minc_LIB_SRCS ${minc1_LIB_SRCS} )
   SET(minc_HEADERS ${minc1_HEADERS} ${minc2_HEADERS})
@@ -317,10 +318,10 @@ SET_TARGET_PROPERTIES(${VOLUME_IO_LIBRAR
 
 ADD_DEPENDENCIES(${VOLUME_IO_LIBRARY} ${MINC2_LIBRARY})
 
-INSTALL(TARGETS ${MINC2_LIBRARY}     ${LIBRARY_INSTALL} DESTINATION lib)
-INSTALL(TARGETS ${VOLUME_IO_LIBRARY} ${LIBRARY_INSTALL} DESTINATION lib)
-INSTALL(FILES   ${minc_HEADERS}      DESTINATION  include  )
-INSTALL(FILES   ${volume_io_HEADERS} DESTINATION include/volume_io)
+INSTALL(TARGETS ${MINC2_LIBRARY}     RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+INSTALL(TARGETS ${VOLUME_IO_LIBRARY} RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+INSTALL(FILES   ${minc_HEADERS}      DESTINATION include/libminc  )
+INSTALL(FILES   ${volume_io_HEADERS} DESTINATION include/libminc/volume_io)
 
 IF(MINC2_BUILD_TOOLS)
   ADD_SUBDIRECTORY( progs )
@@ -373,7 +374,7 @@ configure_file(UseMINC2.cmake.in
 
 # config for install dir
 set(MINC2_USE_FILE_CONFIG "${CMAKE_INSTALL_PREFIX}/lib/UseMINC2.cmake")
-set(MINC2_INCLUDE_DIRS_CONFIG ${CMAKE_INSTALL_PREFIX}/include )
+set(MINC2_INCLUDE_DIRS_CONFIG ${CMAKE_INSTALL_PREFIX}/include/libminc )
 set(MINC2_LIBRARY_DIRS_CONFIG ${CMAKE_INSTALL_PREFIX}/lib)
 
 #fix for superbuild install
@@ -383,13 +384,13 @@ IF(SUPERBUILD_STAGING_PREFIX)
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" MINC2_LIBRARY_DIRS_CONFIG "${MINC2_LIBRARY_DIRS_CONFIG}")
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" MINC2_LIBRARIES_CONFIG    "${MINC2_LIBRARIES_CONFIG}")
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" EZMINC_LIBRARIES          "${EZMINC_LIBRARIES}")
-  
+
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" NETCDF_INCLUDE_DIR "${NETCDF_INCLUDE_DIR}")
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" HDF5_INCLUDE_DIR   "${HDF5_INCLUDE_DIR}")
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" NETCDF_LIBRARY     "${NETCDF_LIBRARY}")
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" HDF5_LIBRARY       "${HDF5_LIBRARY}")
   STRING(REPLACE "${SUPERBUILD_STAGING_PREFIX}/" "" ZLIB_LIBRARIES     "${ZLIB_LIBRARIES}")
-  
+
 ENDIF(SUPERBUILD_STAGING_PREFIX)
 
 configure_file(MINC2Config.cmake.in
@@ -399,9 +400,9 @@ configure_file(UseMINC2.cmake.in
   ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/UseMINC2.cmake @ONLY)
 
 INSTALL(FILES
-   ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/UseMINC2.cmake 
+   ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/UseMINC2.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/MINC2Config.cmake
-  DESTINATION lib
+  DESTINATION lib/cmake/libminc
   COMPONENT Development)
 
 # testing
--- origsrc/libminc-release-2.2.00/ezminc/CMakeLists.txt	2012-09-25 02:35:36.000000000 +0900
+++ src/libminc-release-2.2.00/ezminc/CMakeLists.txt	2015-03-26 06:52:03.849283700 +0900
@@ -4,33 +4,34 @@ IF(MINC2_BUILD_V2)
 ENDIF(MINC2_BUILD_V2)
 
 
-SET( MINC_IO_HEADERS 
-    minc_io_exceptions.h 
-    minc_io_fixed_vector.h  
+SET( MINC_IO_HEADERS
+    minc_io_exceptions.h
+    minc_io_fixed_vector.h
     minc_io_simple_volume.h
     minc_1_rw.h
     minc_1_simple.h
     minc_1_simple_rw.h
     minc_io_4d_volume.h
    )
-   
-SET( MINC_IO_SRC 
+
+SET( MINC_IO_SRC
     minc_1_rw.cpp
     minc_1_simple_rw.cpp
   )
 
-
 ADD_LIBRARY( minc_io ${LIBRARY_TYPE} ${MINC_IO_HEADERS} ${MINC_IO_SRC})
 TARGET_LINK_LIBRARIES(minc_io ${MINC2_LIBRARIES})
 
-INSTALL(TARGETS minc_io ${LIBRARY_INSTALL} DESTINATION lib)
-INSTALL(FILES  ${MINC_IO_HEADERS} DESTINATION include)
+SET_TARGET_PROPERTIES(minc_io PROPERTIES VERSION ${PACKAGE_VERSION} SOVERSION ${MINC2_PACKAGE_VERSION_MAJOR})
+
+INSTALL(TARGETS minc_io RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+INSTALL(FILES ${MINC_IO_HEADERS} DESTINATION include/libminc)
 
 
 IF(MINC2_BUILD_EZMINC_EXAMPLES)
-  ADD_SUBDIRECTORY(examples)  
+  ADD_SUBDIRECTORY(examples)
 ENDIF(MINC2_BUILD_EZMINC_EXAMPLES)
 
 IF(BUILD_TESTING)
   ADD_SUBDIRECTORY(tests)
-ENDIF(BUILD_TESTING)
\ No newline at end of file
+ENDIF(BUILD_TESTING)
