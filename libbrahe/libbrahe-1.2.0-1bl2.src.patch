--- origsrc/libbrahe-1.2.0/Makefile.am	2009-11-18 14:34:41.000000000 +0900
+++ src/libbrahe-1.2.0/Makefile.am	2010-11-30 09:16:50.724115500 +0900
@@ -1,4 +1,4 @@
-ACLOCAL_AMFLAGS = -I m4
+#ACLOCAL_AMFLAGS = -I m4
 
 if HAVE_DOXYGEN
 DOC_DIR = docs
@@ -6,6 +6,6 @@ else
 DOC_DIR =
 endif
 
-SUBDIRS = src test $(DOC_DIR)
+SUBDIRS = src test #$(DOC_DIR)
 EXTRA_DIST = LICENSE.GPL LICENSE.POLICY LICENSE.NON-FREE reconf
 
--- origsrc/libbrahe-1.2.0/configure.ac	2009-11-18 09:33:37.000000000 +0900
+++ src/libbrahe-1.2.0/configure.ac	2010-11-30 09:16:50.734129900 +0900
@@ -27,7 +27,7 @@ AM_INIT_AUTOMAKE($PACKAGE, $VERSION, [no
 
 AC_PROG_CC
 AC_PROG_INSTALL
-AM_PROG_LIBTOOL
+LT_INIT(win32-dll)
 AM_SANITY_CHECK
 AC_HEADER_STDC
 AC_HEADER_STDBOOL
--- origsrc/libbrahe-1.2.0/src/Makefile.am	2009-11-18 01:34:15.000000000 +0900
+++ src/libbrahe-1.2.0/src/Makefile.am	2010-11-30 09:16:50.744144300 +0900
@@ -7,7 +7,7 @@ c_sources = trig.c rounding.c gcflcm.c p
 lib_LTLIBRARIES = libbrahe.la
 
 libbrahe_la_SOURCES = $(h_sources) $(c_sources)
-libbrahe_la_LDFLAGS= -version-info $(GENERIC_LIBRARY_VERSION) -release $(GENERIC_RELEASE)
+libbrahe_la_LDFLAGS= -version-info $(GENERIC_LIBRARY_VERSION) -release $(GENERIC_RELEASE) -no-undefined
 
 library_includedir=$(includedir)/$(GENERIC_LIBRARY_NAME)
 library_include_HEADERS = $(h_sources)
--- origsrc/libbrahe-1.2.0/src/mathtools.h	2009-11-18 09:48:28.000000000 +0900
+++ src/libbrahe-1.2.0/src/mathtools.h	2010-11-30 09:17:51.721825900 +0900
@@ -146,7 +146,7 @@ int brahe_sizepow2(const int n);
     \param distance number elements to average before and after an element in <i>data</i>
     \return an allocated <i>n</i>-length array containing the moving average of corresponding elements in <i>data</i>
 */
-double * brahe_moving_average(const double const * data, const int n, const int distance);
+double * brahe_moving_average(const double * data, const int n, const int distance);
 
 //-----------------------------------------------------------------------------
 // Digital Signal Processing
@@ -161,7 +161,7 @@ double * brahe_moving_average(const doub
      /param n length of data
      /return an allocated array containing the real FFT of data
 */
-double * brahe_simple_fft(const double const * data, const int n);
+double * brahe_simple_fft(const double * data, const int n);
 
 // Simple real-to-real fft (power of 2 length)
 /*!
@@ -172,7 +172,7 @@ double * brahe_simple_fft(const double c
      /param n length of data
      /return an allocated array containing the real FFT of data
 */
-double * brahe_simple_fft2(const double const * data, const int n);
+double * brahe_simple_fft2(const double * data, const int n);
     
 // Sine wave definition
 /*!
@@ -195,7 +195,7 @@ brahe_wave_factor_t;
     \param factor_n number of elements in factors
     \param array_n number of elements in the output array
 */
-double * brahe_make_sinusoid(const brahe_wave_factor_t const * factors, const int factor_n, const int array_n);
+double * brahe_make_sinusoid(const brahe_wave_factor_t * factors, const int factor_n, const int array_n);
 
 //-----------------------------------------------------------------------------
 // Trigonometry
--- origsrc/libbrahe-1.2.0/test/Makefile.am	2009-11-18 02:26:52.000000000 +0900
+++ src/libbrahe-1.2.0/test/Makefile.am	2010-11-30 09:16:50.744144300 +0900
@@ -8,3 +8,5 @@ brahe_test_fft_SOURCES = brahe_test_fft.
 
 LIBS = -L../src -lbrahe -lm -lrt
 AM_CFLAGS = -std=gnu99 -pedantic -Wall -Wno-format
+
+TESTS = $(bin_PROGRAMS)
