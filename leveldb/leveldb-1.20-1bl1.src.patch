--- origsrc/leveldb-1.20/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ src/leveldb-1.20/Makefile.am	2018-01-06 14:38:09.594187100 +0900
@@ -0,0 +1,159 @@
+
+AM_CXXFLAGS = -std=gnu++11 -fno-builtin-memcmp -msse4.2
+AM_CPPFLAGS = -I$(top_srcdir)/include -DOS_LINUX -DCYGWIN -DLEVELDB_PLATFORM_POSIX -DLEVELDB_ATOMIC_PRESENT -DSNAPPY -DNDEBUG -DLEVELDB_PLATFORM_POSIX_SSE
+
+pkginclude_HEADERS = \
+include/leveldb/c.h \
+include/leveldb/cache.h \
+include/leveldb/comparator.h \
+include/leveldb/db.h \
+include/leveldb/dumpfile.h \
+include/leveldb/env.h \
+include/leveldb/filter_policy.h \
+include/leveldb/iterator.h \
+include/leveldb/options.h \
+include/leveldb/slice.h \
+include/leveldb/status.h \
+include/leveldb/table.h \
+include/leveldb/table_builder.h \
+include/leveldb/write_batch.h
+
+lib_LTLIBRARIES = libleveldb.la
+libleveldb_la_SOURCES = \
+db/builder.cc \
+db/c.cc \
+db/db_bench.cc \
+db/db_impl.cc \
+db/db_iter.cc \
+db/dbformat.cc \
+db/dumpfile.cc \
+db/filename.cc \
+db/log_reader.cc \
+db/log_writer.cc \
+db/memtable.cc \
+db/repair.cc \
+db/table_cache.cc \
+db/version_edit.cc \
+db/version_set.cc \
+db/write_batch.cc \
+helpers/memenv/memenv.cc \
+port/port_posix.cc \
+port/port_posix_sse.cc \
+table/block.cc \
+table/block_builder.cc \
+table/filter_block.cc \
+table/format.cc \
+table/iterator.cc \
+table/merger.cc \
+table/table.cc \
+table/table_builder.cc \
+table/two_level_iterator.cc \
+util/arena.cc \
+util/bloom.cc \
+util/cache.cc \
+util/coding.cc \
+util/comparator.cc \
+util/crc32c.cc \
+util/env.cc \
+util/env_posix.cc \
+util/filter_policy.cc \
+util/hash.cc \
+util/histogram.cc \
+util/logging.cc \
+util/options.cc \
+util/status.cc \
+util/testharness.cc \
+util/testutil.cc
+libleveldb_la_LDFLAGS = -no-undefined -version-info 1
+libleveldb_la_LIBADD = $(SNAPPY_LIBS) $(SQLITE3_LIBS) $(TCMALLOC_LIBS)
+
+LDADD = libleveldb.la
+
+bin_PROGRAMS = \
+db/leveldbutil
+db_leveldbutil_SOURCES = db/leveldbutil.cc
+
+check_PROGRAMS = \
+db/autocompact_test \
+db/c_test \
+db/corruption_test \
+db/db_test \
+db/dbformat_test \
+db/fault_injection_test \
+db/filename_test \
+db/log_test \
+db/recovery_test \
+db/skiplist_test \
+db/version_edit_test \
+db/version_set_test \
+db/write_batch_test \
+helpers/memenv/memenv_test \
+issues/issue178_test \
+issues/issue200_test \
+table/filter_block_test \
+table/table_test \
+util/arena_test \
+util/bloom_test \
+util/cache_test \
+util/coding_test \
+util/crc32c_test \
+util/env_posix_test \
+util/env_test \
+util/hash_test
+TESTS = $(check_PROGRAMS)
+
+db_autocompact_test_SOURCES = db/autocompact_test.cc
+db_autocompact_test_LDADD = libleveldb.la
+db_c_test_SOURCES = db/c_test.c
+db_c_test_LDADD = libleveldb.la
+db_corruption_test_SOURCES = db/corruption_test.cc
+db_corruption_test_LDADD = libleveldb.la
+db_db_test_SOURCES = db/db_test.cc
+db_db_test_LDADD = libleveldb.la
+db_dbformat_test_SOURCES = db/dbformat_test.cc
+db_dbformat_test_LDADD = libleveldb.la
+db_fault_injection_test_SOURCES = db/fault_injection_test.cc
+db_fault_injection_test_LDADD = libleveldb.la
+db_filename_test_SOURCES = db/filename_test.cc
+db_filename_test_LDADD = libleveldb.la
+db_log_test_SOURCES = db/log_test.cc
+db_log_test_LDADD = libleveldb.la
+db_recovery_test_SOURCES = db/recovery_test.cc
+db_recovery_test_LDADD = libleveldb.la
+db_skiplist_test_SOURCES = db/skiplist_test.cc
+db_skiplist_test_LDADD = libleveldb.la
+db_version_edit_test_SOURCES = db/version_edit_test.cc
+db_version_edit_test_LDADD = libleveldb.la
+db_version_set_test_SOURCES = db/version_set_test.cc
+db_version_set_test_LDADD = libleveldb.la
+db_write_batch_test_SOURCES = db/write_batch_test.cc
+db_write_batch_test_LDADD = libleveldb.la
+helpers_memenv_memenv_test_SOURCES = helpers/memenv/memenv_test.cc
+helpers_memenv_memenv_test_LDADD = libleveldb.la
+issues_issue178_test_SOURCES = issues/issue178_test.cc
+issues_issue178_test_LDADD = libleveldb.la
+issues_issue200_test_SOURCES = issues/issue200_test.cc
+issues_issue200_test_LDADD = libleveldb.la
+table_filter_block_test_SOURCES = table/filter_block_test.cc
+table_filter_block_test_LDADD = libleveldb.la
+table_table_test_SOURCES = table/table_test.cc
+table_table_test_LDADD = libleveldb.la
+util_arena_test_SOURCES = util/arena_test.cc
+util_arena_test_LDADD = libleveldb.la
+util_bloom_test_SOURCES = util/bloom_test.cc
+util_bloom_test_LDADD = libleveldb.la
+util_cache_test_SOURCES = util/cache_test.cc
+util_cache_test_LDADD = libleveldb.la
+util_coding_test_SOURCES = util/coding_test.cc
+util_coding_test_LDADD = libleveldb.la
+util_crc32c_test_SOURCES = util/crc32c_test.cc
+util_crc32c_test_LDADD = libleveldb.la
+util_env_posix_test_SOURCES = util/env_posix_test.cc
+util_env_posix_test_LDADD = libleveldb.la
+util_env_test_SOURCES = util/env_test.cc
+util_env_test_LDADD = libleveldb.la
+util_hash_test_SOURCES = util/hash_test.cc
+util_hash_test_LDADD = libleveldb.la
+
+pkgconfigdir = $(libdir)/pkgconfig
+pkgconfig_DATA = $(PACKAGE).pc
--- origsrc/leveldb-1.20/build_detect_platform	2018-01-06 00:00:30.691007300 +0900
+++ src/leveldb-1.20/build_detect_platform	2018-01-06 00:08:03.816000000 +0900
@@ -189,15 +189,15 @@ if [ "$CROSS_COMPILE" = "true" ]; then
 else
     CXXOUTPUT="${TMPDIR}/leveldb_build_detect_platform-cxx.$$"
 
-    # If -std=c++0x works, use <atomic> as fallback for when memory barriers
+    # If -std=gnu++11 works, use <atomic> as fallback for when memory barriers
     # are not available.
-    $CXX $CXXFLAGS -std=c++0x -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
+    $CXX $CXXFLAGS -std=gnu++11 -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
       #include <atomic>
       int main() {}
 EOF
     if [ "$?" = 0 ]; then
         COMMON_FLAGS="$COMMON_FLAGS -DLEVELDB_PLATFORM_POSIX -DLEVELDB_ATOMIC_PRESENT"
-        PLATFORM_CXXFLAGS="-std=c++0x"
+        PLATFORM_CXXFLAGS="-std=gnu++11"
     else
         COMMON_FLAGS="$COMMON_FLAGS -DLEVELDB_PLATFORM_POSIX"
     fi
--- origsrc/leveldb-1.20/configure.ac	1970-01-01 09:00:00.000000000 +0900
+++ src/leveldb-1.20/configure.ac	2018-01-06 14:38:09.594187100 +0900
@@ -0,0 +1,46 @@
+#                                               -*- Autoconf -*-
+# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.69])
+AC_INIT([leveldb], [1.20])
+AC_CONFIG_SRCDIR([db/autocompact_test.cc])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE([subdir-objects])
+
+# Checks for programs.
+AC_PROG_CXX
+AC_PROG_CC
+AC_PROG_LN_S
+LT_INIT
+
+# Checks for libraries.
+PKG_CHECK_MODULES([SNAPPY], [snappy])
+PKG_CHECK_MODULES([SQLITE3], [sqlite3])
+PKG_CHECK_MODULES([TCMALLOC], [libtcmalloc])
+
+# Checks for header files.
+AC_CHECK_HEADERS([fcntl.h stddef.h stdint.h stdlib.h string.h sys/time.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_CHECK_HEADER_STDBOOL
+AC_C_INLINE
+AC_TYPE_INT16_T
+AC_TYPE_INT32_T
+AC_TYPE_INT64_T
+AC_TYPE_INT8_T
+AC_TYPE_OFF_T
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
+AC_TYPE_UINT8_T
+
+# Checks for library functions.
+AC_FUNC_ERROR_AT_LINE
+AC_FUNC_MALLOC
+AC_FUNC_MMAP
+AC_CHECK_FUNCS([fdatasync gettimeofday localtime_r memset mkdir munmap rmdir sqrt strchr strdup strerror strrchr strstr strtoull])
+
+AC_CONFIG_FILES([leveldb.pc Makefile])
+AC_OUTPUT
--- origsrc/leveldb-1.20/leveldb.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/leveldb-1.20/leveldb.pc.in	2018-01-06 14:38:09.546737300 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: leveldb
+Description: Fast and lightweight key/value database library by Google
+Version: @VERSION@
+Libs: -L${libdir} -lleveldb
+Cflags: -I${includedir}
