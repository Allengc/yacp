diff -buprN -x CYGWIN-PATCHES -x aclocal.m4~ -x aclocal.m4t -x autom4te.cache -x config.cache -x config.guess -x config.log -x config.status -x config.sub -x '*SlackBuild*' -x '*.egg-info' -x '*.dll' -x '*.exe' -x '*.o' -x '*.gch' -x '*.gem' -x .gitignore -x '*.jpg' -x '*.png' -x '*.qm' -x '*.svgz' -x '*.tif' -x '*.class' -x '*.jlc' -x '*.pyc' -x '*.pyo' -x '*.mo' -x '*.gmo' -x '*.orig' -x '*.rej' -x '*.spec' -x '*.temp' -x '*~' -x '*.stackdump' -x x86_64-pc-cygwin -x omf.make -x xmldocs.make -x gnome-doc-utils.make -x gnome-doc-utils.m4 -x mate-doc-utils.make -x mate-doc-utils.m4 -x snappystreamcfg.hpp origsrc/snappystream-0.2.8/CMakeLists.txt src/snappystream-0.2.8/CMakeLists.txt
--- origsrc/snappystream-0.2.8/CMakeLists.txt	2018-01-24 04:22:42.000000000 +0900
+++ src/snappystream-0.2.8/CMakeLists.txt	2018-04-16 19:06:52.163000200 +0900
@@ -89,8 +89,14 @@ set(SRC ./include/osnappystream.hpp
         ./include/snappystreamcfg.hpp
         ./src/snappystreamcfg.cpp
         ./src/endians.hpp)
+if (CYGWIN)
+	add_library(${PROJECT_NAME} SHARED "${SRC}")
+	target_link_libraries(${PROJECT_NAME} ${SNAPPY_LIBRARIES})
+	set_target_properties(${PROJECT_NAME} PROPERTIES SOVERSION 0)
+else()
 nx_add_library(${PROJECT_NAME} ${SNSTRM_FORCE_SHARED_CRT} ${BUILD_STATIC_LIBS}
 	${BUILD_SHARED_LIBS} "SNSTRM_SHARED" "ver" "${SRC}")
+endif()
 
 ###########################################################################
 # gprof
@@ -128,9 +134,13 @@ if (WITH_BOOST_IOSTREAMS)
 		./include/InputSnappyStreamBoostFilter.hpp)
 endif()
 
-install(FILES ${SN_FILES} DESTINATION include)
-install_targets(/lib  snappystream)
-
+if (CYGWIN)
+	install(FILES ${SN_FILES} DESTINATION "include/${PROJECT_NAME}")
+	install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+else()
+	install(FILES ${SN_FILES} DESTINATION include)
+	install_targets(/lib  snappystream)
+endif()
 
 ###########################################################################
 # snap
@@ -138,10 +148,20 @@ install_targets(/lib  snappystream)
 if(NOT WITHOUT_SNAP)
 	add_executable(snap ./misc/snap.cpp)
 	target_link_libraries(snap snappystream ${LIBRARIES})
+	install(TARGETS snap DESTINATION bin)
 endif()
 
 if(WITH_CRC32C)
 	add_executable(crc32c ./misc/calc-crc32c.cpp)
 	target_link_libraries(crc32c snappystream ${LIBRARIES})
+	include_directories("${PROJECT_SOURCE_DIR}/src")
+	install(TARGETS crc32c DESTINATION bin)
 endif()
 
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+SET(VERSION "${SNSTRM_VERSION_MAJOR}.${SNSTRM_VERSION_MINOR}.${SNSTRM_VERSION_PATCH}")
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/snappystream.pc.in ${CMAKE_BINARY_DIR}/snappystream.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/snappystream.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
diff -buprN -x CYGWIN-PATCHES -x aclocal.m4~ -x aclocal.m4t -x autom4te.cache -x config.cache -x config.guess -x config.log -x config.status -x config.sub -x '*SlackBuild*' -x '*.egg-info' -x '*.dll' -x '*.exe' -x '*.o' -x '*.gch' -x '*.gem' -x .gitignore -x '*.jpg' -x '*.png' -x '*.qm' -x '*.svgz' -x '*.tif' -x '*.class' -x '*.jlc' -x '*.pyc' -x '*.pyo' -x '*.mo' -x '*.gmo' -x '*.orig' -x '*.rej' -x '*.spec' -x '*.temp' -x '*~' -x '*.stackdump' -x x86_64-pc-cygwin -x omf.make -x xmldocs.make -x gnome-doc-utils.make -x gnome-doc-utils.m4 -x mate-doc-utils.make -x mate-doc-utils.m4 -x snappystreamcfg.hpp origsrc/snappystream-0.2.8/snappystream.pc.in src/snappystream-0.2.8/snappystream.pc.in
--- origsrc/snappystream-0.2.8/snappystream.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/snappystream-0.2.8/snappystream.pc.in	2018-04-16 18:41:02.425592600 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: snappystream
+Description: C++ snappy stream realisation
+Version: @VERSION@
+Libs: -L${libdir} -lsnappystream
+Cflags: -I${includedir}/snappystream
diff -buprN -x CYGWIN-PATCHES -x aclocal.m4~ -x aclocal.m4t -x autom4te.cache -x config.cache -x config.guess -x config.log -x config.status -x config.sub -x '*SlackBuild*' -x '*.egg-info' -x '*.dll' -x '*.exe' -x '*.o' -x '*.gch' -x '*.gem' -x .gitignore -x '*.jpg' -x '*.png' -x '*.qm' -x '*.svgz' -x '*.tif' -x '*.class' -x '*.jlc' -x '*.pyc' -x '*.pyo' -x '*.mo' -x '*.gmo' -x '*.orig' -x '*.rej' -x '*.spec' -x '*.temp' -x '*~' -x '*.stackdump' -x x86_64-pc-cygwin -x omf.make -x xmldocs.make -x gnome-doc-utils.make -x gnome-doc-utils.m4 -x mate-doc-utils.make -x mate-doc-utils.m4 -x snappystreamcfg.hpp origsrc/snappystream-0.2.8/test/CMakeLists.txt src/snappystream-0.2.8/test/CMakeLists.txt
--- origsrc/snappystream-0.2.8/test/CMakeLists.txt	2018-01-24 04:22:42.000000000 +0900
+++ src/snappystream-0.2.8/test/CMakeLists.txt	2018-04-16 19:03:41.813000000 +0900
@@ -1,10 +1,21 @@
 # @author hoxnox <hoxnox@gmail.com>
 # @date 20170404 18:08:36
 
-include(gtest)
-add_executable(test_unit_${PROJECT_NAME} test.cpp)
-add_dependencies(test_unit_${PROJECT_NAME} gtestlib snappystream)
-target_link_libraries(test_unit_${PROJECT_NAME} snappystream ${LIBRARIES} ${GTEST_LIBRARIES})
-target_include_directories(test_unit_${PROJECT_NAME} BEFORE PRIVATE "${GTEST_INCLUDE_DIRS}")
-target_include_directories(test_unit_${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/src")
+option(USE_SYSTEM_GTEST "use system gtest" ON)
+if(USE_SYSTEM_GTEST)
+    add_executable(test_unit_${PROJECT_NAME} test.cpp)
+    add_dependencies(test_unit_${PROJECT_NAME} snappystream)
+    target_link_libraries(test_unit_${PROJECT_NAME} snappystream ${LIBRARIES} gtest)
+    target_include_directories(test_unit_${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/src")
+else()
+    include(gtest)
+    add_executable(test_unit_${PROJECT_NAME} test.cpp)
+    add_dependencies(test_unit_${PROJECT_NAME} gtestlib snappystream)
+    target_link_libraries(test_unit_${PROJECT_NAME} snappystream ${LIBRARIES} ${GTEST_LIBRARIES})
+    target_include_directories(test_unit_${PROJECT_NAME} BEFORE PRIVATE "${GTEST_INCLUDE_DIRS}")
+    target_include_directories(test_unit_${PROJECT_NAME} PRIVATE "${PROJECT_SOURCE_DIR}/src")
+endif()
 
+if(CYGWIN)
+    target_compile_options(test_unit_${PROJECT_NAME} PRIVATE "-Wno-narrowing")
+endif()
