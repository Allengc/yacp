--- origsrc/SuperLU_4.1/Makefile.am	2011-05-11 01:50:22.197601000 +0900
+++ src/SuperLU_4.1/Makefile.am	2011-05-11 01:50:33.283541800 +0900
@@ -1,4 +1,4 @@
-SUBDIRS = SRC
+SUBDIRS = SRC TESTING
 
 pkgconfigdir = $(libdir)/pkgconfig
 pkgconfig_DATA = superlu.pc
--- origsrc/SuperLU_4.1/TESTING/MATGEN/clatm1.c	1970-01-01 09:00:00.000000000 +0900
+++ src/SuperLU_4.1/TESTING/MATGEN/clatm1.c	2011-05-11 01:50:33.293556200 +0900
@@ -0,0 +1,302 @@
+#include "f2c.h"
+
+/* Table of constant values */
+
+static integer c__3 = 3;
+
+/* Subroutine */ int clatm1_(integer *mode, real *cond, integer *irsign, 
+	integer *idist, integer *iseed, complex *d__, integer *n, integer *
+	info)
+{
+    /* System generated locals */
+    integer i__1, i__2, i__3;
+    real r__1;
+    doublereal d__1, d__2;
+    complex q__1, q__2;
+
+    /* Builtin functions */
+    double pow_dd(doublereal *, doublereal *), pow_ri(real *, integer *), log(
+	    doublereal), exp(doublereal), c_abs(complex *);
+
+    /* Local variables */
+    integer i__;
+    real temp, alpha;
+    complex ctemp;
+    extern /* Complex */ VOID clarnd_(complex *, integer *, integer *);
+    extern /* Subroutine */ int xerbla_(char *, integer *);
+    extern doublereal slaran_(integer *);
+    extern /* Subroutine */ int clarnv_(integer *, integer *, integer *, 
+	    complex *);
+
+
+/*  -- LAPACK auxiliary test routine (version 3.1) -- */
+/*     Univ. of Tennessee, Univ. of California Berkeley and NAG Ltd.. */
+/*     November 2006 */
+
+/*     .. Scalar Arguments .. */
+/*     .. */
+/*     .. Array Arguments .. */
+/*     .. */
+
+/*  Purpose */
+/*  ======= */
+
+/*     CLATM1 computes the entries of D(1..N) as specified by */
+/*     MODE, COND and IRSIGN. IDIST and ISEED determine the generation */
+/*     of random numbers. CLATM1 is called by CLATMR to generate */
+/*     random test matrices for LAPACK programs. */
+
+/*  Arguments */
+/*  ========= */
+
+/*  MODE   - INTEGER */
+/*           On entry describes how D is to be computed: */
+/*           MODE = 0 means do not change D. */
+/*           MODE = 1 sets D(1)=1 and D(2:N)=1.0/COND */
+/*           MODE = 2 sets D(1:N-1)=1 and D(N)=1.0/COND */
+/*           MODE = 3 sets D(I)=COND**(-(I-1)/(N-1)) */
+/*           MODE = 4 sets D(i)=1 - (i-1)/(N-1)*(1 - 1/COND) */
+/*           MODE = 5 sets D to random numbers in the range */
+/*                    ( 1/COND , 1 ) such that their logarithms */
+/*                    are uniformly distributed. */
+/*           MODE = 6 set D to random numbers from same distribution */
+/*                    as the rest of the matrix. */
+/*           MODE < 0 has the same meaning as ABS(MODE), except that */
+/*              the order of the elements of D is reversed. */
+/*           Thus if MODE is positive, D has entries ranging from */
+/*              1 to 1/COND, if negative, from 1/COND to 1, */
+/*           Not modified. */
+
+/*  COND   - REAL */
+/*           On entry, used as described under MODE above. */
+/*           If used, it must be >= 1. Not modified. */
+
+/*  IRSIGN - INTEGER */
+/*           On entry, if MODE neither -6, 0 nor 6, determines sign of */
+/*           entries of D */
+/*           0 => leave entries of D unchanged */
+/*           1 => multiply each entry of D by random complex number */
+/*                uniformly distributed with absolute value 1 */
+
+/*  IDIST  - CHARACTER*1 */
+/*           On entry, IDIST specifies the type of distribution to be */
+/*           used to generate a random matrix . */
+/*           1 => real and imaginary parts each UNIFORM( 0, 1 ) */
+/*           2 => real and imaginary parts each UNIFORM( -1, 1 ) */
+/*           3 => real and imaginary parts each NORMAL( 0, 1 ) */
+/*           4 => complex number uniform in DISK( 0, 1 ) */
+/*           Not modified. */
+
+/*  ISEED  - INTEGER array, dimension ( 4 ) */
+/*           On entry ISEED specifies the seed of the random number */
+/*           generator. The random number generator uses a */
+/*           linear congruential sequence limited to small */
+/*           integers, and so should produce machine independent */
+/*           random numbers. The values of ISEED are changed on */
+/*           exit, and can be used in the next call to CLATM1 */
+/*           to continue the same random number sequence. */
+/*           Changed on exit. */
+
+/*  D      - COMPLEX array, dimension ( MIN( M , N ) ) */
+/*           Array to be computed according to MODE, COND and IRSIGN. */
+/*           May be changed on exit if MODE is nonzero. */
+
+/*  N      - INTEGER */
+/*           Number of entries of D. Not modified. */
+
+/*  INFO   - INTEGER */
+/*            0  => normal termination */
+/*           -1  => if MODE not in range -6 to 6 */
+/*           -2  => if MODE neither -6, 0 nor 6, and */
+/*                  IRSIGN neither 0 nor 1 */
+/*           -3  => if MODE neither -6, 0 nor 6 and COND less than 1 */
+/*           -4  => if MODE equals 6 or -6 and IDIST not in range 1 to 4 */
+/*           -7  => if N negative */
+
+/*  ===================================================================== */
+
+/*     .. Parameters .. */
+/*     .. */
+/*     .. Local Scalars .. */
+/*     .. */
+/*     .. External Functions .. */
+/*     .. */
+/*     .. External Subroutines .. */
+/*     .. */
+/*     .. Intrinsic Functions .. */
+/*     .. */
+/*     .. Executable Statements .. */
+
+/*     Decode and Test the input parameters. Initialize flags & seed. */
+
+    /* Parameter adjustments */
+    --d__;
+    --iseed;
+
+    /* Function Body */
+    *info = 0;
+
+/*     Quick return if possible */
+
+    if (*n == 0) {
+	return 0;
+    }
+
+/*     Set INFO if an error */
+
+    if (*mode < -6 || *mode > 6) {
+	*info = -1;
+    } else if (*mode != -6 && *mode != 0 && *mode != 6 && (*irsign != 0 && *
+	    irsign != 1)) {
+	*info = -2;
+    } else if (*mode != -6 && *mode != 0 && *mode != 6 && *cond < 1.f) {
+	*info = -3;
+    } else if ((*mode == 6 || *mode == -6) && (*idist < 1 || *idist > 4)) {
+	*info = -4;
+    } else if (*n < 0) {
+	*info = -7;
+    }
+
+    if (*info != 0) {
+	i__1 = -(*info);
+	xerbla_("CLATM1", &i__1);
+	return 0;
+    }
+
+/*     Compute D according to COND and MODE */
+
+    if (*mode != 0) {
+	switch (abs(*mode)) {
+	    case 1:  goto L10;
+	    case 2:  goto L30;
+	    case 3:  goto L50;
+	    case 4:  goto L70;
+	    case 5:  goto L90;
+	    case 6:  goto L110;
+	}
+
+/*        One large D value: */
+
+L10:
+	i__1 = *n;
+	for (i__ = 1; i__ <= i__1; ++i__) {
+	    i__2 = i__;
+	    r__1 = 1.f / *cond;
+	    d__[i__2].r = r__1, d__[i__2].i = 0.f;
+/* L20: */
+	}
+	d__[1].r = 1.f, d__[1].i = 0.f;
+	goto L120;
+
+/*        One small D value: */
+
+L30:
+	i__1 = *n;
+	for (i__ = 1; i__ <= i__1; ++i__) {
+	    i__2 = i__;
+	    d__[i__2].r = 1.f, d__[i__2].i = 0.f;
+/* L40: */
+	}
+	i__1 = *n;
+	r__1 = 1.f / *cond;
+	d__[i__1].r = r__1, d__[i__1].i = 0.f;
+	goto L120;
+
+/*        Exponentially distributed D values: */
+
+L50:
+	d__[1].r = 1.f, d__[1].i = 0.f;
+	if (*n > 1) {
+	    d__1 = (doublereal) (*cond);
+	    d__2 = (doublereal) (-1.f / (real) (*n - 1));
+	    alpha = pow_dd(&d__1, &d__2);
+	    i__1 = *n;
+	    for (i__ = 2; i__ <= i__1; ++i__) {
+		i__2 = i__;
+		i__3 = i__ - 1;
+		r__1 = pow_ri(&alpha, &i__3);
+		d__[i__2].r = r__1, d__[i__2].i = 0.f;
+/* L60: */
+	    }
+	}
+	goto L120;
+
+/*        Arithmetically distributed D values: */
+
+L70:
+	d__[1].r = 1.f, d__[1].i = 0.f;
+	if (*n > 1) {
+	    temp = 1.f / *cond;
+	    alpha = (1.f - temp) / (real) (*n - 1);
+	    i__1 = *n;
+	    for (i__ = 2; i__ <= i__1; ++i__) {
+		i__2 = i__;
+		r__1 = (real) (*n - i__) * alpha + temp;
+		d__[i__2].r = r__1, d__[i__2].i = 0.f;
+/* L80: */
+	    }
+	}
+	goto L120;
+
+/*        Randomly distributed D values on ( 1/COND , 1): */
+
+L90:
+	alpha = log(1.f / *cond);
+	i__1 = *n;
+	for (i__ = 1; i__ <= i__1; ++i__) {
+	    i__2 = i__;
+	    r__1 = exp(alpha * slaran_(&iseed[1]));
+	    d__[i__2].r = r__1, d__[i__2].i = 0.f;
+/* L100: */
+	}
+	goto L120;
+
+/*        Randomly distributed D values from IDIST */
+
+L110:
+	clarnv_(idist, &iseed[1], n, &d__[1]);
+
+L120:
+
+/*        If MODE neither -6 nor 0 nor 6, and IRSIGN = 1, assign */
+/*        random signs to D */
+
+	if (*mode != -6 && *mode != 0 && *mode != 6 && *irsign == 1) {
+	    i__1 = *n;
+	    for (i__ = 1; i__ <= i__1; ++i__) {
+		clarnd_(&q__1, &c__3, &iseed[1]);
+		ctemp.r = q__1.r, ctemp.i = q__1.i;
+		i__2 = i__;
+		i__3 = i__;
+		r__1 = c_abs(&ctemp);
+		q__2.r = ctemp.r / r__1, q__2.i = ctemp.i / r__1;
+		q__1.r = d__[i__3].r * q__2.r - d__[i__3].i * q__2.i, q__1.i =
+			 d__[i__3].r * q__2.i + d__[i__3].i * q__2.r;
+		d__[i__2].r = q__1.r, d__[i__2].i = q__1.i;
+/* L130: */
+	    }
+	}
+
+/*        Reverse if MODE < 0 */
+
+	if (*mode < 0) {
+	    i__1 = *n / 2;
+	    for (i__ = 1; i__ <= i__1; ++i__) {
+		i__2 = i__;
+		ctemp.r = d__[i__2].r, ctemp.i = d__[i__2].i;
+		i__2 = i__;
+		i__3 = *n + 1 - i__;
+		d__[i__2].r = d__[i__3].r, d__[i__2].i = d__[i__3].i;
+		i__2 = *n + 1 - i__;
+		d__[i__2].r = ctemp.r, d__[i__2].i = ctemp.i;
+/* L140: */
+	    }
+	}
+
+    }
+
+    return 0;
+
+/*     End of CLATM1 */
+
+} /* clatm1_ */
--- origsrc/SuperLU_4.1/TESTING/MATGEN/zlatm1.c	1970-01-01 09:00:00.000000000 +0900
+++ src/SuperLU_4.1/TESTING/MATGEN/zlatm1.c	2011-05-11 01:50:33.303570600 +0900
@@ -0,0 +1,301 @@
+#include "f2c.h"
+
+/* Table of constant values */
+
+static integer c__3 = 3;
+
+/* Subroutine */ int zlatm1_(integer *mode, doublereal *cond, integer *irsign, 
+	 integer *idist, integer *iseed, doublecomplex *d__, integer *n, 
+	integer *info)
+{
+    /* System generated locals */
+    integer i__1, i__2, i__3;
+    doublereal d__1;
+    doublecomplex z__1, z__2;
+
+    /* Builtin functions */
+    double pow_dd(doublereal *, doublereal *), pow_di(doublereal *, integer *)
+	    , log(doublereal), exp(doublereal), z_abs(doublecomplex *);
+
+    /* Local variables */
+    integer i__;
+    doublereal temp, alpha;
+    doublecomplex ctemp;
+    extern doublereal dlaran_(integer *);
+    extern /* Subroutine */ int xerbla_(char *, integer *);
+    extern /* Double Complex */ VOID zlarnd_(doublecomplex *, integer *, 
+	    integer *);
+    extern /* Subroutine */ int zlarnv_(integer *, integer *, integer *, 
+	    doublecomplex *);
+
+
+/*  -- LAPACK auxiliary test routine (version 3.1) -- */
+/*     Univ. of Tennessee, Univ. of California Berkeley and NAG Ltd.. */
+/*     November 2006 */
+
+/*     .. Scalar Arguments .. */
+/*     .. */
+/*     .. Array Arguments .. */
+/*     .. */
+
+/*  Purpose */
+/*  ======= */
+
+/*     ZLATM1 computes the entries of D(1..N) as specified by */
+/*     MODE, COND and IRSIGN. IDIST and ISEED determine the generation */
+/*     of random numbers. ZLATM1 is called by CLATMR to generate */
+/*     random test matrices for LAPACK programs. */
+
+/*  Arguments */
+/*  ========= */
+
+/*  MODE   - INTEGER */
+/*           On entry describes how D is to be computed: */
+/*           MODE = 0 means do not change D. */
+/*           MODE = 1 sets D(1)=1 and D(2:N)=1.0/COND */
+/*           MODE = 2 sets D(1:N-1)=1 and D(N)=1.0/COND */
+/*           MODE = 3 sets D(I)=COND**(-(I-1)/(N-1)) */
+/*           MODE = 4 sets D(i)=1 - (i-1)/(N-1)*(1 - 1/COND) */
+/*           MODE = 5 sets D to random numbers in the range */
+/*                    ( 1/COND , 1 ) such that their logarithms */
+/*                    are uniformly distributed. */
+/*           MODE = 6 set D to random numbers from same distribution */
+/*                    as the rest of the matrix. */
+/*           MODE < 0 has the same meaning as ABS(MODE), except that */
+/*              the order of the elements of D is reversed. */
+/*           Thus if MODE is positive, D has entries ranging from */
+/*              1 to 1/COND, if negative, from 1/COND to 1, */
+/*           Not modified. */
+
+/*  COND   - DOUBLE PRECISION */
+/*           On entry, used as described under MODE above. */
+/*           If used, it must be >= 1. Not modified. */
+
+/*  IRSIGN - INTEGER */
+/*           On entry, if MODE neither -6, 0 nor 6, determines sign of */
+/*           entries of D */
+/*           0 => leave entries of D unchanged */
+/*           1 => multiply each entry of D by random complex number */
+/*                uniformly distributed with absolute value 1 */
+
+/*  IDIST  - CHARACTER*1 */
+/*           On entry, IDIST specifies the type of distribution to be */
+/*           used to generate a random matrix . */
+/*           1 => real and imaginary parts each UNIFORM( 0, 1 ) */
+/*           2 => real and imaginary parts each UNIFORM( -1, 1 ) */
+/*           3 => real and imaginary parts each NORMAL( 0, 1 ) */
+/*           4 => complex number uniform in DISK( 0, 1 ) */
+/*           Not modified. */
+
+/*  ISEED  - INTEGER array, dimension ( 4 ) */
+/*           On entry ISEED specifies the seed of the random number */
+/*           generator. The random number generator uses a */
+/*           linear congruential sequence limited to small */
+/*           integers, and so should produce machine independent */
+/*           random numbers. The values of ISEED are changed on */
+/*           exit, and can be used in the next call to ZLATM1 */
+/*           to continue the same random number sequence. */
+/*           Changed on exit. */
+
+/*  D      - COMPLEX*16 array, dimension ( MIN( M , N ) ) */
+/*           Array to be computed according to MODE, COND and IRSIGN. */
+/*           May be changed on exit if MODE is nonzero. */
+
+/*  N      - INTEGER */
+/*           Number of entries of D. Not modified. */
+
+/*  INFO   - INTEGER */
+/*            0  => normal termination */
+/*           -1  => if MODE not in range -6 to 6 */
+/*           -2  => if MODE neither -6, 0 nor 6, and */
+/*                  IRSIGN neither 0 nor 1 */
+/*           -3  => if MODE neither -6, 0 nor 6 and COND less than 1 */
+/*           -4  => if MODE equals 6 or -6 and IDIST not in range 1 to 4 */
+/*           -7  => if N negative */
+
+/*  ===================================================================== */
+
+/*     .. Parameters .. */
+/*     .. */
+/*     .. Local Scalars .. */
+/*     .. */
+/*     .. External Functions .. */
+/*     .. */
+/*     .. External Subroutines .. */
+/*     .. */
+/*     .. Intrinsic Functions .. */
+/*     .. */
+/*     .. Executable Statements .. */
+
+/*     Decode and Test the input parameters. Initialize flags & seed. */
+
+    /* Parameter adjustments */
+    --d__;
+    --iseed;
+
+    /* Function Body */
+    *info = 0;
+
+/*     Quick return if possible */
+
+    if (*n == 0) {
+	return 0;
+    }
+
+/*     Set INFO if an error */
+
+    if (*mode < -6 || *mode > 6) {
+	*info = -1;
+    } else if (*mode != -6 && *mode != 0 && *mode != 6 && (*irsign != 0 && *
+	    irsign != 1)) {
+	*info = -2;
+    } else if (*mode != -6 && *mode != 0 && *mode != 6 && *cond < 1.) {
+	*info = -3;
+    } else if ((*mode == 6 || *mode == -6) && (*idist < 1 || *idist > 4)) {
+	*info = -4;
+    } else if (*n < 0) {
+	*info = -7;
+    }
+
+    if (*info != 0) {
+	i__1 = -(*info);
+	xerbla_("ZLATM1", &i__1);
+	return 0;
+    }
+
+/*     Compute D according to COND and MODE */
+
+    if (*mode != 0) {
+	switch (abs(*mode)) {
+	    case 1:  goto L10;
+	    case 2:  goto L30;
+	    case 3:  goto L50;
+	    case 4:  goto L70;
+	    case 5:  goto L90;
+	    case 6:  goto L110;
+	}
+
+/*        One large D value: */
+
+L10:
+	i__1 = *n;
+	for (i__ = 1; i__ <= i__1; ++i__) {
+	    i__2 = i__;
+	    d__1 = 1. / *cond;
+	    d__[i__2].r = d__1, d__[i__2].i = 0.;
+/* L20: */
+	}
+	d__[1].r = 1., d__[1].i = 0.;
+	goto L120;
+
+/*        One small D value: */
+
+L30:
+	i__1 = *n;
+	for (i__ = 1; i__ <= i__1; ++i__) {
+	    i__2 = i__;
+	    d__[i__2].r = 1., d__[i__2].i = 0.;
+/* L40: */
+	}
+	i__1 = *n;
+	d__1 = 1. / *cond;
+	d__[i__1].r = d__1, d__[i__1].i = 0.;
+	goto L120;
+
+/*        Exponentially distributed D values: */
+
+L50:
+	d__[1].r = 1., d__[1].i = 0.;
+	if (*n > 1) {
+	    d__1 = -1. / (doublereal) (*n - 1);
+	    alpha = pow_dd(cond, &d__1);
+	    i__1 = *n;
+	    for (i__ = 2; i__ <= i__1; ++i__) {
+		i__2 = i__;
+		i__3 = i__ - 1;
+		d__1 = pow_di(&alpha, &i__3);
+		d__[i__2].r = d__1, d__[i__2].i = 0.;
+/* L60: */
+	    }
+	}
+	goto L120;
+
+/*        Arithmetically distributed D values: */
+
+L70:
+	d__[1].r = 1., d__[1].i = 0.;
+	if (*n > 1) {
+	    temp = 1. / *cond;
+	    alpha = (1. - temp) / (doublereal) (*n - 1);
+	    i__1 = *n;
+	    for (i__ = 2; i__ <= i__1; ++i__) {
+		i__2 = i__;
+		d__1 = (doublereal) (*n - i__) * alpha + temp;
+		d__[i__2].r = d__1, d__[i__2].i = 0.;
+/* L80: */
+	    }
+	}
+	goto L120;
+
+/*        Randomly distributed D values on ( 1/COND , 1): */
+
+L90:
+	alpha = log(1. / *cond);
+	i__1 = *n;
+	for (i__ = 1; i__ <= i__1; ++i__) {
+	    i__2 = i__;
+	    d__1 = exp(alpha * dlaran_(&iseed[1]));
+	    d__[i__2].r = d__1, d__[i__2].i = 0.;
+/* L100: */
+	}
+	goto L120;
+
+/*        Randomly distributed D values from IDIST */
+
+L110:
+	zlarnv_(idist, &iseed[1], n, &d__[1]);
+
+L120:
+
+/*        If MODE neither -6 nor 0 nor 6, and IRSIGN = 1, assign */
+/*        random signs to D */
+
+	if (*mode != -6 && *mode != 0 && *mode != 6 && *irsign == 1) {
+	    i__1 = *n;
+	    for (i__ = 1; i__ <= i__1; ++i__) {
+		zlarnd_(&z__1, &c__3, &iseed[1]);
+		ctemp.r = z__1.r, ctemp.i = z__1.i;
+		i__2 = i__;
+		i__3 = i__;
+		d__1 = z_abs(&ctemp);
+		z__2.r = ctemp.r / d__1, z__2.i = ctemp.i / d__1;
+		z__1.r = d__[i__3].r * z__2.r - d__[i__3].i * z__2.i, z__1.i =
+			 d__[i__3].r * z__2.i + d__[i__3].i * z__2.r;
+		d__[i__2].r = z__1.r, d__[i__2].i = z__1.i;
+/* L130: */
+	    }
+	}
+
+/*        Reverse if MODE < 0 */
+
+	if (*mode < 0) {
+	    i__1 = *n / 2;
+	    for (i__ = 1; i__ <= i__1; ++i__) {
+		i__2 = i__;
+		ctemp.r = d__[i__2].r, ctemp.i = d__[i__2].i;
+		i__2 = i__;
+		i__3 = *n + 1 - i__;
+		d__[i__2].r = d__[i__3].r, d__[i__2].i = d__[i__3].i;
+		i__2 = *n + 1 - i__;
+		d__[i__2].r = ctemp.r, d__[i__2].i = ctemp.i;
+/* L140: */
+	    }
+	}
+
+    }
+
+    return 0;
+
+/*     End of ZLATM1 */
+
+} /* zlatm1_ */
--- origsrc/SuperLU_4.1/TESTING/Makefile.am	1970-01-01 09:00:00.000000000 +0900
+++ src/SuperLU_4.1/TESTING/Makefile.am	2011-05-11 01:50:33.363657000 +0900
@@ -0,0 +1,53 @@
+TESTS = stest.csh dtest.csh ctest.csh ztest.csh
+check_PROGRAMS = stest dtest ctest ztest
+
+INCLUDES = -I$(top_srcdir)/SRC
+
+stest_SOURCES = sp_ienv.c \
+       sdrive.c sp_sconvert.c sgst01.c sgst02.c sgst04.c sgst07.c \
+       MATGEN/lsamen.c \
+       MATGEN/slatm1.c MATGEN/slaran.c MATGEN/slarnd.c \
+       MATGEN/slaruv.c MATGEN/slabad.c MATGEN/slarnv.c \
+       MATGEN/slatb4.c MATGEN/slaset.c MATGEN/slartg.c \
+       MATGEN/slatms.c MATGEN/slatme.c MATGEN/slatmr.c \
+       MATGEN/slagge.c MATGEN/slagsy.c MATGEN/slarge.c \
+       MATGEN/slaror.c MATGEN/slarot.c MATGEN/slatm2.c MATGEN/slatm3.c \
+       MATGEN/r_lg10.c MATGEN/r_sign.c MATGEN/pow_dd.c
+stest_LDADD = $(top_builddir)/SRC/libsuperlu.la $(BLAS_LIBS)
+
+dtest_SOURCES = sp_ienv.c \
+       ddrive.c sp_dconvert.c dgst01.c dgst02.c dgst04.c dgst07.c \
+       MATGEN/lsamen.c \
+       MATGEN/dlatm1.c MATGEN/dlaran.c MATGEN/dlarnd.c \
+       MATGEN/dlaruv.c MATGEN/dlabad.c MATGEN/dlarnv.c \
+       MATGEN/dlatb4.c MATGEN/dlaset.c MATGEN/dlartg.c \
+       MATGEN/dlatms.c MATGEN/dlatme.c MATGEN/dlatmr.c \
+       MATGEN/dlagge.c MATGEN/dlagsy.c MATGEN/dlarge.c \
+       MATGEN/dlaror.c MATGEN/dlarot.c MATGEN/dlatm2.c MATGEN/dlatm3.c \
+       MATGEN/d_lg10.c MATGEN/d_sign.c MATGEN/pow_dd.c
+dtest_LDADD = $(top_builddir)/SRC/libsuperlu.la $(BLAS_LIBS)
+
+ctest_SOURCES = sp_ienv.c \
+       cdrive.c sp_cconvert.c cgst01.c cgst02.c cgst04.c cgst07.c \
+       MATGEN/lsamen.c \
+       MATGEN/clatb4.c MATGEN/claset.c MATGEN/clartg.c \
+       MATGEN/clarnv.c MATGEN/clacgv.c MATGEN/csymv.c \
+       MATGEN/clatm1.c MATGEN/clatms.c MATGEN/clatme.c MATGEN/clatmr.c \
+       MATGEN/clagge.c MATGEN/clagsy.c MATGEN/clarge.c \
+       MATGEN/claror.c MATGEN/clarot.c MATGEN/clatm2.c MATGEN/clatm3.c \
+       MATGEN/claghe.c MATGEN/clarnd.c MATGEN/cdotc.c MATGEN/pow_dd.c \
+       MATGEN/slaran.c MATGEN/slarnd.c MATGEN/slatm1.c
+ctest_LDADD = $(top_builddir)/SRC/libsuperlu.la $(BLAS_LIBS)
+
+ztest_SOURCES = sp_ienv.c \
+       zdrive.c sp_zconvert.c zgst01.c zgst02.c zgst04.c zgst07.c \
+       MATGEN/lsamen.c \
+       MATGEN/dlaran.c MATGEN/dlarnd.c MATGEN/dlatm1.c \
+       MATGEN/zlatb4.c MATGEN/zlaset.c MATGEN/zlartg.c \
+       MATGEN/zlarnv.c MATGEN/zlacgv.c MATGEN/zsymv.c \
+       MATGEN/zlatms.c MATGEN/zlatme.c MATGEN/zlatmr.c \
+       MATGEN/zlagge.c MATGEN/zlagsy.c MATGEN/zlarge.c \
+       MATGEN/zlaror.c MATGEN/zlarot.c MATGEN/zlatm1.c \
+       MATGEN/zlatm2.c MATGEN/zlatm3.c \
+       MATGEN/zlaghe.c MATGEN/zlarnd.c MATGEN/zdotc.c MATGEN/pow_dd.c
+ztest_LDADD = $(top_builddir)/SRC/libsuperlu.la $(BLAS_LIBS)
--- origsrc/SuperLU_4.1/configure.ac	2011-05-11 01:50:22.187586600 +0900
+++ src/SuperLU_4.1/configure.ac	2011-05-11 01:51:00.362479400 +0900
@@ -1,16 +1,12 @@
 # -*- Autoconf -*-
 AC_PREREQ(2.59)
-AC_INIT(superlu, 4.0, xsli@lbl.gov)
+AC_INIT(superlu, 4.1, xsli@lbl.gov)
 AM_INIT_AUTOMAKE([foreign])
 AC_CONFIG_HEADER([config.h])
 AC_PROG_INSTALL
-AC_PROG_LIBTOOL
+LT_INIT([win32-dll disable-static])
 AC_PROG_F77
-sinclude(ax_blas.m4)
-AX_BLAS
-if test x"$BLAS_LIBS" = x; then
-   AC_MSG_ERROR([Cannot find blas libraries])
-fi
+PKG_CHECK_MODULES(BLAS, lapack)
 AC_CHECK_LIB([m], [floor])
-AC_CONFIG_FILES([Makefile SRC/Makefile superlu.pc])
+AC_CONFIG_FILES([Makefile SRC/Makefile superlu.pc TESTING/Makefile])
 AC_OUTPUT
