--- origsrc/seafile-server-6.2.5-server/configure.ac	2018-01-15 14:53:19.000000000 +0900
+++ src/seafile-server-6.2.5-server/configure.ac	2018-04-15 02:13:42.358000000 +0900
@@ -162,6 +162,7 @@ else
   LIB_MAC=
   MSVC_CFLAGS=
   LIB_CRYPT32=
+  LIB_ICONV=-liconv
 fi
 
 AC_SUBST(LIB_WS32)
--- origsrc/seafile-server-6.2.5-server/lib/Makefile.am	2018-01-15 14:53:19.000000000 +0900
+++ src/seafile-server-6.2.5-server/lib/Makefile.am	2018-04-15 01:26:35.592000000 +0900
@@ -33,7 +33,7 @@ seafile_HEADERS = seafile-object.h
 
 seafile-object.h: ${seafile_object_define}
 	rm -f $@
-	valac --pkg posix ${seafile_object_define} -C -H seafile-object.h
+	(cd $(srcdir) && valac --pkg posix ${seafile_object_define} -C -H $(abs_builddir)/seafile-object.h)
 
 DISTCLEANFILES = ${searpc_gen}
 
--- origsrc/seafile-server-6.2.5-server/server/repo-mgr.c	2018-01-15 14:53:19.000000000 +0900
+++ src/seafile-server-6.2.5-server/server/repo-mgr.c	2018-04-15 02:16:57.967000000 +0900
@@ -4024,10 +4024,7 @@ seaf_get_group_repos_by_user (SeafRepoMa
         return NULL;
 
     /* Get the groups this user belongs to. */
-    if (org_id < 0)
-        groups = ccnet_get_groups_by_user (rpc_client, user);
-    else
-        groups = ccnet_get_org_groups_by_user (rpc_client, user, org_id);
+    groups = ccnet_get_groups_by_user (rpc_client, user);
 
     if (!groups) {
         goto out;
--- origsrc/seafile-server-6.2.5-server/server/upload-file.c	2018-01-15 14:53:19.000000000 +0900
+++ src/seafile-server-6.2.5-server/server/upload-file.c	2018-04-15 02:06:49.021000000 +0900
@@ -2058,7 +2058,7 @@ out:
         /* Set keepalive to 0. This will cause evhtp to close the
          * connection after sending the reply.
          */
-        req->keepalive = 0;
+        evhtp_request_set_keepalive(req, 0);
 
         fsm->state = RECV_ERROR;
     }
@@ -2259,8 +2259,8 @@ upload_headers_cb (evhtp_request_t *req,
     }
 
     /* Set up per-request hooks, so that we can read file data piece by piece. */
-    evhtp_set_hook (&req->hooks, evhtp_hook_on_read, upload_read_cb, fsm);
-    evhtp_set_hook (&req->hooks, evhtp_hook_on_request_fini, upload_finish_cb, fsm);
+    evhtp_request_set_hook (req, evhtp_hook_on_read, upload_read_cb, fsm);
+    evhtp_request_set_hook (req, evhtp_hook_on_request_fini, upload_finish_cb, fsm);
     /* Set arg for upload_cb or update_cb. */
     req->cbarg = fsm;
 
@@ -2275,7 +2275,7 @@ err:
     /* Set keepalive to 0. This will cause evhtp to close the
      * connection after sending the reply.
      */
-    req->keepalive = 0;
+    evhtp_request_set_keepalive(req, 0);
     send_error_reply (req, EVHTP_RES_BADREQ, err_msg);
 
     g_free (repo_id);
@@ -2344,38 +2344,38 @@ upload_file_init (evhtp_t *htp, const ch
 
     cb = evhtp_set_regex_cb (htp, "^/upload/.*", upload_cb, NULL);
     /* upload_headers_cb() will be called after evhtp parsed all http headers. */
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     cb = evhtp_set_regex_cb (htp, "^/upload-api/.*", upload_api_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     cb = evhtp_set_regex_cb (htp, "^/upload-raw-blks-api/.*",
                              upload_raw_blks_api_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     cb = evhtp_set_regex_cb (htp, "^/upload-blks-api/.*", upload_blks_api_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     /* cb = evhtp_set_regex_cb (htp, "^/upload-blks-aj/.*", upload_blks_ajax_cb, NULL); */
     /* evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL); */
 
     cb = evhtp_set_regex_cb (htp, "^/upload-aj/.*", upload_ajax_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     cb = evhtp_set_regex_cb (htp, "^/update/.*", update_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     cb = evhtp_set_regex_cb (htp, "^/update-api/.*", update_api_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     cb = evhtp_set_regex_cb (htp, "^/update-blks-api/.*", update_blks_api_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     /* cb = evhtp_set_regex_cb (htp, "^/update-blks-aj/.*", update_blks_ajax_cb, NULL); */
     /* evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL); */
 
     cb = evhtp_set_regex_cb (htp, "^/update-aj/.*", update_ajax_cb, NULL);
-    evhtp_set_hook(&cb->hooks, evhtp_hook_on_headers, upload_headers_cb, NULL);
+    evhtp_callback_set_hook(cb, evhtp_hook_on_headers, upload_headers_cb, NULL);
 
     evhtp_set_regex_cb (htp, "^/upload_progress.*", upload_progress_cb, NULL);
 
