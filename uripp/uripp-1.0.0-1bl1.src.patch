--- origsrc/uripp-1.0.0/src/Makefile.am	2009-05-02 03:00:54.000000000 +0900
+++ src/uripp-1.0.0/src/Makefile.am	2013-10-27 19:57:59.021910600 +0900
@@ -2,3 +2,4 @@
 lib_LTLIBRARIES = liburipp.la
 pkginclude_HEADERS = apidefs.h authority.h domain_name.h fragment.h ip_address.h ipv6_address.h path.h query.h scheme.h uri.h urisyn.h utils.h
 liburipp_la_SOURCES = authority.cpp domain_name.cpp fragment.cpp ip_address.cpp ipv6_address.cpp path.cpp query.cpp scheme.cpp uri.cpp urisyn.cpp utils.cpp
+liburipp_la_LDFLAGS = -no-undefined
--- origsrc/uripp-1.0.0/src/query.cpp	2009-05-02 03:00:54.000000000 +0900
+++ src/uripp-1.0.0/src/query.cpp	2013-10-27 20:02:35.143004300 +0900
@@ -21,6 +21,7 @@ THE SOFTWARE.
 */
 #include "query.h"
 #include "urisyn.h"
+#include <algorithm>
 #include <stdexcept>
 namespace uripp {
     const char query::PAIRS_SEP_CHAR = '&';
--- origsrc/uripp-1.0.0/src/utils.cpp	2009-05-02 03:00:54.000000000 +0900
+++ src/uripp-1.0.0/src/utils.cpp	2013-10-27 20:04:56.758285900 +0900
@@ -138,10 +138,12 @@ namespace uripp {
         return true;
     }
 #	ifndef _WIN32
+#if !defined(__CYGWIN__)
     std::string convert(ptrdiff_t v) {
 		if (sizeof(ptrdiff_t) == sizeof(unsigned int)) return convert((unsigned int)v);
 		return convert((unsigned long long int)v);
     }
+#endif
 #	endif
     bool convert(const std::string& s, double& v) {
         if (s.empty())
