--- origsrc/NoLifeNx-1.0.0/CMakeLists.txt	2014-01-03 05:38:42.000000000 +0900
+++ src/NoLifeNx-1.0.0/CMakeLists.txt	2015-03-22 01:42:52.351120900 +0900
@@ -6,7 +6,8 @@ endif()
 aux_source_directory(. NOLIFENX_SOURCES)
 add_library(NoLifeNx ${NOLIFENX_SOURCES})
 if(${BUILD_SHARED_LIBS})
-    install(TARGETS NoLifeNx LIBRARY DESTINATION lib)
+    install(TARGETS NoLifeNx LIBRARY RUNTIME DESTINATION bin ARCHIVE DESTINATION lib)
+    set_target_properties(NoLifeNx PROPERTIES SOVERSION 0)
 else()
     install(TARGETS NoLifeNx LIBRARY ARCHIVE DESTINATION lib)
 endif()
@@ -20,3 +21,11 @@ nxfwd.hpp
 nx.hpp
 DESTINATION include/nx)
 target_link_libraries(NoLifeNx lz4)
+
+SET(prefix ${CMAKE_INSTALL_PREFIX})
+SET(exec_prefix ${CMAKE_INSTALL_PREFIX})
+SET(libdir ${CMAKE_INSTALL_PREFIX}/lib)
+SET(includedir ${CMAKE_INSTALL_PREFIX}/include)
+SET(VERSION "1.0.0")
+CONFIGURE_FILE(${CMAKE_SOURCE_DIR}/NoLifeNx.pc.in ${CMAKE_BINARY_DIR}/NoLifeNx.pc @ONLY)
+INSTALL(FILES ${CMAKE_BINARY_DIR}/NoLifeNx.pc DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/pkgconfig)
--- origsrc/NoLifeNx-1.0.0/NoLifeNx.pc.in	1970-01-01 09:00:00.000000000 +0900
+++ src/NoLifeNx-1.0.0/NoLifeNx.pc.in	2015-03-22 01:43:04.397995900 +0900
@@ -0,0 +1,10 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: NoLifeNx
+Description: Library to read NX files
+Version: @VERSION@
+Libs: -L${libdir} -lNoLifeNx
+Cflags: -I${includedir}
--- origsrc/NoLifeNx-1.0.0/node.cpp	2014-01-03 05:38:42.000000000 +0900
+++ src/NoLifeNx-1.0.0/node.cpp	2015-03-22 01:39:41.257370900 +0900
@@ -24,6 +24,9 @@
 #include <stdexcept>
 #include <vector>
 #include <sstream>
+#include <string>
+
+#include <boost/lexical_cast.hpp>
 
 namespace nl {
     node::node(node const & o) :
@@ -72,22 +75,22 @@ namespace nl {
         return n.get_string() + s;
     }
     node node::operator[](unsigned int n) const {
-        return operator[](std::to_string(n));
+        return operator[](boost::lexical_cast<std::string>(n));
     }
     node node::operator[](signed int n) const {
-        return operator[](std::to_string(n));
+        return operator[](boost::lexical_cast<std::string>(n));
     }
     node node::operator[](unsigned long n) const {
-        return operator[](std::to_string(n));
+        return operator[](boost::lexical_cast<std::string>(n));
     }
     node node::operator[](signed long n) const {
-        return operator[](std::to_string(n));
+        return operator[](boost::lexical_cast<std::string>(n));
     }
     node node::operator[](unsigned long long n) const {
-        return operator[](std::to_string(n));
+        return operator[](boost::lexical_cast<std::string>(n));
     }
     node node::operator[](signed long long n) const {
-        return operator[](std::to_string(n));
+        return operator[](boost::lexical_cast<std::string>(n));
     }
     node node::operator[](std::string const & o) const {
         return get_child(o.c_str(), static_cast<uint16_t>(o.length()));
@@ -166,7 +169,7 @@ namespace nl {
         case type::real:
             return static_cast<int64_t>(to_real());
         case type::string:
-            return std::stoll(to_string());
+            return atoll(to_string().c_str());
         default:
             throw std::runtime_error("Unknown node type");
         }
@@ -185,7 +188,7 @@ namespace nl {
         case type::real:
             return to_real();
         case type::string:
-            return std::stod(to_string());
+            return atof(to_string().c_str());
         default:
             throw std::runtime_error("Unknown node type");
         }
@@ -200,9 +203,9 @@ namespace nl {
         case type::audio:
             return def;
         case type::integer:
-            return std::to_string(to_integer());
+            return boost::lexical_cast<std::string>(to_integer());
         case type::real:
-            return std::to_string(to_real());
+            return boost::lexical_cast<std::string>(to_real());
         case type::string:
             return to_string();
         default:
